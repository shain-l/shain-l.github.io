<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ACL的运用</title>
    <url>/2020/09/01/ACL%E7%9A%84%E8%BF%90%E7%94%A8/</url>
    <content><![CDATA[<h3 id="1、实验目的"><a href="#1、实验目的" class="headerlink" title="1、实验目的"></a>1、实验目的</h3><p>1）掌握ACL的作用<br>2）理解标准和扩展ACL的区别<br>3）熟悉标准和扩展ACL的配置<br>4）掌握ACL的验证和查看命令<br>5）理解命名的ACL的作用与配置</p>
<a id="more"></a>
<h3 id="2、拓扑结构"><a href="#2、拓扑结构" class="headerlink" title="2、拓扑结构"></a>2、拓扑结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dz9FzR.png"></p>
<h3 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h3><p><strong>（1）完成各路由器的基本配置，实现各直连设备之间可以互ping对方，主机和路由器接口的地址自己规划</strong></p>
<blockquote>
<p>两台PC及三台路由器的IP地址配置如拓扑图所示，此处不再将图贴出</p>
</blockquote>
<p><strong>（2）在R2上添加两个loopback接口，loopback1和loopback2，其中loopback1地址为2.2.2.2/24，loopback2地址为22.22.22.22/24</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzCFAS.png"></p>
<p><strong>（3）完成必要的配置实现全网可达</strong></p>
<blockquote>
<p>在路由器上运行路由协议，实现全网可达</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzCVpj.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzCecn.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzCKBV.png"></p>
<p><strong>（4）使用标准ACL实现PC1不能访问PC2，并使用ping命令验证结果</strong></p>
<blockquote>
<p>标准ACL建议在离目标近的设备上配置，在R3上配置ACL拒绝来自主机172.16.1.1的流量，并在进接口方向调用，此时实现PC1不能访问PC2</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzCT3j.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzCHvn.png"></p>
<p><strong>（5）使用标准ACL实现只允许PC2远程登录到路由器R2，并使用telnet命令验证结果</strong></p>
<blockquote>
<p>在R2上配置ACL，允许主机172.16.3.1的流量，默认隐含一条拒绝所有，即拒绝除PC2之外的流量。在vty中允许其他设备使用telnet远程登录，并在in方向调用ACL</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzPGa8.png"></p>
<blockquote>
<p>在PC1和PC2上进行测试，此时实现了只允许PC2远程登录到R2</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dziPJg.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dziVLq.png"></p>
<p><strong>（6）使用标准ACL实现禁止loopback2所在网段的所有主机访问PC1，对loopback1所在网段主机的访问不做限制</strong></p>
<blockquote>
<p>在R1上配置ACL，允许loopback1网段，拒绝loopback2网段，然后在e0/1接口的in方向调用</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzizc9.png"></p>
<blockquote>
<p>此时实现了R2上的loopback1网段可以访问PC1，而loopback2网段不能</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzFtjs.png"></p>
<p><strong>（7）使用命名ACL完整上述标准ACL的需求</strong></p>
<ul>
<li>实现PC1不能访问PC2</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzecvD.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzeoPP.png"></p>
<ul>
<li>实现只允许PC2远程登录到路由器R2</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dznifP.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dznAl8.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dznVOg.png"></p>
<ul>
<li>实现禁止loopback2所在网段的所有主机访问PC1，对loopback1所在网段主机的访问不做限制</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzuCB4.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzuPHJ.png"></p>
<p><strong>（8）使用扩展ACL实现禁止PC1远程登录到R2，对其他访问不做限制</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzu34I.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzu1UA.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzulEd.png"></p>
<p><strong>（9）使用扩展ACL实现PC2可以telnet到路由器R1，但不能ping通路由器R1，分别使用ping和telnet验证结果</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzuOqe.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzuLrD.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzuHxK.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzuqKO.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzu726.png"></p>
<p><strong>（10）使用扩展ACL实现PC1可以pingPC2，但禁止PC2pingPC1，其他的访问不受限制，使用ping验证结果</strong></p>
<blockquote>
<p>ICMP</p>
<ul>
<li><p>echo request    –echo的请求包</p>
</li>
<li><p>echo reply         –echo的响应包</p>
</li>
</ul>
<p>只有以上两种报文是正常的，那么此时的ping才是能通的</p>
<p>PC1 ping PC2 正常</p>
<ul>
<li><p>PC1 给 PC2 发送的echo request是正常的（源是PC1，目标是PC2）</p>
</li>
<li><p>PC2给PC1发送的echo reply也是正常的（源是PC2，目标是PC1）</p>
</li>
</ul>
<p>PC2 ping PC1 不正常</p>
<ul>
<li><p>PC2不能给PC1发送 echo request（源是PC2，目的是PC1）</p>
</li>
<li><p>PC2不能接收到来自PC1的echo  reply（源是PC1，目的是PC2）</p>
</li>
</ul>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzKOS0.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzKqWq.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzKbYn.png"></p>
<p><strong>（11）使用命名ACL完成上述扩展ACL的需求</strong></p>
<ul>
<li>实现禁止PC1远程登录到R2，对其他访问不做限制</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzQCDS.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzQPHg.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzQ9u8.png"></p>
<ul>
<li>实现PC2可以telnet到路由器R1，但不能ping路由器R1，分别使用ping和telnet验证结果</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzQKDU.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzQuuT.png"></p>
<ul>
<li>实现PC1可以pingPC2，但禁止PC2pingPC1，其他的访问不受限制，使用ping验证结果</li>
</ul>
<p><span style="color:red">方法一：拒绝PC2向PC1发送icmp的echo-request报文</span></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzQWqS.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzQRr8.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzQ2Kf.png"></p>
<p><span style="color:red">方法二：拒绝PC1向PC2发送icmp的echo-reply报文</span></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzl1L8.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzllsf.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dzlQQP.png"></p>
]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
        <tag>ACL</tag>
      </tags>
  </entry>
  <entry>
    <title>DHCP</title>
    <url>/2020/11/15/DHCP/</url>
    <content><![CDATA[<h3 id="1、DHCP概述"><a href="#1、DHCP概述" class="headerlink" title="1、DHCP概述"></a>1、DHCP概述</h3><p>　　DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）是一种帮助网络管理员管理及自动分配IP地址的网络协议。在不使用DHCP的情况下，管理员必须手动为每台终端配置IP地址、子网掩码、默认网关等IP配置。在大型网络中，这将是一项繁重的工作，尤其是在设备物理位置频繁更改的环境中。在企业网环境中，DHCP服务器通常是一台专用设备；然而在小型网络或是分支机构中，DHCP服务器往往由Cisco Catalyst交换机或Cisco路由器配置实现。</p>
<h3 id="2、DHCP工作原理"><a href="#2、DHCP工作原理" class="headerlink" title="2、DHCP工作原理"></a>2、DHCP工作原理</h3><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/Dii8mQ.png"></p>
<h4 id="2-1、DHCP客户端进行IP请求"><a href="#2-1、DHCP客户端进行IP请求" class="headerlink" title="2.1、DHCP客户端进行IP请求"></a>2.1、DHCP客户端进行IP请求</h4><p>　　当一个DHCP客户机启动时，会自动将自己的IP地址配置成0.0.0.0，由于使用0.0.0.0不能进行正常通信，所以客户机就必须通过DHCP服务器来获取一个合法的地址。由于客户机不知道DHCP服务器的IP地址，所以它使用0.0.0.0作为源地址，255.255.255.255作为目标地址，使用UDP68号端口作为源端口，UDP67号端口作为目标地址，广播请求IP地址信息。广播信息DHCP Discover中包含了DHCP客户机的MAC地址和计算机名，以便使DHCP服务器能确定是哪个客户机发送的请求。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiidpV.png"></p>
<h4 id="2-2、DHCP服务器响应请求"><a href="#2-2、DHCP服务器响应请求" class="headerlink" title="2.2、DHCP服务器响应请求"></a>2.2、DHCP服务器响应请求</h4><p>　　当DHCP服务器接收到客户机请求IP地址的信息时，它就在自己的IP地址池中查找是否有合法的IP地址用于提供给客户机。如果有，DHCP服务器就将此IP地址做上标记，加入到DHCP OFFER的信息中。 由于DHCP客户机此时还未获取到IP地址，所以DHCP服务器使用自己的IP地址作为源IP地址，使用广播地址255.255.255.255作为目标地址，源端口为UDP67号端口，目的端口为UDP68号端口，广播DHCP OFFER信息。DHCP OFFER消息中包括：DHCP客户机的MAC地址、DHCP服务器提供的合法IP地址、子网掩码、默认网关（路由）、租约的期限、DHCP服务器的IP地址等。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/Diigt1.png"></p>
<h4 id="2-3、DHCP客户端选择IP"><a href="#2-3、DHCP客户端选择IP" class="headerlink" title="2.3、DHCP客户端选择IP"></a>2.3、DHCP客户端选择IP</h4><p>　　DHCP客户机从接收到的第一个DHCP OFFER消息中选择IP地址，发出IP地址的DHCP服务器将该地址保留，这样该地址就不会提供给其他的DHCP客户机。DHCP客户机广播DHCP Request消息至所有的DHCP服务器，表明它接受提供的内容。DHCP Request消息中包含了为该客户机提供IP配置的服务器的服务标识（IP地址）。DHCP服务器查看服务器标识符字段，以确定自己是否被选择为指定的客户机提供IP地址。若DHCP OFFER报文被拒绝，则DHCP服务器会取消提供此IP地址并将其保留，以用于为下一个客户机提供IP。在客户机选择IP的过程中，虽然客户机选择了IP地址，但是还没有正式获取到该IP，所以客户机仍然使用0.0.0.0作为源地址，255.255.255.255作为目标地址，源端口为UDP68，目的端口为UDP67，广播DHCP Request消息。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/Diih6O.png"></p>
<h4 id="2-4、DHCP服务器确认租约"><a href="#2-4、DHCP服务器确认租约" class="headerlink" title="2.4、DHCP服务器确认租约"></a>2.4、DHCP服务器确认租约</h4><ul>
<li>服务器确认租约：DHCP ACK</li>
</ul>
<p>　　DHCP服务器接收到DHCP Request报文后，会向客户机广播DHCP ACK报文。该报文中包含了IP地址的有效租期和其他可能配置的信息。虽然服务器确认了客户机的租约请求，但是客户机此时仍未收到服务器的DHCP ACK报文，所以服务器会使用自己的IP地址作为源地址，使用255.255.255.255作为目的地址，源端口为UDP67，目的端口为UDP68进行广播。当客户机收到DHCP ACK报文后，表示客户机成功获取到了IP地址，完成了TCP/IP的初始化。</p>
<ul>
<li>服务器拒绝租约：DHCP NACK（DHCP NAK）</li>
</ul>
<p>　　如果DHCP Request不成功，例如客户机试图租约之前的IP地址，但该IP地址不再可用，或者因为客户机移动到其他子网，该IP无效时，DHCP服务器将广播否定确认消息DHCP NACK。当客户机接收到不成功的确认时，它将重新开始DHCP的租约过程。</p>
<blockquote>
<p>　　如果DHCP客户机无法找到DHCP服务器，它将从TCP/IP的B类网段169.254. 0.0/16中挑选一个IP地址作为自 己的IP地址,继续每隔5分钟尝试与DHCP服务器进行通讯，一旦与DHCP服务器取得联系，则客户机放弃自动配置的IP地址，而使用DHCP服务器分配的IP地址。</p>
<p>　　DHCP客户机收到DHCP服务器回应的ACK报文后，通过地址冲突检测(arp)发现服务器分配的地址冲突或者由于其他原因导致不能使用，则发送DECLINE报文，通知服务器所分配的IP地址不可用。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiiT7d.png"></p>
<h4 id="2-5、DHCP客户端续租"><a href="#2-5、DHCP客户端续租" class="headerlink" title="2.5、DHCP客户端续租"></a>2.5、DHCP客户端续租</h4><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiFSBQ.png"></p>
<p>　　DHCP客户机会在租期过去50%的时候，直接向为其提供IP地址的DHCP服务器发送DHCP Request报文。如果客户机接收到该服务器回应的DHCP ACK报文，客户机就根据包中所提供的新的租期以及其它已经更新的TCP/IP参数，更新自己的配置，IP租用更新完成；如果服务器拒绝，则停止租用，归还该地址；如果没有收到该服务器的回复，则客户机继续使用现有的IP地址。如果在租期过去50%的时候没有更新，则DHCP客户机将在租期过去87.5%的时候再次与为其提供IP地址的DHCP服务器联系，发送延长租用请求。如果还不成功，到租约的100%时候，DHCP客户机必须放弃这个IP地址，重新申请。如果此时无DHCP服务器可用，DHCP客 户机会使用169.254. 0. 0/16中随机的一个地址，并且每隔5分钟再进行尝试。</p>
<h4 id="2-6、DHCP客户端状态转换"><a href="#2-6、DHCP客户端状态转换" class="headerlink" title="2.6、DHCP客户端状态转换"></a>2.6、DHCP客户端状态转换</h4><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiFA3V.png"></p>
<h3 id="3、在多层交换网络中配置DHCP"><a href="#3、在多层交换网络中配置DHCP" class="headerlink" title="3、在多层交换网络中配置DHCP"></a>3、在多层交换网络中配置DHCP</h3><p>　　拓扑图如下所示，配置DSW为DHCP服务器，PC1、PC2自动获取IP地址，针对PC3配置DHCP绑定</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiFeuF.png"></p>
<ul>
<li>将DSW配置成DHCP服务器</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW(config)#int vlan 1</span><br><span class="line">DSW(config-if)#no shutdown</span><br><span class="line">DSW(config-if)#ip address 192.168.10.254 255.255.255.0</span><br><span class="line"><span class="comment">//开启DHCP功能，Cisco默认开启</span></span><br><span class="line">DSW(config)#service dhcp</span><br><span class="line"><span class="comment">//创建地址池，名称为VLAN1_POOL</span></span><br><span class="line">DSW(config)#ip dhcp pool VLAN1_POOL</span><br><span class="line"><span class="comment">//通过IP子网及子网掩码定义地址范围</span></span><br><span class="line">DSW(dhcp-config)#network 192.168.10.0 255.255.255.0</span><br><span class="line"><span class="comment">//设置分配给客户端的默认网关地址</span></span><br><span class="line">DSW(dhcp-config)#default-router 192.168.10.254</span><br><span class="line"><span class="comment">//指定DNS服务器地址</span></span><br><span class="line">DSW(dhcp-config)#dns-server 8.8.8.8</span><br><span class="line"><span class="comment">//设置IP地址的租用期限(默认为1天)</span></span><br><span class="line">DSW(dhcp-config)#lease 2</span><br><span class="line"><span class="comment">//将192.168.10.254的地址从DHCP地址池中排除，该地址为DSW上的地址</span></span><br><span class="line">DSW(config)#ip dhcp excluded-address 192.168.10.254</span><br></pre></td></tr></table></figure>

<ul>
<li>在DSW上使用show ip dhcp pool命令检查配置的DHCP地址池</li>
</ul>
<blockquote>
<p>当前还未为任何客户端分配IP地址，并且可以看到地址池中被排除的IP地址个数</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiFMNR.png"></p>
<ul>
<li>在DSW上开启DHCP包的调试功能</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">DSW#debug ip dhcp server packet </span><br><span class="line">DHCP server packet debugging is on.</span><br></pre></td></tr></table></figure>

<ul>
<li>在PC1上设置IP地址获取方式为DHCP</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">PC1(config)#int e0/0</span><br><span class="line">PC1(config-if)#no shutdown </span><br><span class="line">PC1(config-if)#ip address dhcp</span><br><span class="line">*Nov <span class="number">10</span> <span class="number">02</span>:<span class="number">10</span>:<span class="number">08.051</span>: %DHCP<span class="number">-6</span>-ADDRESS_ASSIGN: Interface Ethernet0/<span class="number">0</span> assigned DHCP address <span class="number">192.168</span><span class="number">.10</span><span class="number">.1</span>, mask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>, hostname PC1</span><br></pre></td></tr></table></figure>

<ul>
<li>查看DSW上输出的debug信息</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">*Nov <span class="number">10</span> <span class="number">02</span>:<span class="number">10</span>:<span class="number">01.918</span>: DHCPD: Reload workspace interface Vlan1 tableid <span class="number">0.</span></span><br><span class="line">*Nov <span class="number">10</span> <span class="number">02</span>:<span class="number">10</span>:<span class="number">01.918</span>: DHCPD: tableid <span class="keyword">for</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.254</span> on Vlan1 is <span class="number">0</span></span><br><span class="line">*Nov <span class="number">10</span> <span class="number">02</span>:<span class="number">10</span>:<span class="number">01.918</span>: DHCPD: client<span class="string">&#x27;s VPN is .</span></span><br><span class="line"><span class="string">*Nov 10 02:10:01.918: DHCPD: using received relay info.</span></span><br><span class="line"><span class="string">*Nov 10 02:10:01.918: DHCPD: DHCPDISCOVER received from client 0063.6973.636f.2d61.6162.622e.6363.3030.2e33.3030.302d.4574.302f.30 on interface Vlan1.</span></span><br><span class="line"><span class="string">*Nov 10 02:10:01.918: DHCPD: using received relay info.</span></span><br><span class="line"><span class="string">*Nov 10 02:10:03.924: DHCPD: Sending DHCPOFFER to client 0063.6973.636f.2d61.6162.622e.6363.3030.2e33.3030.302d.4574.302f.30 (192.168.10.1).</span></span><br><span class="line"><span class="string">*Nov 10 02:10:03.924: DHCPD: no option 125</span></span><br><span class="line"><span class="string">*Nov 10 02:10:03.924: DHCPD: broadcasting BOOTREPLY to client aabb.cc00.3000.</span></span><br><span class="line"><span class="string">*Nov 10 02:10:03.927: DHCPD: Reload workspace interface Vlan1 tableid 0.</span></span><br><span class="line"><span class="string">*Nov 10 02:10:03.927: DHCPD: tableid for 192.168.10.254 on Vlan1 is 0</span></span><br><span class="line"><span class="string">*Nov 10 02:10:03.927: DHCPD: client&#x27;</span>s VPN is .</span><br><span class="line">*Nov <span class="number">10</span> <span class="number">02</span>:<span class="number">10</span>:<span class="number">03.927</span>: DHCPD: DHCPREQUEST received <span class="keyword">from</span> client <span class="number">0063.6973</span><span class="number">.636</span>f<span class="number">.2</span>d61<span class="number">.6162</span><span class="number">.622</span>e<span class="number">.6363</span><span class="number">.3030</span><span class="number">.2e33</span><span class="number">.3030</span><span class="number">.302</span>d<span class="number">.4574</span><span class="number">.302</span>f<span class="number">.30</span>.</span><br><span class="line">*Nov <span class="number">10</span> <span class="number">02</span>:<span class="number">10</span>:<span class="number">03.927</span>: DHCPD: Sending DHCPACK to client <span class="number">0063.6973</span><span class="number">.636</span>f<span class="number">.2</span>d61<span class="number">.6162</span><span class="number">.622</span>e<span class="number">.6363</span><span class="number">.3030</span><span class="number">.2e33</span><span class="number">.3030</span><span class="number">.302</span>d<span class="number">.4574</span><span class="number">.302</span>f<span class="number">.30</span> (<span class="number">192.168</span><span class="number">.10</span><span class="number">.1</span>).</span><br><span class="line">*Nov <span class="number">10</span> <span class="number">02</span>:<span class="number">10</span>:<span class="number">03.927</span>: DHCPD: no option <span class="number">125</span></span><br><span class="line">*Nov <span class="number">10</span> <span class="number">02</span>:<span class="number">10</span>:<span class="number">03.927</span>: DHCPD: broadcasting BOOTREPLY to client aabb.cc00<span class="number">.3000</span>.</span><br></pre></td></tr></table></figure>

<ul>
<li>查看DHCP地址池</li>
</ul>
<blockquote>
<p>此时已分配地址数为1，下一个待分配的IP地址为192.168.10.2</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiF336.png"></p>
<ul>
<li>设置PC2和PC3的IP地址获取方式为DHCP，然后在DSW上查看DHCP绑定表</li>
</ul>
<blockquote>
<p>当前DHCP服务器上已为3个客户端分配了IP地址</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiFYuD.png"></p>
<ul>
<li>配置PC3通过DHCP获取到固定的IP地址</li>
</ul>
<blockquote>
<p>由上图可知，PC3的客户端标示符为0063.6973.636f.2d61.6162.622e.6363.3030.2e35.3030.302d.4574.302f.30，可以通过这个标示符配置静态的DHCP绑定。也可以使用MAC地址作为客户端标示符，只需在PC3的接口上输入ip address client-id ethernet 0/0</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在DSW上清除PC3的DHCP绑定关系</span></span><br><span class="line">DSW#clear ip dhcp binding 192.168.10.3</span><br><span class="line"><span class="comment">//在DSW上为PC3分配IP地址192.168.10.100</span></span><br><span class="line">DSW(config)#ip dhcp pool PC3</span><br><span class="line">DSW(dhcp-config)#host 192.168.10.100 255.255.255.0</span><br><span class="line">DSW(dhcp-config)#default-router 192.168.10.254</span><br><span class="line"><span class="comment">//在某些环境中(例如运行Linux的设备)，设备发送的DHCP消息中是不携带标示符的，此时可以使用MAC地址来手动绑定IP地址，只需将client-identifier命令换成hardware-address命令即可</span></span><br><span class="line">DSW(dhcp-config)#client-identifier 0063.6973.636f.2d61.6162.622e.6363.3030.2e35.3030.302d.4574.302f.30</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置完成后，PC3并不会立刻获得配置的IP地址，只有当租期过期或是重新请求地址时才会分配绑定的IP地址</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//强制PC3重新从DHCP服务器获取地址</span></span><br><span class="line">PC3(config)#int e0/0</span><br><span class="line">PC3(config-if)#shutdown </span><br><span class="line">PC3(config-if)#no shutdown </span><br><span class="line">*Nov <span class="number">10</span> <span class="number">02</span>:<span class="number">51</span>:<span class="number">45.112</span>: %DHCP<span class="number">-6</span>-ADDRESS_ASSIGN: Interface Ethernet0/<span class="number">0</span> assigned DHCP address <span class="number">192.168</span><span class="number">.10</span><span class="number">.100</span>, mask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>, hostname PC3</span><br></pre></td></tr></table></figure>

<ul>
<li>在DSW1上查看DHCP绑定表，可知192.168.10.100这个地址的租期为永久有效</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiFNHH.png"></p>
<h3 id="4、DHCP中继"><a href="#4、DHCP中继" class="headerlink" title="4、DHCP中继"></a>4、DHCP中继</h3><p>　　DHCP中继是一个小程序，可以实现在不同子网和物理网段之间处理和转发DHCP信息。如果DHCP客户端和DHCP服务器在同一个物理网段，则客户端可以正确地获取到动态分配的IP地址。如果不在同一个物理网段，则需要DHCP中继代理。在配置了DHCP中继地址的前提下，如果交换机从客户端收到了一个广播DHCP请求，则会以单播的形式将这一请求转发至ip helper-address命令中定义的IP地址。配置了DHCP中继特性的交换机会在DHCP客户端与DHCP服务器之间中继DHCP会话。在交换机收到了数据包后，会确保服务器分配的IP地址属于客户端所在的子网。</p>
<p>　　拓扑如下所示，配置PC1和PC2自动获取IP地址</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiF6KS.png"></p>
<ul>
<li>将PC1和PC2划分入对应的VLAN</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW(config)#vlan 10,20</span><br><span class="line">SW(config)#int e0/0</span><br><span class="line">SW(config-if)#switchport mode access </span><br><span class="line">SW(config-if)#switchport access vlan 10</span><br><span class="line">SW(config)#int e0/1</span><br><span class="line">SW(config-if)#switchport mode access </span><br><span class="line">SW(config-if)#switchport access vlan 20</span><br></pre></td></tr></table></figure>

<ul>
<li>将SW的e0/2端口配置成三层端口，并配置IP地址</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW(config)#int e0/2</span><br><span class="line">SW(config-if)#no switchport </span><br><span class="line">SW(config-if)#ip address 12.12.12.2 255.255.255.0</span><br></pre></td></tr></table></figure>

<ul>
<li>在DHCP_Srv上配置DHCP地址池</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置服务器e0/0接口的IP地址</span></span><br><span class="line">DHCP_Srv(config)#int e0/0</span><br><span class="line">DHCP_Srv(config-if)#ip address 12.12.12.1 255.255.255.0</span><br><span class="line">DHCP_Srv(config-if)#no shutdown </span><br><span class="line"><span class="comment">//开启DHCP功能（默认开启）</span></span><br><span class="line">DHCP_Srv(config)#service dhcp </span><br><span class="line"><span class="comment">//创建地址池VLAN10，指定地址池范围和默认网关</span></span><br><span class="line">DHCP_Srv(config)#ip dhcp pool VLAN10</span><br><span class="line">DHCP_Srv(dhcp-config)#network 192.168.10.0 255.255.255.0</span><br><span class="line">DHCP_Srv(dhcp-config)#default-router 192.168.10.254</span><br><span class="line"><span class="comment">//创建地址池VLAN20，指定地址池范围和默认网关</span></span><br><span class="line">DHCP_Srv(config)#ip dhcp pool VLAN20</span><br><span class="line">DHCP_Srv(dhcp-config)#network 192.168.20.0 255.255.255.0</span><br><span class="line">DHCP_Srv(dhcp-config)#default-router 192.168.20.254</span><br><span class="line"><span class="comment">//将地址池中已用的IP地址排除</span></span><br><span class="line">DHCP_Srv(config)#ip dhcp excluded-address 192.168.10.254</span><br><span class="line">DHCP_Srv(config)#ip dhcp excluded-address 192.168.20.254</span><br></pre></td></tr></table></figure>

<ul>
<li>在SW上进行SVI配置，并指定中继地址</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW(config)#int vlan 10</span><br><span class="line">SW(config-if)#ip address 192.168.10.254 255.255.255.0</span><br><span class="line">SW(config-if)#no shutdown </span><br><span class="line">SW(config-if)#ip helper-address 12.12.12.1</span><br><span class="line">SW(config)#int vlan 20</span><br><span class="line">SW(config-if)#ip address 192.168.20.254 255.255.255.0</span><br><span class="line">SW(config-if)#no shutdown </span><br><span class="line">SW(config-if)#ip helper-address 12.12.12.1</span><br></pre></td></tr></table></figure>

<ul>
<li>配置路由协议使网络可达</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW(config)#router ospf 1</span><br><span class="line">SW(config-router)#router-id 2.2.2.2</span><br><span class="line">SW(config-router)#network 12.12.12.0 0.0.0.255 area 0</span><br><span class="line">SW(config-router)#network 192.168.10.0 0.0.0.255 area 0</span><br><span class="line">SW(config-router)#network 192.168.20.0 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">DHCP_Srv(config)#router ospf 1</span><br><span class="line">DHCP_Srv(config-router)#router-id 1.1.1.1</span><br><span class="line">DHCP_Srv(config-router)#network 12.12.12.0 0.0.0.255 area 0</span><br></pre></td></tr></table></figure>

<ul>
<li>PC1和PC2自动获取IP地址</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">PC1(config)#int e0/0</span><br><span class="line">PC1(config-if)#no shutdown </span><br><span class="line">PC1(config-if)#ip address dhcp</span><br><span class="line">*Nov <span class="number">10</span> <span class="number">04</span>:<span class="number">54</span>:<span class="number">04.732</span>: %DHCP<span class="number">-6</span>-ADDRESS_ASSIGN: Interface Ethernet0/<span class="number">0</span> assigned DHCP address <span class="number">192.168</span><span class="number">.10</span><span class="number">.1</span>, mask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>, hostname PC1</span><br><span class="line"></span><br><span class="line">PC2(config)#int e0/0</span><br><span class="line">PC2(config-if)#no shutdown </span><br><span class="line">PC2(config-if)#ip address dhcp</span><br><span class="line">*Nov <span class="number">10</span> <span class="number">04</span>:<span class="number">54</span>:<span class="number">34.798</span>: %DHCP<span class="number">-6</span>-ADDRESS_ASSIGN: Interface Ethernet0/<span class="number">0</span> assigned DHCP address <span class="number">192.168</span><span class="number">.20</span><span class="number">.1</span>, mask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>, hostname PC2</span><br></pre></td></tr></table></figure>

<ul>
<li>查看DHCP地址池和DHCP绑定表</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiFREj.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiFgbQ.png"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>DHCP</tag>
        <tag>DHCP中继</tag>
      </tags>
  </entry>
  <entry>
    <title>DMVPN验证</title>
    <url>/2020/09/01/DMVPN%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<p>DMVPN三个阶段</p>
<ul>
<li>阶段一：中心到节点的设计（Hub-to-Spoke Design）</li>
<li>阶段二：节点到节点的设计（Spoke-to-Spoke Design）</li>
<li>阶段三：分层（基于树的）设计（Hierachical [Tree-Based] Design）</li>
</ul>
<p>本文将从三个阶段对DMVPN进行验证</p>
<a id="more"></a>

<h3 id="1、拓扑结构"><a href="#1、拓扑结构" class="headerlink" title="1、拓扑结构"></a>1、拓扑结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxEvT0.png"></p>
<p>在进行验证之前，确保R1、R3、R4存在默认路由，使得三台路由器之间可以相互ping通</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxulw9.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxu8F1.png"></p>
<h3 id="2、phase-1验证"><a href="#2、phase-1验证" class="headerlink" title="2、phase-1验证"></a>2、phase-1验证</h3><blockquote>
<p>hub端是mGRE，分支端是常规的GRE，分支之间的流量必须经过hub，可以采取关闭水平分割来实现分支之间的路由互相学习，可以在hub端进行手工的路由汇总，来优化分支的路由条目</p>
</blockquote>
<ul>
<li>hub配置</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int tunnel 1</span><br><span class="line">R1(config-if)#ip address 10.1.1.1 255.255.255.0    //隧道地址</span><br><span class="line">R1(config-if)#tunnel source 202.101.12.1    //指定隧道源地址(隧道目的地址可通过nhrp解析)</span><br><span class="line">R1(config-if)#tunnel mode gre multipoin    //R1为hub，所以指定gre隧道模式为multipoint</span><br><span class="line">R1(config-if)#tunnel key 100000    //指定隧道的key，可用于隧道的身份验证</span><br><span class="line">R1(config-if)#ip nhrp network-id 12345    //指定nhrp的标识，hub和spoke之间的network-id必须一致</span><br><span class="line">R1(config-if)#ip nhrp authentication cisco123    //nhrp身份验证</span><br><span class="line">R1(config-if)#ip nhrp map multicast dynamic    //开启组播映射功能</span><br></pre></td></tr></table></figure>

<ul>
<li>spoke(R3)配置</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R3(config)#int tunnel 1</span><br><span class="line">R3(config-if)#ip address 10.1.1.3 255.255.255.0</span><br><span class="line">R3(config-if)#tunnel source 202.101.23.3</span><br><span class="line">R3(config-if)#tunnel destination 202.101.12.1</span><br><span class="line">R3(config-if)#tunnel key 100000</span><br><span class="line">R3(config-if)#ip nhrp network-id 12345</span><br><span class="line">R3(config-if)#ip nhrp authentication cisco123 </span><br><span class="line">R3(config-if)#ip nhrp map 10.1.1.1 202.101.12.1    //映射hub的逻辑地址到物理地址</span><br><span class="line">R3(config-if)#ip nhrp map multicast 202.101.12.1    //映射组播信息到hub地址</span><br><span class="line">R3(config-if)#ip nhrp nhs 10.1.1.1    //指定next-hop-server为10.1.1.1</span><br></pre></td></tr></table></figure>

<ul>
<li>R1和R3的隧道地址可以相互ping通</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxKljS.png"></p>
<ul>
<li>在R1上查看地址的映射关系——10.1.1.3映射到的公网地址为202.101.23.3</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxKNhq.png"></p>
<ul>
<li>spoke(R4)配置</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R4(config)#int tunnel 1</span><br><span class="line">R4(config-if)#ip address 10.1.1.4 255.255.255.0</span><br><span class="line">R4(config-if)#ip nhrp network-id 12345</span><br><span class="line">R4(config-if)#ip nhrp authentication cisco123</span><br><span class="line">R4(config-if)#ip nhrp nhs 10.1.1.1</span><br><span class="line">R4(config-if)#ip nhrp map 10.1.1.1 202.101.12.1</span><br><span class="line">R4(config-if)#ip nhrp map multicast 202.101.12.1</span><br><span class="line">R4(config-if)#tunnel source 202.101.24.4</span><br><span class="line">R4(config-if)#tunnel destination 202.101.12.1</span><br><span class="line">R4(config-if)#tunnel key 100000</span><br></pre></td></tr></table></figure>

<ul>
<li>无需再在R1上配置，即可ping通R4的隧道地址，并且也记录了R4的逻辑地址和物理地址的映射关系</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxMdIA.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxMRaj.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxMWIs.png"></p>
<ul>
<li>分别在R1、R3、R4上各启用一个loopback接口，地址设置如下所示</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int loopback 1</span><br><span class="line">R1(config-if)#ip add 172.16.1.1 255.255.255.0</span><br><span class="line">R3(config)#int loopback 1</span><br><span class="line">R3(config-if)#ip address 172.16.3.1 255.255.255.0</span><br><span class="line">R4(config)#int loopback 1</span><br><span class="line">R4(config-if)#ip add 172.16.4.1 255.255.255.0</span><br></pre></td></tr></table></figure>

<ul>
<li>启用EIGRP协议</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#router eigrp 110</span><br><span class="line">R1(config-router)#no auto-summary </span><br><span class="line">R1(config-router)#network 172.16.1.0 0.0.0.255</span><br><span class="line">R1(config-router)#network 10.1.1.0 0.0.0.255</span><br><span class="line"></span><br><span class="line">R3(config)#router eigrp 110</span><br><span class="line">R3(config-router)#no auto-summary </span><br><span class="line">R3(config-router)#network 172.16.3.0 0.0.0.255</span><br><span class="line">R3(config-router)#network 10.1.1.0 0.0.0.255</span><br><span class="line"></span><br><span class="line">R4(config)#router eigrp 110</span><br><span class="line">R4(config-router)#no auto-summary </span><br><span class="line">R4(config-router)#network 172.16.4.0 0.0.0.255</span><br><span class="line">R4(config-router)#network 10.1.1.0 0.0.0.255</span><br></pre></td></tr></table></figure>

<ul>
<li>在R1上查看EIGRP邻居表，可知R1通过1个隧道接口建立了两个邻居关系</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxQj0g.png"></p>
<ul>
<li>在R1的e0/0接口抓包，报文如下图所示，但是此时的报文都为明文显示，需要进行加密</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxlEBF.png"></p>
<ul>
<li>在R1、R3和R4上配置IPSec，保护隧道上的数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R1(config)#crypto isakmp policy 10</span><br><span class="line">R1(config-isakmp)#authentication pre-share</span><br><span class="line">R1(config-isakmp)#exit </span><br><span class="line">R1(config)#crypto isakmp key cisco123 address 0.0.0.0</span><br><span class="line">R1(config)#crypto ipsec transform-set dmvpn esp-3des esp-sha256-hmac </span><br><span class="line">R1(cfg-crypto-trans)#mode transport </span><br><span class="line">R1(cfg-crypto-trans)#exit</span><br><span class="line">R1(config)#crypto ipsec profile dprofile</span><br><span class="line">R1(ipsec-profile)#set transform-set dmvpn</span><br><span class="line">R1(ipsec-profile)#exit</span><br><span class="line">R1(config)#int tunnel 1</span><br><span class="line">R1(config-if)#tunnel protection ipsec profile dprofile</span><br><span class="line">*Aug <span class="number">31</span> <span class="number">02</span>:<span class="number">59</span>:<span class="number">34.650</span>: %CRYPTO<span class="number">-6</span>-ISAKMP_ON_OFF: ISAKMP is ON</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">R3(config)#crypto isakmp policy 10</span><br><span class="line">R3(config-isakmp)#authentication pre-share </span><br><span class="line">R3(config-isakmp)#exit</span><br><span class="line">R3(config)#crypto isakmp key cisco123 address 0.0.0.0</span><br><span class="line">R3(config)#crypto ipsec transform-set dmvpn esp-3des esp-sha256-hmac </span><br><span class="line">R3(cfg-crypto-trans)#mode transport </span><br><span class="line">R3(cfg-crypto-trans)#exit</span><br><span class="line">R3(config)#crypto ipsec profile dprofile</span><br><span class="line">R3(ipsec-profile)#set transform-set dmvpn</span><br><span class="line">R3(ipsec-profile)#exit</span><br><span class="line">R3(config)#int tunnel 1</span><br><span class="line">R3(config-if)#tunnel protection ipsec profile dprofile</span><br><span class="line">*Aug <span class="number">31</span> <span class="number">03</span>:<span class="number">02</span>:<span class="number">49.557</span>: %CRYPTO<span class="number">-6</span>-ISAKMP_ON_OFF: ISAKMP is ON</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R4(config)#crypto isakmp policy 10</span><br><span class="line">R4(config-isakmp)#authentication pre-share </span><br><span class="line">R4(config-isakmp)#exit </span><br><span class="line">R4(config)#crypto isakmp key cisco123 address 0.0.0.0</span><br><span class="line">R4(config)#crypto ipsec transform-set dmvpn  esp-3des esp-sha256-hmac </span><br><span class="line">R4(cfg-crypto-trans)#mode transport </span><br><span class="line">R4(cfg-crypto-trans)#exit</span><br><span class="line">R4(config)#crypto ipsec profile dprofile</span><br><span class="line">R4(ipsec-profile)#set transform-set dmvpn</span><br><span class="line">R4(ipsec-profile)#exit</span><br><span class="line">R4(config)#int tunnel 1</span><br><span class="line">R4(config-if)#tunnel protection ipsec profile dprofile</span><br><span class="line">*Aug <span class="number">31</span> <span class="number">03</span>:<span class="number">06</span>:<span class="number">36.128</span>: %CRYPTO<span class="number">-6</span>-ISAKMP_ON_OFF: ISAKMP is ON</span><br></pre></td></tr></table></figure>

<ul>
<li>验证是否进行了加密</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dx1KaQ.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dx1UZF.png"></p>
<ul>
<li>此时R3上的路由表并没有172.16.4.0的路由条目，因为存在水平分割问题</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dx1xWn.png"></p>
<ul>
<li>在R1的隧道接口中关闭水平分割</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int tunnel 1</span><br><span class="line">R1(config-if)#no ip split-horizon eigrp 110</span><br></pre></td></tr></table></figure>

<ul>
<li>再次查看R3的路由表 ，此时学习到了172.16.4.0的路由条目</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dx31Te.png"></p>
<ul>
<li>跟踪路由，可知分支之间的流量必须经过hub</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dx3rkQ.png"></p>
<ul>
<li>可通过在hub上进行路由汇总的方式来优化分支的路由条目，为了便于观察结果，在R3和R4上分别再开启一个回环口，并在EIGRP中通告</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R3(config)#int loopback 2</span><br><span class="line">R3(config-if)#ip address 172.16.33.1 255.255.255.0</span><br><span class="line">R3(config)#router eigrp 110</span><br><span class="line">R3(config-router)#network 172.16.33.0  0.0.0.255</span><br><span class="line"></span><br><span class="line">R4(config)#int loopback 2</span><br><span class="line">R4(config-if)#ip add 172.16.44.1 255.255.255.0</span><br><span class="line">R4(config)#router eigrp 110</span><br><span class="line">R4(config-router)#network 172.16.44.0 0.0.0.255</span><br></pre></td></tr></table></figure>

<ul>
<li>查看R3和R4的路由表，都学习到了相应的路由条目</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dx3HpR.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dx3b11.png"></p>
<ul>
<li>在R1的tunnel接口进行路由汇总</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int tunnel 1</span><br><span class="line">R1(config-if)#ip summary-address eigrp 110 172.16.0.0/16</span><br></pre></td></tr></table></figure>

<ul>
<li>再次查看R3和R4的路由表，此时学习到的是经过R1汇总的路由</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxDFvF.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxDEDJ.png"></p>
<h3 id="3、phase-2验证"><a href="#3、phase-2验证" class="headerlink" title="3、phase-2验证"></a>3、phase-2验证</h3><blockquote>
<p>所有站点都采用mGRE，分支的流量可以无需经过hub，不能在hub端对路由进行汇总；eigrp环境，需要关闭下一跳规则——<span style="color:red">no ip next-hop-self eigrp</span>，缺点所有的分支都需要维护整个网络的所有路由信息。</p>
</blockquote>
<ul>
<li>在phase1的基础上，将R3、R4的隧道模式改为multipoint</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R3(config)#int tunnel 1</span><br><span class="line">R3(config-if)#no tunnel destination 202.101.12.1</span><br><span class="line">R3(config-if)#tunnel mode gre multipoint </span><br><span class="line"></span><br><span class="line">R4(config)#int tunnel 1</span><br><span class="line">R4(config-if)#no tunnel destination 202.101.12.1</span><br><span class="line">R4(config-if)#tunnel mode gre multipoint </span><br></pre></td></tr></table></figure>

<ul>
<li>在R3上使用traceroute跟踪路由，可知去往172.16.4.1仍然要经过hub</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxDDKg.png"></p>
<ul>
<li>查看R3的路由表，可知去往172.16.4.0/24网段的路由的下一跳为hub</li>
</ul>
<blockquote>
<p>【注】<span style="color:red">此时并未在R1的隧道接口汇总路由</span></p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxDsbj.png"></p>
<ul>
<li>出现上述问题的原因在于EIGRP路由在传递的时候会将下一跳改为自己，将R1的tunnel接口将该属性关闭</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int tunnel 1</span><br><span class="line">R1(config-if)#no ip next-hop-self eigrp 110</span><br></pre></td></tr></table></figure>

<ul>
<li>此时查看R3的路由表可知去往172.16.4.0/24网段的路由的下一跳变为R4</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxDHaR.png"></p>
<ul>
<li>在R3上再次跟踪路由，如下图所示，可知此时R3直接通过R4访问172.16.4.1，无需再经过hub</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxDLPx.png"></p>
<h3 id="4、phase-3验证"><a href="#4、phase-3验证" class="headerlink" title="4、phase-3验证"></a>4、phase-3验证</h3><blockquote>
<p>在阶段三引入了shortcut（短路）和redirect（重定向）</p>
</blockquote>
<ul>
<li>在R1上开启redirect，在R3和R4上开启shortcut</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int tunnel 1</span><br><span class="line">R1(config-if)#ip nhrp redirect </span><br><span class="line"></span><br><span class="line">R3(config)#int tunnel 1</span><br><span class="line">R3(config-if)#ip nhrp shortcut </span><br><span class="line"></span><br><span class="line">R4(config)#int tunnel 1</span><br><span class="line">R4(config-if)#ip nhrp shortcut </span><br></pre></td></tr></table></figure>

<ul>
<li>在R1上将下一跳属性和水平分割恢复</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int tunnel 1</span><br><span class="line">R1(config-if)#ip next-hop-self eigrp 110</span><br><span class="line">R1(config-if)#ip split-horizon eigrp 110</span><br></pre></td></tr></table></figure>

<ul>
<li>此时R3和R4的路由表还是无法学习到其他站点的路由条目</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxrMon.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxrliq.png"></p>
<ul>
<li>为了验证实验结果，此时在R3启用多个回环口，并在eigrp中通告</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R3(config)#int loopback 3</span><br><span class="line">R3(config-if)#ip add 192.168.3.1 255.255.255.0</span><br><span class="line">R3(config)#int loopback 4</span><br><span class="line">R3(config-if)#ip add 192.168.4.1 255.255.255.0</span><br><span class="line">R3(config)#int loopback 5</span><br><span class="line">R3(config-if)#ip add 192.168.5.1 255.255.255.0</span><br><span class="line"></span><br><span class="line">R3(config)#router eigrp 110</span><br><span class="line">R3(config-router)#network 192.168.3.0</span><br><span class="line">R3(config-router)#network 192.168.4.0</span><br><span class="line">R3(config-router)#network 192.168.5.0</span><br></pre></td></tr></table></figure>

<ul>
<li>在R1上进行路由汇总</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int tunnel 1</span><br><span class="line">R1(config-if)#ip summary-address eigrp 110 172.16.0.0/16</span><br><span class="line">R1(config-if)#ip summary-address eigrp 110 192.168.0.0/16</span><br></pre></td></tr></table></figure>

<ul>
<li>再次查看R3和R4的路由表，此时学习到的为经过R1汇总的条目，并且下一跳都指向R1</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxrsSK.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxr6yD.png"></p>
<ul>
<li>在R4上跟踪到达172.16.3.1所经过的路径，可知需经过R1</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxr4Yt.png"></p>
<ul>
<li>查看R4的路由表，此时出现了”H”的路由条目</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxroSf.png"></p>
<ul>
<li>此时再次使用traceroute跟踪172.16.3.1，则无需再经过R1</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxs96U.png"></p>
<ul>
<li>再次进行验证，使用traceroute命令跟踪到达192.168.3.1所经过的路径，首次traceroute需要经过R1</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxsUc8.png"></p>
<ul>
<li>查看R4的路由表，此时通过NHRP学习到了更详细的路由去往192.168.3.0/24网段，下一跳为10.1.1.3</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxsrAs.png"></p>
<ul>
<li>再次使用traceroute跟踪路径，则无需再经过R1</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dxsT41.png"></p>
<h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/01/dx5hkT.png"></p>
]]></content>
      <tags>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title>EIGRP</title>
    <url>/2020/11/17/EIGRP/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>EIGRP的简单应用</title>
    <url>/2020/08/28/EIGRP%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h4 id="1、实验目的"><a href="#1、实验目的" class="headerlink" title="1、实验目的"></a>1、实验目的</h4><p>1）掌握EIGRP的基本配置<br>2）理解EIGRP的邻居表、拓扑表以及路由表的含义<br>3）掌握查看EIGRP路由协议的相关信息<br>4）掌握FD、AD、S、FS以及FC的含义<br>5）理解EIGRP的hello报文作用<br>6）理解路由快速收敛的含义<br>7）理解EIGRP的不等价负载均衡</p>
<a id="more"></a>

<h4 id="2、实验拓扑"><a href="#2、实验拓扑" class="headerlink" title="2、实验拓扑"></a>2、实验拓扑</h4><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTeEvT.png"></p>
<h4 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h4><p><strong>（1）完成各路由器的基本配置，实现各直连设备之间可以互ping对方，要求PC1的IP地址设置为172.16.1.1/24，网关设置为172.16.1.254，PC2的IP地址设置为172.16.3.1/24，网关设置为172.16.3.254，各路由器接口间的地址自己规划</strong></p>
<blockquote>
<p>IP地址规划如拓扑图标记所示，此处不再列出</p>
</blockquote>
<p><strong>（2）全网启用EIGRP，通告各自的直连网络路由，并关闭自动汇总</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启用EIGRP进程，AS号为90，AS号是邻居建立的前提，邻居要建立AS号必须要一样</span></span><br><span class="line">R3(config)#router eigrp 90 </span><br><span class="line"><span class="comment">//关闭自动汇总</span></span><br><span class="line">R3(config-router)#no auto-summary  </span><br><span class="line"><span class="comment">//通告网段</span></span><br><span class="line">R3(config-router)#network 192.168.23.0  //通告直连网段</span><br><span class="line">R3(config-router)#network 172.16.3.0 0.0.0.255</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTmotA.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTmj0g.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTnCpq.png"></p>
<p><strong>（3）在R1上使用show ip protocols命令，观察并理解该命令的输出信息</strong></p>
<blockquote>
<p>Metric weight K1=1, K2=0, K3=1, K4=0, K5=0   – EIGRP的开销计算与这5个K值有关系</p>
<p>邻居要建立，则五个K值必须相同</p>
<p>K1：带宽；K2：负载；K3：延迟；K4：可靠性；K5：MTU</p>
<p>真正与EIGRP开销计算有关系的，只有带宽和延迟；</p>
<p>EIGRP开销=带宽+延迟</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTnHUJ.png"></p>
<p><strong>（4）查看各路由器的邻居表、拓扑表以及路由表，分别找出FD、AD以及S等重要信息</strong></p>
<blockquote>
<p>邻居表各字段含义</p>
<p>H：建立顺序</p>
<p>Address：对端的IP</p>
<p>Interface：从哪个接口学习到</p>
<p>Hold：定义了等待没有从邻居那里接收到任何包的最大时间，当接收到新的包以后，Hold复位（在10~15s之间循环）</p>
<p>Uptime：建立了多久</p>
<p>SRTT：向邻居发送包以及受到邻居回应ACK的平均回程时间</p>
<p>RTO：重传超时时间，路由器在重新传输包之前等待ACK的时间（应为SRTT的6倍，最大5000，若重传16次还未得到确认，则此邻居被宣布无效）</p>
<p>Q：队列计数，表示有多少个可靠报文还没有得到确认，在运行正常的环境下该值应为0（如果值大于0则说明发生了拥塞）</p>
<p>Seq：序列号</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTuKaQ.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTulPs.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTu1Gn.png"></p>
<blockquote>
<p>拓扑表</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTuRde.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTuWIH.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTuhid.png"></p>
<blockquote>
<p>路由表</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTuTQP.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTuOoQ.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTuvJs.png"></p>
<p><strong>（5）测试PC1与PC2之间的连通性</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTKGYd.png"></p>
<p><strong>（6）在R2上添加一个loopback1接口，地址为200.200.200.200/24，然后在EIGRP中通告，观察R1和R3是否能马上学习到R2上新增的loopback1网段，并测试各主机与该loopback1之间的联通性</strong></p>
<blockquote>
<p>R1和R3能马上学习到R2上新增的loopback1网段</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTKaOf.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTK00S.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTKsYj.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTKcpn.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTKglq.png"></p>
<p><strong>（7）使用wireshark抓取EIGRP的报文，理解EIGRP报文各字段的含义</strong></p>
<blockquote>
<p>每隔5s发送一个hello包，保持时间为15s，即超过3个hello时间未收到hello则认为对端Down，断开连接</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTKTh9.png"></p>
<p><strong>（8）在R1上添加一个loopback1接口，地址为100.100.100.100/24，然后在EIGRP中通告</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTKj0O.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTKv7D.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTMphd.png"></p>
<p><strong>（9）断开R1和R3与各主机之间的连接，连接R1与R3之间的以太网接口，完成必要配置，实现200.200.200.200访问100.100.100.100的不等价负载均衡</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTM0jx.png"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用源200.200.200.200去访问目标100.100.100.100</span></span><br><span class="line"><span class="comment">//若没有跟上source，那么默认情况下就是使用出接口去访问目标</span></span><br><span class="line">R2#ping 100.100.100.100 source 200.200.200.200  </span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTQP54.png"></p>
<blockquote>
<p>由于此时R2的路由表中只存在一条路径到达100.100.100.100，所以此时不存在负载均衡</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTQlPH.png"></p>
<blockquote>
<p>等价负载均衡：有多条开销相等的路径，此时可以同时从这些开销相等的路径去发送数量相同的数据包。</p>
<p>不等价负载均衡：有多条路径，但是开销不一样，此时会根据一定的比例去发送数据包。</p>
<p>对于EIGRP，默认情况下只支持等价负载均衡，并且默认情况下最多可以同时存在4条的等价负载均衡。</p>
<p>R2(config)#router eigrp 90</p>
<p>R2(config-router)#maximum-paths 8     –将等价负载均衡的条数改为8条</p>
<p>EIGRP还可以支持不等价负载均衡，但是有前提：</p>
<p>①次优路径的AD值要小于最优路径的FD值–称为FC条件，只有满足了该条件，才会存在FS。</p>
<p>②当存在FS之后，EIGRP拓扑表会存在两个下一跳，但是只会选择最优的添加进路由表。此时如果要保证路由表也有两条路径，必须手动修改V值(variance)，使得满足”最优路径的FD*V值&gt;次优路径的FD值”（默认情况下，v值为1）</p>
</blockquote>
<blockquote>
<p>此题中，最优路径为R2通过R1到达100.100.100.100，次优路径为经过R3、R1到达100.100.100.100</p>
</blockquote>
<blockquote>
<p>查看R2的路由表，此时显示的为最优路径，FD=409600</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTlmSs.png"></p>
<blockquote>
<p>次优路径的AD即为R3到达100.100.100.100的开销（FD），也为409600</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTl00K.png"></p>
<blockquote>
<p>此时不满足FC条件，则需更改开销，修改K值，更改R2的e0/0接口的延迟为3000（默认为1000），注意倍数关系</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTlfnP.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTgwut.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTgRvn.png"></p>
<blockquote>
<p>将修改延迟的接口关闭再打开</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTgjDx.png"></p>
<blockquote>
<p>此时满足FC条件，即次优路径的AD值小于最优路径的FD值，在拓扑表中存在两条路径</p>
<p>此时的FS为R3</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dT2nIS.png"></p>
<blockquote>
<p>但是此时路由表中到达100.100.100.100仍然只存在一条最优路径</p>
<p>若想让次优路径加表，则需满足：最优路径的FD*v值 &gt; 次优路径的FD才能加入到路由表</p>
<p>修改V值为6，此时满足条件，路由表中到达100.100.100.0网段存在两个下一跳</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dT26Z6.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dT27eP.png"></p>
<blockquote>
<p>查看该路由的详细信息，可知基本满足1:5的关系</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dTRdTf.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">相关命令</span><br><span class="line">R2(config)#int e0&#x2F;0</span><br><span class="line">R2(config-if)#delay n  --修改延迟，但是注意，如果输入的是n，那么延迟会改为10*n</span><br><span class="line">R2(config-if)#bandwidth n  --修改带宽，如果输入的是n，那么带宽就为n</span><br><span class="line"></span><br><span class="line">R2#show interfaces e0&#x2F;0  --看接口的详细信息，比如说带宽、延迟</span><br><span class="line">R2#show ip route 100.100.100.0 255.255.255.0  --查看该路由的详细信息</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
        <tag>路由协议</tag>
        <tag>EIGRP</tag>
      </tags>
  </entry>
  <entry>
    <title>IPv6概述</title>
    <url>/2020/09/20/IPv6%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p><strong>1、一个IPv6地址的长度是多少？</strong></p>
<p>　　IPv6地址的长度是128位</p>
<p><strong>2、怎样表示一个IPv6地址？</strong></p>
<p>　　IPv6地址可以表示为通过冒号分开的8个以十六进制表示的分段</p>
<p><strong>3、用来压缩和简化IP地址表示的两条规则是什么？</strong></p>
<ul>
<li>任何一个16位分段的前导0都可以省略</li>
<li>由全0构成的一个或多个16位分段的任何单个连续的字符串都可以表示为一个双冒号</li>
</ul>
<p><strong>4、为什么在一个IPv6地址里使用多个双冒号是不允许的？</strong></p>
<p>　　使用多个双冒号会使地址变得含混不清，这样不能准确地确定每一个含0字符串的长度</p>
<p><strong>5、IPv6地址::/0和::/128有什么不同之处？</strong></p>
<p>　　两个地址都是全0。::/0表示一个缺省地址；::/128表示一个未指定的地址</p>
<p><strong>6、在单播IPv6地址中，用来指定主机的部分是什么？它的长度是多少</strong></p>
<p>　　单播IPv6地址的主机部分是接口ID，长度通常是64位</p>
<p><strong>7、一个单播IPv6地址的子网ID部分的长度是多少？</strong></p>
<p>　　单播IPv6地址的子网ID部分的长度为16位</p>
<p><strong>8、假设一个IPv6地址的起始10位是FE80::/10，那么它是什么类型的地址？</strong></p>
<p>　　是链路本地地址</p>
<p><strong>9、<code>3FFE:204:100:90::1</code>是什么地址类型？</strong></p>
<p>　　全球单播地址，开始3位以001标识</p>
<p><strong>10、什么是任意播地址？</strong></p>
<p>　　任意播地址是表示一个服务的地址而不是表示一台设备的地址，因此它可以代表多台设备</p>
<p><strong>11、什么是多播地址？</strong></p>
<p>　　多播地址表示一组设备的地址，不是表示单台设备的地址</p>
<p><strong>12、一个IPv6报头的长度是多少？</strong></p>
<p>　　IPv6报头的长度为40字节</p>
<p><strong>13、在IPv6报头中设置流标签字段的目的是什么？</strong></p>
<p>　　流标记字段通过在报头中标记各自不同的流（具有相同的源地址与目的地址和相同的源于目的端口的数据包），允许高颗粒度的负载分担，而不用因为检查数据包的负荷而降低性能。</p>
<p><strong>14、在IPv4报头中，什么字段和IPv6的下一报头字段相对应？</strong></p>
<p>　　IPv6下一报头字段相当于IPv4中的协议号字段。命名之所以不同，是因为这个字段的值指定的可能是随后的协议报头，也可能是一个IPv6扩展报头</p>
<p><strong>15、在IPv4报头中，什么字段和IPv6的跳数限制字段相对应？</strong></p>
<p>　　跳数限制字段对应于IPv4中的生存时间（TTL）字段。命名改变是因为路由器从来没有根据传送时间来递减这个字段的值，而是在每经过一台传送的路由器时将该字段递减1，实际上就是用跳数替代了传送时间</p>
<p><strong>16、在IPv6的下一报头字段中，有哪些方面像IPv4的协议号字段？又有那些地方不同？</strong></p>
<p>　　IPv6下一报头字段和IPv4中的协议号字段一样，也是一个8位字段；如果下一报头是上层协议报头，那么它指的就是协议号。但是它也可以指定为与协议号字段不同的字段；如果下一报头是一个IPv6扩展报头，那么它指的就是报头的类型号。</p>
<p><strong>17、怎样扩展报头以便使IPv6的数据包更加富有效率？</strong></p>
<p>　　扩展报头使IPv6报头显得更具有效率，它可以专门指定专用功能，并只在这个专用功能使用的时候才包含</p>
<p><strong>18、ICMPv6中下一跳报头的值是什么？</strong></p>
<p>　　ICMPv6（对应于协议号）的下一报头值是58</p>
<p><strong>19、IPv4的分段和IPv6的分段有哪些重要的不同之处？</strong></p>
<p> 　　除了分段扩展报头外，IPv6分段与IPv4分段的重要不同是，IPv6路由器不对数据包进行分段。它会告诉始发主机要么对数据包进行分段，要么确保不发起太大的数据包</p>
<p><strong>20、用于邻居发现协议的5种ICMPv6消息是什么？</strong></p>
<p>　　NDP使用的5个ICMPv6消息是路由器请求（RS）、路由器通告（RA）、邻居请求（NS）、邻居通告（NA）和重定向</p>
<p><strong>21、在一个路由器通告消息中，M标记和O标记的用途是什么？</strong></p>
<p>　　设置M标记是告诉主机使用DHCPv6配置它的地址。O标记告诉主机使用DHCPv6去查找其他链路参数。</p>
<p><strong>22、在一个路由器通告消息中，可达时间字段的用途是什么？</strong></p>
<p>　　可达时间字段用于实现NDP协议中邻居不可达性检测。当一个节点确认它的邻居是可达的后，可达时间会指定一个时间值，在该时间内，这个节点假定它的邻居是可达的，以毫秒为单位</p>
<p><strong>23、在一个路由器通告消息中，重传计时字段的用途是什么？</strong></p>
<p>　　重传计时器字段指定了连续传送的邻居请求之间节点应该等待的时间，以毫秒为单位</p>
<p><strong>24、在一个路由器通告消息中，如果它的路由器生存时间字段被设置为0代表什么意思？</strong></p>
<p>　　表示始发路由器不应该增加到一台主机的缺省路由器列表中</p>
<p><strong>25、在一个邻居通告消息中，S标记的用途和作用是什么？</strong></p>
<p>　　设置了S标记，表示NA是用来响应某个NS的。只有在NA用来响应一个请求时，才能表示双向可达已经确认，并且在邻居缓存中将邻居地址更改为可达状态；如果收到的是清除了S位的NA，则表示它是未被请求的，并不在邻居缓存中改变它的状态</p>
<p><strong>26、有状态地址自动配置和无状态地址自动配置有什么不同？</strong></p>
<p>　　有状态地址自动配置依靠DHCPv6给主机分配地址。无状态地址自动配置使用RA确定一个比链路本地更大范围的前缀，加上MAC-to-EUI64转换来确定主机地址。</p>
<p><strong>27、MAC到EUI64转换使用哪两个步骤可以导出一个接口ID？</strong></p>
<p>　　MAC-to-EUI64转换在MAC地址中间插入一个值oxFFEE，接着反转U/L位为1，从而通过一个48位的MAC地址创建了一个64位接口ID</p>
<p><strong>28、在一台设备获取一个单播IPv6地址时，它必须执行地址冲突检测操作，但是有一个例外情况，这个例外情况是什么？</strong></p>
<p>　　对于任意播地址从来不需要执行地址冲突检测</p>
<p><strong>29、前缀<code>FF02:0:0:0:0:1:FF00::/104</code>表示什么意思？</strong></p>
<p>　　用作被请求节点的多播地址。它加在被请求的地址的最后24位之前</p>
<p><strong>30、在IPv6中，使用什么代替ARP和ARP缓存？</strong></p>
<p>　　IPv6使用NDP的邻居地址解析功能代替了ARP，同时邻居缓存也代替了ARP缓存</p>
<p><strong>31、什么是私有地址？</strong></p>
<p>　　私有地址是随机生成的接口ID，并在某些正常的周期或主机获取一个新的前缀时改变。它用来和一个自动配置的公共地址连在一起，确保主机的匿名性。公共地址用于可达性，而私有地址用于某台主机始发的所有数据包的源地址</p>
<p><strong>32、在一个邻居缓存中，Incomplete状态的条目表示什么意思？</strong></p>
<p>　　不完全状态表示该条目的邻居地址解析正在处理</p>
<p><strong>33、在一个邻居缓存中，Probe状态的条目表示什么意思？</strong></p>
<p>　　Probe状态表示已经发送了一个NS去校验某个Stale状态的条目的双向可达性，但响应的NA还没有收到</p>
<p><strong>34、邻居不可达性检测使用哪两种方法来确认一个邻居双向的可达性？</strong></p>
<p>　　邻居不可达性检测校验了一个邻居的双向可达性，要么通过来自收到发送消息的确认的上层协议的”提示”；要么通过主动探测带有NS的邻居</p>
]]></content>
      <categories>
        <category>复习题</category>
      </categories>
      <tags>
        <tag>IPv6</tag>
      </tags>
  </entry>
  <entry>
    <title>NAT和PPP的应用</title>
    <url>/2020/09/02/NAT%E5%92%8CPPP%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="1、实验目的"><a href="#1、实验目的" class="headerlink" title="1、实验目的"></a>1、实验目的</h3><p>1）理解NAT的作用<br>2）理解不同NAT的特点及配置<br>3）理解不同NAT的使用场合<br>4）掌握PPP的PAP和CHAP验证<br>5）理解辅助地址的作用<br>6）掌握NAT的验证和查看命令</p>
<a id="more"></a>
<h3 id="2、拓扑结构"><a href="#2、拓扑结构" class="headerlink" title="2、拓扑结构"></a>2、拓扑结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w9dK7d.png"></p>
<h3 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h3><p><strong>（1）公司COM1和COM2内部网段都为192.168.1.0/24，其中COM1的SRV地址为192.168.1.100/24，COM2的user地址为192.168.1.10/24，COM1内部的其他主机地址自己规划；ISP上的Web_Server地址为211.1.1.1/24，ISP与COM2之间的地址段为202.101.12.0/24，ISP与COM1之间的地址段为202.101.23.0/24，其中COM2连接ISP的接口地址为202.101.12.1/24，COM1连接ISP的接口地址为202.101.23.3/24</strong></p>
<blockquote>
<p>IP地址规划如拓扑图所示</p>
</blockquote>
<p><strong>（2）要求COM1与ISP之间的PPP链路采用CHAP验证，用户名为20164120，密码为123456</strong></p>
<ul>
<li>在ISP的s2/0封装PPP，并指定PPP的认证方式为CHAP，指定对方的IP地址为202.101.23.3</li>
<li>在全局下设置用户名和密码，用于chap验证</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w9wMKU.png"></p>
<ul>
<li>在COM1上s2/0接口封装PPP，指定IP地址为通过协商获取，填写用户名和密码，并让ISP下发默认路由</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w9wuvT.png"></p>
<ul>
<li>查看COM1上的IP地址，可知s2/0接口的IP地址为通过IPCP方式获得</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w9wm80.png"></p>
<ul>
<li>查看COM1的路由表中的静态路由条目，可知存在一条默认路由</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w9wn2V.png"></p>
<p><strong>（3）在COM1上使用静态NAT实现SRV可以访问ISP上的Web_Server，分别使用ping和debug ip nat进行验证和测试</strong></p>
<ul>
<li>在COM1上启用一个loopback接口，用于静态nat的一对一映射</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w90HTH.png"></p>
<ul>
<li>配置静态nat，将SRV的IP地址192.168.1.100映射到COM1上的loopback接口的地址</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w90qkd.png"></p>
<ul>
<li>在ISP上配置静态路由，实现ISP可以访问COM1上的loopback接口</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w90jpt.png"></p>
<ul>
<li>在COM1上配置内部接口和外部接口</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w90LtA.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w90OfI.png"></p>
<ul>
<li>此时SRV可以访问ISP上的Web_Server</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w90v1P.png"></p>
<ul>
<li>在COM1上查看nat转换表，可知将192.168.1.100转换成200.100.1.1</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w90x6f.png"></p>
<ul>
<li>由于采用静态NAT，所以此时Web_Server也可以通过200.100.1.1访问SRV</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w90zX8.png"></p>
<ul>
<li>在Web_Server上使用telnet命令远程登录到200.100.1.1，由下图可知此时登录到的设备为SRV</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/02/w9BpnS.png"></p>
<p><strong>（4）在COM1上使用复用地址池的方式实现COM1内的所有用户可以访问ISP上的Web_Server，分别使用ping和debug ip nat进行验证和测试</strong></p>
<ul>
<li>在COM1上配置地址池，范围为202.101.23.10~202.101.23.12，掩码为/24</li>
<li>配置ACL，匹配192.168.1.0/24网段的流量</li>
<li>配置复用地址池NAT</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w9siAe.png"></p>
<ul>
<li>此时各PC可以访问Web_Server</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w9s90O.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w9sC7D.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w9spnK.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w9rzX6.png"></p>
<ul>
<li>在COM1上查看nat转换表，地址在COM1上执行了地址转换</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w9sFtH.png"></p>
<ul>
<li>使用debug ip nat命令查看地址转换信息</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w9skhd.png"></p>
<p><strong>（5）在COM1和COM2上使用PAT方式实现COM1和COM2内部的用户都可以访问ISP上的Web_Server</strong></p>
<ul>
<li>由于COM1上已存在ACL 1匹配192.168.1.0/24网段的流量，所以此时可以直接在COM1上配置端口复用NAT</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w96EOP.png"></p>
<ul>
<li>测试COM1内部的用户与Web_Server的连通性</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w96Ayt.png"></p>
<ul>
<li>查看地址转换表</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w96Zef.png"></p>
<ul>
<li>在COM2上配置默认路由，下一跳指向ISP的e0/0接口的地址202.101.12.2，确保COM2可以访问Web_Server</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w96ew8.png"></p>
<ul>
<li>在COM2上使用命名的标准ACL匹配192.168.1.0/24网段的流量</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w96kQI.png"></p>
<ul>
<li>配置PAT</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w96mTS.png"></p>
<ul>
<li>指定内外部接口</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w960p9.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w96aY4.png"></p>
<ul>
<li>测试COM2内部用户与Web_Server的连通性</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w96dfJ.png"></p>
<ul>
<li>在COM2上查看nat转换表，可知内部用户192.168.1.10在访问外部网络时将地址转换成了202.101.12.1</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/w96UkF.png"></p>
<p><strong>（6）实现COM2内部的COM2_USER可以远程登录到SRV</strong></p>
<ul>
<li>在COM1上配置静态nat，将SRV的地址192.168.1.100的tcp23号端口静态映射成200.100.1.1的5656号端口</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/wC9w6J.png"></p>
<ul>
<li>在COM2_USER上使用telnet命令远程登录到SRV，此时应注意加上端口号</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/03/wC9dl4.png"></p>
]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
        <tag>NAT</tag>
        <tag>PPP</tag>
      </tags>
  </entry>
  <entry>
    <title>OSPF综合实验一</title>
    <url>/2020/11/15/OSPF%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
    <content><![CDATA[<h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><p>（1）熟悉OSPF的基本配置</p>
<p>（2）熟悉OSPF网络类型的应用</p>
<p>（3）理解不连续区域的网络环境及不连续区域对OSPF路由选择的影响</p>
<p>（4）掌握OSPF不连续区域的几种解决方案</p>
<p>（5）掌握OSPF区域间和外部路由的汇总</p>
<p>（6）掌握OSPF默认路由的配置及控制</p>
<h3 id="二、实验拓扑"><a href="#二、实验拓扑" class="headerlink" title="二、实验拓扑"></a>二、实验拓扑</h3><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DFhr80.png"></p>
<h3 id="三、实验步骤"><a href="#三、实验步骤" class="headerlink" title="三、实验步骤"></a>三、实验步骤</h3><p><strong>1、完成各路由器的基本配置，除图示地址标识外，设备间的地址自己规划，并分别在路由器R1、R2、R3、R5和R6上各起一个loopback接口，地址为各路由器的编号，如R1的loopback地址为1.1.1.1，其他以此类推</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参照R1的配置，在各路由器接口配置相应的IP地址</span></span><br><span class="line">R1(config)#int e0/0</span><br><span class="line">R1(config-if)#ip address 12.12.12.1 255.255.255.0</span><br><span class="line">R1(config-if)#no shutdown </span><br><span class="line">R1(config-if)#int e0/1</span><br><span class="line">R1(config-if)#ip address 16.16.16.1 255.255.255.0</span><br><span class="line">R1(config-if)#no shutdown</span><br><span class="line">R1(config-if)#int s1/0</span><br><span class="line">R1(config-if)#ip address 200.100.100.1 255.255.255.0</span><br><span class="line">R1(config-if)#no shutdown</span><br><span class="line"><span class="comment">//在R1、R2、R3、R5和R6上各起一个loopback接口</span></span><br><span class="line">R1(config)#int lo1</span><br><span class="line">R1(config-if)#ip address 1.1.1.1 255.255.255.0</span><br><span class="line">R2(config)#int lo1</span><br><span class="line">R2(config-if)#ip address 2.2.2.2 255.255.255.0</span><br><span class="line">R3(config)#int lo1</span><br><span class="line">R3(config-if)#ip address 3.3.3.3 255.255.255.0</span><br><span class="line">R5(config)#int lo1</span><br><span class="line">R5(config-if)#ip add 5.5.5.5 255.255.255.0</span><br><span class="line">R6(config)#int lo1</span><br><span class="line">R6(config-if)#ip address 6.6.6.6 255.255.255.0</span><br></pre></td></tr></table></figure>

<p><strong>2、除ISP区域外，全网启用OSPF，并设置各路由器的RID为各路由器的编号，根据图示将各网段划分进相应的OSPF区域中，要求在R5上采用接口级命令将R5相应的接口加入到OSPF区域中，在其他路由器上采用合适的方式启用OSPF，并在R2上进行EIGRP和OSPF的双向重分布</strong></p>
<ul>
<li>全网启用OSPF</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//R1上进行OSPF配置</span></span><br><span class="line">R1(config)#router ospf 1</span><br><span class="line">R1(config-router)#router-id 1.1.1.1</span><br><span class="line">R1(config-router)#network 12.12.12.0 0.0.0.255 area 0</span><br><span class="line">R1(config-router)#network 16.16.16.0 0.0.0.255 area 0</span><br><span class="line">R1(config-router)#network 1.1.1.0 0.0.0.255 area 0</span><br><span class="line"><span class="comment">//R2上进行OSPF配置</span></span><br><span class="line">R2(config)#router ospf 1</span><br><span class="line">R2(config-router)#router-id 2.2.2.2</span><br><span class="line">R2(config-router)#network 12.12.12.0 0.0.0.255 area 0</span><br><span class="line">R2(config-router)#network 23.23.23.0 0.0.0.255 area 0</span><br><span class="line">R2(config-router)#network 2.2.2.0 0.0.0.255 area 0</span><br><span class="line"><span class="comment">//R3上进行OSPF配置</span></span><br><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#router-id 3.3.3.3</span><br><span class="line">R3(config-router)#network 23.23.23.0 0.0.0.255 area 0</span><br><span class="line">R3(config-router)#network 34.34.34.0 0.0.0.255 area 345</span><br><span class="line">R3(config-router)#network 3.3.3.0 0.0.0.255 area 0</span><br><span class="line"><span class="comment">//R4上进行OSPF配置</span></span><br><span class="line">R4(config)#router ospf 1</span><br><span class="line">R4(config-router)#router-id 4.4.4.4</span><br><span class="line">R4(config-router)#network 34.34.34.0 0.0.0.255 area 345</span><br><span class="line">R4(config-router)#network 45.45.45.0 0.0.0.255 area 345</span><br><span class="line">R4(config-router)#network 192.168.1.0 0.0.0.255 area 345</span><br><span class="line">R4(config-router)#network 192.168.2.0 0.0.0.255 area 345</span><br><span class="line">R4(config-router)#network 192.168.3.0 0.0.0.255 area 345</span><br><span class="line">R4(config-router)#network 192.168.4.0 0.0.0.255 area 345</span><br><span class="line"><span class="comment">//R5上进行OSPF配置</span></span><br><span class="line">R5(config)#router ospf 1</span><br><span class="line">R5(config-router)#router-id 5.5.5.5</span><br><span class="line">R5(config)#int e0/1  </span><br><span class="line">R5(config-if)#ip ospf 1 area 0</span><br><span class="line">R5(config-if)#int e0/0</span><br><span class="line">R5(config-if)#ip ospf 1 area 345</span><br><span class="line">R5(config-if)#int e0/2</span><br><span class="line">R5(config-if)#ip ospf 1 area 578</span><br><span class="line">R5(config-if)#int lo1</span><br><span class="line">R5(config-if)#ip ospf 1 area 0</span><br><span class="line"><span class="comment">//R6上进行OSPF配置</span></span><br><span class="line">R6(config)#router ospf 1</span><br><span class="line">R6(config-router)#router-id 6.6.6.6</span><br><span class="line">R6(config-router)#network 16.16.16.0 0.0.0.255 area 0</span><br><span class="line">R6(config-router)#network 56.56.56.0 0.0.0.255 area 0</span><br><span class="line">R6(config-router)#network 6.6.6.0 0.0.0.255 area 0</span><br><span class="line"><span class="comment">//R7上进行OSPF配置</span></span><br><span class="line">R7(config)#router ospf 1</span><br><span class="line">R7(config-router)#router-id 7.7.7.7</span><br><span class="line">R7(config)#int range e0/0,lo1-4</span><br><span class="line">R7(config-if-range)#ip ospf 1 area 578</span><br><span class="line"><span class="comment">//R8上进行OSPF配置</span></span><br><span class="line">R8(config)#router ospf 1</span><br><span class="line">R8(config-router)#router-id 8.8.8.8</span><br><span class="line">R8(config)#int range e0/0,lo1-4</span><br><span class="line">R8(config-if-range)#ip ospf 1 area 578</span><br></pre></td></tr></table></figure>

<ul>
<li>在R9和R2上进行EIGRP的配置，并在R2上进行重分布</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R9(config)#router eigrp 110</span><br><span class="line">R9(config-router)#no auto-summary </span><br><span class="line">R9(config-router)#network 29.29.29.0 0.0.0.255</span><br><span class="line">R9(config-router)#network 172.16.1.0 0.0.0.255</span><br><span class="line">R9(config-router)#network 172.16.2.0 0.0.0.255</span><br><span class="line">R9(config-router)#network 172.16.3.0 0.0.0.255</span><br><span class="line">R9(config-router)#network 172.16.4.0 0.0.0.255</span><br><span class="line"></span><br><span class="line">R2(config)#router eigrp 110</span><br><span class="line">R2(config-router)#no auto-summary </span><br><span class="line">R2(config-router)#network 29.29.29.0 0.0.0.255</span><br><span class="line">R2(config-router)#redistribute ospf 1 metric 10000 1 1 1 1</span><br><span class="line">R2(config)#router ospf 1</span><br><span class="line">R2(config-router)#redistribute eigrp 110 subnets </span><br></pre></td></tr></table></figure>

<p><strong>3、采用合适的命令观察OSPF的邻居表、拓扑表和路由表，仔细观察路由表的各路由类型，并测试图示标注的loopback接口网段间的联通性</strong></p>
<ul>
<li>查看R1的邻居表</li>
</ul>
<blockquote>
<p>R1与R2、R6建立邻居邻接关系</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DFhfa9.png"></p>
<ul>
<li>查看R1的拓扑表</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R1#show ip ospf database </span><br><span class="line"></span><br><span class="line">            OSPF Router <span class="keyword">with</span> ID (<span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>) (Process ID <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                Router Link States (Area <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum Link count</span><br><span class="line"><span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>         <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>         <span class="number">193</span>         <span class="number">0x80000008</span> <span class="number">0x003704</span> <span class="number">3</span></span><br><span class="line"><span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">194</span>         <span class="number">0x80000008</span> <span class="number">0x009075</span> <span class="number">3</span></span><br><span class="line"><span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">208</span>         <span class="number">0x80000005</span> <span class="number">0x003D26</span> <span class="number">2</span></span><br><span class="line"><span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">930</span>         <span class="number">0x80000004</span> <span class="number">0x006220</span> <span class="number">2</span></span><br><span class="line"><span class="number">6.6</span><span class="number">.6</span><span class="number">.6</span>         <span class="number">6.6</span><span class="number">.6</span><span class="number">.6</span>         <span class="number">194</span>         <span class="number">0x80000005</span> <span class="number">0x00D31D</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">                Net Link States (Area <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum</span><br><span class="line"><span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">194</span>         <span class="number">0x80000001</span> <span class="number">0x0014EB</span></span><br><span class="line"><span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>      <span class="number">6.6</span><span class="number">.6</span><span class="number">.6</span>         <span class="number">194</span>         <span class="number">0x80000001</span> <span class="number">0x006B64</span></span><br><span class="line"><span class="number">23.23</span><span class="number">.23</span><span class="number">.2</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">344</span>         <span class="number">0x80000002</span> <span class="number">0x00E8EC</span></span><br><span class="line"><span class="number">56.56</span><span class="number">.56</span><span class="number">.5</span>      <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">931</span>         <span class="number">0x80000001</span> <span class="number">0x00C685</span></span><br><span class="line"></span><br><span class="line">                Summary Net Link States (Area <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum</span><br><span class="line"><span class="number">10.7</span><span class="number">.1</span><span class="number">.0</span>        <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">298</span>         <span class="number">0x80000001</span> <span class="number">0x007F8C</span></span><br><span class="line"><span class="number">10.7</span><span class="number">.2</span><span class="number">.0</span>        <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">298</span>         <span class="number">0x80000001</span> <span class="number">0x007496</span></span><br><span class="line"><span class="number">10.7</span><span class="number">.3</span><span class="number">.0</span>        <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">299</span>         <span class="number">0x80000001</span> <span class="number">0x0069A0</span></span><br><span class="line"><span class="number">10.7</span><span class="number">.4</span><span class="number">.0</span>        <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">299</span>         <span class="number">0x80000001</span> <span class="number">0x005EAA</span></span><br><span class="line"><span class="number">10.8</span><span class="number">.1</span><span class="number">.0</span>        <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">285</span>         <span class="number">0x80000001</span> <span class="number">0x007397</span></span><br><span class="line"><span class="number">10.8</span><span class="number">.2</span><span class="number">.0</span>        <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">286</span>         <span class="number">0x80000001</span> <span class="number">0x0068A1</span></span><br><span class="line"><span class="number">10.8</span><span class="number">.3</span><span class="number">.0</span>        <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">286</span>         <span class="number">0x80000001</span> <span class="number">0x005DAB</span></span><br><span class="line"><span class="number">10.8</span><span class="number">.4</span><span class="number">.0</span>        <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">286</span>         <span class="number">0x80000001</span> <span class="number">0x0052B5</span></span><br><span class="line"><span class="number">34.34</span><span class="number">.34</span><span class="number">.0</span>      <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">208</span>         <span class="number">0x80000002</span> <span class="number">0x00E2A6</span></span><br><span class="line"><span class="number">34.34</span><span class="number">.34</span><span class="number">.0</span>      <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">1020</span>        <span class="number">0x80000001</span> <span class="number">0x000D6B</span></span><br><span class="line"><span class="number">45.45</span><span class="number">.45</span><span class="number">.0</span>      <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1295</span>        <span class="number">0x80000001</span> <span class="number">0x00BBA3</span></span><br><span class="line"><span class="number">45.45</span><span class="number">.45</span><span class="number">.0</span>      <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">1020</span>        <span class="number">0x80000001</span> <span class="number">0x00FC9A</span></span><br><span class="line"><span class="number">57.57</span><span class="number">.57</span><span class="number">.0</span>      <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">1010</span>        <span class="number">0x80000001</span> <span class="number">0x004B28</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>     <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">316</span>         <span class="number">0x80000001</span> <span class="number">0x00FE86</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>     <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">318</span>         <span class="number">0x80000001</span> <span class="number">0x00A40F</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.0</span>     <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">316</span>         <span class="number">0x80000001</span> <span class="number">0x00F390</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.0</span>     <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">318</span>         <span class="number">0x80000001</span> <span class="number">0x009919</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.3</span><span class="number">.0</span>     <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">316</span>         <span class="number">0x80000001</span> <span class="number">0x00E89A</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.3</span><span class="number">.0</span>     <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">318</span>         <span class="number">0x80000001</span> <span class="number">0x008E23</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.4</span><span class="number">.0</span>     <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">317</span>         <span class="number">0x80000001</span> <span class="number">0x00DDA4</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.4</span><span class="number">.0</span>     <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">319</span>         <span class="number">0x80000001</span> <span class="number">0x00832D</span></span><br><span class="line"></span><br><span class="line">                Type<span class="number">-5</span> AS External Link States</span><br><span class="line">          </span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum Tag</span><br><span class="line"><span class="number">29.29</span><span class="number">.29</span><span class="number">.0</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">425</span>         <span class="number">0x80000001</span> <span class="number">0x0093AD</span> <span class="number">0</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.1</span><span class="number">.0</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">425</span>         <span class="number">0x80000001</span> <span class="number">0x001BBF</span> <span class="number">0</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.2</span><span class="number">.0</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">425</span>         <span class="number">0x80000001</span> <span class="number">0x0010C9</span> <span class="number">0</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.3</span><span class="number">.0</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">425</span>         <span class="number">0x80000001</span> <span class="number">0x0005D3</span> <span class="number">0</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.4</span><span class="number">.0</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">425</span>         <span class="number">0x80000001</span> <span class="number">0x00F9DD</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看R1的路由表中的OSPF路由</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R1#show ip route ospf</span><br><span class="line">&lt;省略部分输出&gt;</span><br><span class="line"></span><br><span class="line">      <span class="number">2.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O        <span class="number">2.2</span><span class="number">.2</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">11</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">0</span></span><br><span class="line">      <span class="number">3.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O        <span class="number">3.3</span><span class="number">.3</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">21</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">0</span></span><br><span class="line">      <span class="number">5.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O        <span class="number">5.5</span><span class="number">.5</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">21</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">      <span class="number">6.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O        <span class="number">6.6</span><span class="number">.6</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">11</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">      <span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">8</span> subnets</span><br><span class="line">O IA     <span class="number">10.7</span><span class="number">.1</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">31</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">O IA     <span class="number">10.7</span><span class="number">.2</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">31</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">O IA     <span class="number">10.7</span><span class="number">.3</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">31</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">O IA     <span class="number">10.7</span><span class="number">.4</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">31</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">O IA     <span class="number">10.8</span><span class="number">.1</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">31</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">O IA     <span class="number">10.8</span><span class="number">.2</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">31</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">O IA     <span class="number">10.8</span><span class="number">.3</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">31</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">O IA     <span class="number">10.8</span><span class="number">.4</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">31</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">      <span class="number">23.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O        <span class="number">23.23</span><span class="number">.23</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">0</span></span><br><span class="line">      <span class="number">29.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O E2     <span class="number">29.29</span><span class="number">.29</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">0</span></span><br><span class="line">      <span class="number">34.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">34.34</span><span class="number">.34</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">84</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">0</span></span><br><span class="line">      <span class="number">45.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">45.45</span><span class="number">.45</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">30</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">      <span class="number">56.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O        <span class="number">56.56</span><span class="number">.56</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">      <span class="number">57.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">57.57</span><span class="number">.57</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">30</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">      <span class="number">172.16</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">4</span> subnets</span><br><span class="line">O E2     <span class="number">172.16</span><span class="number">.1</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">0</span></span><br><span class="line">O E2     <span class="number">172.16</span><span class="number">.2</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">0</span></span><br><span class="line">O E2     <span class="number">172.16</span><span class="number">.3</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">0</span></span><br><span class="line">O E2     <span class="number">172.16</span><span class="number">.4</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">0</span></span><br><span class="line">O IA  <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> [<span class="number">110</span>/<span class="number">31</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">O IA  <span class="number">192.168</span><span class="number">.2</span><span class="number">.0</span>/<span class="number">24</span> [<span class="number">110</span>/<span class="number">31</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">O IA  <span class="number">192.168</span><span class="number">.3</span><span class="number">.0</span>/<span class="number">24</span> [<span class="number">110</span>/<span class="number">31</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br><span class="line">O IA  <span class="number">192.168</span><span class="number">.4</span><span class="number">.0</span>/<span class="number">24</span> [<span class="number">110</span>/<span class="number">31</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">06</span>:<span class="number">39</span>, Ethernet0/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>连通性测试</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF4KMT.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF4nzV.png"></p>
<p><strong>4、要求骨干区域能够快速收敛，并让R5成为区域578中的DR</strong></p>
<ul>
<li>要使骨干区域能够快速收敛，只需将链路的网络类型改为点到点，则不会进行DR/BDR的选举</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int range e0/0-1</span><br><span class="line">R1(config-if-range)#ip ospf network point-to-point </span><br><span class="line">R2(config)#int range e0/0-1</span><br><span class="line">R2(config-if-range)#ip ospf network point-to-point </span><br><span class="line">R3(config)#int e0/0</span><br><span class="line">R3(config-if)#ip ospf network point-to-point </span><br><span class="line">R5(config)#int e0/1      </span><br><span class="line">R5(config-if)#ip ospf network point-to-point </span><br><span class="line">R6(config)#int range e0/0-1</span><br><span class="line">R6(config-if-range)#ip ospf network point-to-point </span><br></pre></td></tr></table></figure>

<ul>
<li>要使R5成为区域578中的DR，则修改R5上的e0/2接口的OSPF优先级</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R5(config)#int e0/2</span><br><span class="line">R5(config-if)#ip ospf priority 10</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看R5的OSPF邻居表，此时R7为DROTHER，R8为BDR</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF4wLD.png"></p>
<p><strong>5、采用合适的方案确保当骨干网络的任意链路中断的时候不会影响骨干网的连通性</strong></p>
<ul>
<li>在R3和R5上创建虚链路</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#area 345 virtual-link 5.5.5.5</span><br><span class="line">R5(config)#router ospf 1</span><br><span class="line">R5(config-router)#area 345 virtual-link 3.3.3.3</span><br><span class="line">*Nov <span class="number">15</span> <span class="number">10</span>:<span class="number">41</span>:<span class="number">41.581</span>: %OSPF<span class="number">-5</span>-ADJCHG: Process <span class="number">1</span>, Nbr <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span> on OSPF_VL0 <span class="keyword">from</span> LOADING to FULL, Loading Done</span><br></pre></td></tr></table></figure>

<ul>
<li>查看R3的邻居表</li>
</ul>
<blockquote>
<p>可知此时R3与R5之间通过虚链路建立邻居邻接关系</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF42SP.png"></p>
<ul>
<li>尝试将R1的e0/0接口shutdown，测试连通性</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int e0/0</span><br><span class="line">R1(config-if)#shutdown </span><br></pre></td></tr></table></figure>

<blockquote>
<p>在R9上使用loopback接口 ping R8上的loopback接口</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF47Yn.png"></p>
<p><strong>6、观察各路由器上的路由表信息，然后在合适的路由器上进行必要的路由汇总，对比汇总之后各路由器路由表的变化，并观察和测试明细路由与汇总路由之间的关系</strong></p>
<ul>
<li>三类的路由在ABR上进行汇总</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在R3和R5上对三类路由进行汇总</span></span><br><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#area 345 range 192.168.0.0 255.255.248.0</span><br><span class="line">R5(config)#router ospf 1</span><br><span class="line">R5(config-router)#area 345 range 192.168.0.0 255.255.248.0</span><br><span class="line">R5(config-router)#area 578 range 10.0.0.0 255.0.0.0</span><br></pre></td></tr></table></figure>

<ul>
<li>五类的路由在ASBR上汇总</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在R2上对五类路由进行汇总</span></span><br><span class="line">R2(config)#router ospf 1</span><br><span class="line">R2(config-router)#summary-address 172.16.0.0 255.255.248.0</span><br></pre></td></tr></table></figure>

<ul>
<li>在执行汇总的路由器上都会产生指向NULL 0的路由条目</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF4zTJ.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF4vmF.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF4xw4.png"></p>
<ul>
<li>查看R1的路由表</li>
</ul>
<blockquote>
<p>此时只存在汇总后的路由</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF5AOO.png"></p>
<p><strong>7、采用合适的方案，实现图示标注的loopback网段可以访问ISP上的主机100.100.100.100</strong></p>
<ul>
<li>首先实现R1和R6可以访问ISP上的100.100.100.100</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在R1和R6上配置默认路由</span></span><br><span class="line">R1(config)#ip route 0.0.0.0 0.0.0.0 s1/0</span><br><span class="line">R6(config)#ip route 0.0.0.0 0.0.0.0 s1/0</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF5wpq.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF5ahn.png"></p>
<ul>
<li>在R1和R6上分别进行NAT的配置</li>
</ul>
<blockquote>
<p>R1上进行NAT配置</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用ACL匹配允许访问的网段</span></span><br><span class="line">R1(config)#access-list 1 permit 172.16.0.0 0.0.255.255 </span><br><span class="line">R1(config)#access-list 1 permit 192.168.0.0 0.0.255.255</span><br><span class="line">R1(config)#access-list 1 permit 10.0.0.0 0.255.255.255</span><br><span class="line"><span class="comment">//使用端口复用NAT进行地址转换</span></span><br><span class="line">R1(config)#ip nat inside source list 1 interface s1/0 overload</span><br><span class="line"><span class="comment">//指定内外部接口</span></span><br><span class="line">R1(config)#int s1/0</span><br><span class="line">R1(config-if)#ip nat outside</span><br><span class="line">R1(config)#int range e0/0-1</span><br><span class="line">R1(config-if-range)#ip nat inside</span><br></pre></td></tr></table></figure>

<blockquote>
<p>R6上进行NAT配置</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R6(config)#access-list 1 permit 172.16.0.0 0.0.255.255</span><br><span class="line">R6(config)#access-list 1 permit 192.168.0.0 0.0.255.255</span><br><span class="line">R6(config)#access-list 1 permit 10.0.0.0 0.255.255.255</span><br><span class="line">R6(config)#ip nat inside source list 1 interface s1/0 overload </span><br><span class="line">R6(config)#int s1/0</span><br><span class="line">R6(config-if)#ip nat outside</span><br><span class="line">R6(config)#int range e0/0-1</span><br><span class="line">R6(config-if-range)#ip nat inside</span><br></pre></td></tr></table></figure>

<ul>
<li>在R1和R6上进行OSPF默认路由的下发</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#router ospf 1</span><br><span class="line">R1(config-router)#default-information originate </span><br><span class="line"></span><br><span class="line">R6(config)#router ospf 1</span><br><span class="line">R6(config-router)#default-information originate </span><br></pre></td></tr></table></figure>

<ul>
<li>查看R9、R4、R7、R8上的路由表，都存在一条默认路由</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF5L4A.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF5qNd.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF5bAH.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DF57He.png"></p>
<ul>
<li>测试——在R9上 ping loopback接口地址，并在R1上查看地址转换表</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DFIF4s.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DFIiNj.png"></p>
<ul>
<li>测试——在R4上 ping loopback接口地址，并在R6上查看地址转换表</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DFImuT.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DFIZvV.png"></p>
<p><strong>8、要求各链路正常情况下，内网优选ISP1的链路对外部网络进行访问，当与ISP1相连的链路出现故障的时候，自动切换到ISP2的链路对外部网络进行访问，使用tracert观察验证该现象</strong></p>
<blockquote>
<p>默认情况下，各链路的带宽如下图所示。其中，以太网链路的默认带宽为10，串行链路的默认带宽为64。则R4、R7和R8会优选ISP2访问外部网络，R9优选ISP1访问外部网络</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DFI881.png"></p>
<blockquote>
<p>将链路的带宽进行修改后如下图所示。此时可以实现内网优选ISP1的链路对外部进行访问</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DFIGgx.png"></p>
<ul>
<li>修改各链路的带宽</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R2(config)#int e0/0</span><br><span class="line">R2(config-if)#ip ospf cost 1</span><br><span class="line">R3(config)#int e0/0</span><br><span class="line">R3(config-if)#ip ospf cost 1</span><br><span class="line">R4(config)#int s1/0</span><br><span class="line">R4(config-if)#ip ospf cost 1</span><br><span class="line">R5(config)#int e0/0</span><br><span class="line">R5(config-if)#ip ospf cost 1</span><br></pre></td></tr></table></figure>

<ul>
<li>跟踪R7访问外网所经过的路径</li>
</ul>
<blockquote>
<p>由下图可知，此时R7通过ISP1的链路对外部网络进行访问</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DFI3CR.png"></p>
<ul>
<li>此时将ISP1上的S1/0接口shutdown</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">ISP1(config)#int s1/0</span><br><span class="line">ISP1(config-if)#shutdown </span><br></pre></td></tr></table></figure>

<ul>
<li>再次跟踪R7访问外网所经过的路径</li>
</ul>
<blockquote>
<p>此时，R7通过ISP2的链路对外部网络进行访问</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DFoMsf.png"></p>
]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>OSPF</tag>
      </tags>
  </entry>
  <entry>
    <title>RIP的应用</title>
    <url>/2020/08/27/RIP%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h4 id="1、-实验目的"><a href="#1、-实验目的" class="headerlink" title="1、 实验目的"></a>1、 实验目的</h4><ol>
<li>掌握RIPv2的基本配置<br></li>
<li>理解RIPv2路由条目的结构含义<br></li>
<li>理解自动汇总的含义<br></li>
<li>理解和观察周期性更新<br></li>
<li>理解debug ip rip 命令 的作用<a id="more"></a>

</li>
</ol>
<h4 id="2、-拓扑结构"><a href="#2、-拓扑结构" class="headerlink" title="2、 拓扑结构"></a>2、 拓扑结构</h4><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/doIIiV.png"></p>
<h4 id="3、-实验步骤"><a href="#3、-实验步骤" class="headerlink" title="3、 实验步骤"></a>3、 实验步骤</h4><p><strong>（1）完成各路由器的基本配置，实现各直连设备之间可以互 ping 对方， 要求 PC1 的 IP 地址设置为 172.16.1.1/24，网关设置为172.16.1.254， PC2 的 IP 地址设置为172.16.3.1/24，网关设置为172.16.3.254，各路由器接口间的地址自己规划。</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/27/d5mDb9.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/27/d5uw79.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/27/d5NpXn.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/27/d5NkkT.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/27/d5Ne1J.png"></p>
<p><strong>（2）在三台路由器上都启用RIPv2协议，通告各自的直连网络路由，并开启自动汇总</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认开启自动汇总，会在边界处把一个网段汇总成主类</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/do543D.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/do5HHI.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/do5v8S.png"></p>
<p><strong>（3）在R1上使用show ip protocols命令，观察并理解该命令的输出信息</strong></p>
<blockquote>
<p>路由更新计时器：30s（默认）<br>路由无效时间：180s（默认）<br>抑制计时器：180s（默认）<br>路由刷新计时器：240s（默认）</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dooEdI.png"></p>
<p><strong>（4）查看各路由器的路由表，观察RIP路由条目的特征</strong></p>
<blockquote>
<p>由于没有关闭自动汇总，R1上存在172.16.0.0网段的路由，则不会再学习R2上的172.16.0.0的路由</p>
<p>同理，R2上存在172.16.0.0网段的路由，则不会学习R1上的172.16.0.0的路由</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/doowy4.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dooRSO.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/doo7kt.png"></p>
<p><strong>（5）分别在R2和PC2上测试R2与PC1以及PC2与PC1之间的连通性</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/doTJnH.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/doTtHA.png"></p>
<p><strong>（6）在R2上使用debug ip rip观察路由的发送情况</strong></p>
<blockquote>
<p>RIPv2组播地址：224.0.0.9</p>
<p>由于没有关闭自动汇总，此时发送的报文都为主类路由</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/doT09f.png"></p>
<p><strong>（7）在三台路由器上都关闭自动汇总，观察各路由表的变化，并再次测试R2与PC1以及PC2与PC1之间的连通性</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/doTrjg.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/doT43T.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/doTLU1.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/do7Z28.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/do7urQ.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/do7QVs.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/do70aR.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/do7yRK.png"></p>
<p><strong>（8）再次在R2上使用debug ip rip观察路由的发送情况，比较关闭自动汇总与开启自动汇总debug输出信息的不同</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/do7von.png"></p>
<p><strong>（9）在R2上添加一个loopback1接口，地址自定</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/doHAeJ.png"></p>
<p><strong>（10）添加必要配置，实现PC1和PC2都能够正常访问在R2上的loopback1</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTPgQH.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTPhwt.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTPTfS.png"></p>
<p><strong>（11）在R1上添加一个loopback1接口，地址自定，然后在RIP中通告，观察R2和R3是否能马上学习到R1上新增的loopback1网段</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTiwcQ.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTi7Ax.png"></p>
<blockquote>
<p>由于rip的路由表的更新时间为30s，故在R2、R3上无法马上学习到在R1上新增的loopback1网段</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTFJKJ.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTFtbR.png"></p>
<p><strong>（12）将R1上的loopback1接口关闭，观察R2和R3上是否还存在关于R1上的loopback1网段的路由条目</strong></p>
<blockquote>
<p>由于触发更新，R1上存在失效路由，则会马上发送更新给相邻的路由器，让他们将失效路由删除</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTA5uQ.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTAoHs.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTA7En.png"></p>
<p><strong>（13）使用wireshark抓取RIPv2报文，理解RIPv2报文各字段的含义</strong></p>
<blockquote>
<p>RIPv2运行在UDP的520端口上，属于应用层协议</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/28/dTAHNq.png"></p>
]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
        <tag>路由协议</tag>
        <tag>RIP</tag>
      </tags>
  </entry>
  <entry>
    <title>生成树协议</title>
    <url>/2020/09/15/STP/</url>
    <content><![CDATA[<h3 id="1、生成树协议概述"><a href="#1、生成树协议概述" class="headerlink" title="1、生成树协议概述"></a>1、生成树协议概述</h3><p>　　冗余的网络拓扑可以消除单点故障所导致的网络障碍。但从另一个角度看，冗余的网络拓扑也会带来其他的问题，如2层环路。使用STP技术可以在冗余的环境中消除潜在的2层环路问题。</p>
<h4 id="1-1、STP概述"><a href="#1-1、STP概述" class="headerlink" title="1.1、STP概述"></a>1.1、STP概述</h4><p>　　如下图所示的冗余环境中，使用STP可以阻塞环路上的某个特定的端口，保证每个网段上只存在一条活动路径。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wsRkcV.png"></p>
<p>　　在冗余的网络拓扑环境中，若未启用STP，则会导致以下问题：</p>
<ul>
<li>广播风暴——冗余网络上的每台交换机会不断地泛洪广播帧</li>
<li>多帧复制——目的站点可能会收到同一单播数据帧的多份拷贝，这可能会导致接收协议的一些问题</li>
<li>MAC数据库不稳定——当一台交换机的不同端口收到了相同的帧拷贝时，这种现象称为MAC地址漂移。MAC地址表会将帧的源MAC地址和接收到此帧的入站端口对应到一条表项中。若存在环路，同一个MAC地址可能会从多个端口上接收到，这就造成了MAC地址表的不稳定。</li>
</ul>
<p>　　STP技术可以在支持物理路径冗余的同时，消除网络环路造成的影响。通过STP的选举机制，将多余链路进行阻塞，只保留一条活跃链路用于对数据流量的处理，被阻塞掉的链路同时也作为备用链路。当去往某个网段的连通性出现了问题，STP会自动启用之前的阻塞路径，并重新建立连通性。STP所使用桥协议数据单元（BPDU）来交换STP信息，并使用BPDU确定网络拓扑信息，以及对拓扑中设备添加、删除或修改的动作做出响应。交换机默认每2s向所有端口发送一次BPDU。</p>
<h4 id="1-2、STP标准"><a href="#1-2、STP标准" class="headerlink" title="1.2、STP标准"></a>1.2、STP标准</h4><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wyKfF1.png"></p>
<h4 id="1-3、STP选举机制"><a href="#1-3、STP选举机制" class="headerlink" title="1.3、STP选举机制"></a>1.3、STP选举机制</h4><ul>
<li><p>根桥——拥有最小桥ID的交换机被选为根桥</p>
<ul>
<li>每台交换机拥有唯一的BID，包含桥优先级（默认为32768）和MAC地址</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wysAr4.png"></p>
</li>
<li><p>根端口——非根交换机上去往根桥路径最优的端口，用于接收BPDU</p>
<ul>
<li>最小根路径开销</li>
<li>最小发送者桥ID</li>
<li>最小发送者的端口ID</li>
</ul>
</li>
<li><p>指定端口——用于发送或转发配置BPDU</p>
<ul>
<li>最小根路径开销</li>
<li>最小发送者桥ID</li>
<li>最小发送者的端口ID</li>
</ul>
</li>
<li><p>非指定端口——既不转发数据帧，也不会将在该网段接收到的数据包源MAC地址填入MAC地址表中</p>
<ul>
<li>上述端口选举完后，剩下的既不是根端口也不是指定端口的端口成为非指定端口</li>
</ul>
</li>
</ul>
<h4 id="1-4、BPDU"><a href="#1-4、BPDU" class="headerlink" title="1.4、BPDU"></a>1.4、BPDU</h4><p>　　STP使用桥协议数据单元（BPDU）来交换STP信息，包括根桥的选举以及环路的识别等。默认情况下，交换机每2秒发送一次BPDU。BPDU一般分为以下两种类型：</p>
<ul>
<li>配置BPDU——用于计算STP</li>
<li>TCN BPDU——用于通告网络拓扑变化</li>
</ul>
<p>　　BPDU帧结构以及各字段含义</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wydWRg.png"></p>
<ul>
<li>协议ID：标识STP</li>
<li>版本号：标识当前的协议版本</li>
<li>消息类型：标识BPDU类型（配置BPDU或TCN BPDU）</li>
<li>标志：用来响应TCN BPDU</li>
<li>根桥ID：标识根桥的桥ID（BID）</li>
<li>根路径开销：标识发送交换机到根桥之间的路径开销</li>
<li>发送方网桥ID：标识发送交换机的BID</li>
<li>端口ID：标识发送端口</li>
<li>消息期限：标识当前BPDU的生存时间</li>
<li>最大期限：标识BPDU的最大超时时间</li>
<li>Hello时间：标识根桥生成配置BPDU的间隔时间</li>
<li>转发延迟：标识交换机端口必须等待侦听（listening）及学习（learning）状态的时间</li>
</ul>
<h4 id="1-5、STP端口状态"><a href="#1-5、STP端口状态" class="headerlink" title="1.5、STP端口状态"></a>1.5、STP端口状态</h4><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wyBfzD.png"></p>
<p><strong>Blocking（阻塞状态）</strong>：此时，二层端口为非指定端口，也不会参与数据帧的转发。该端口通过接收BPDU来判断根交换机的位置和根ID，以及在STP拓扑收敛结束之后，各交换机端口应该处于什么状态（是根端口、指定端口还是非指定端口）。在默认情况下，端口会在这种状态下停留20秒钟的时间（最大周期）</p>
<p><strong>Listening（侦听状态）</strong>：生成树此时已经根据交换机所接收到的BPDU而判断出了这个端口应该参与数据帧的转发。于是，交换机端口就不再满足于接收BPDU，而同时也开始发送其自己的BPDU，并以此通告邻接的交换机该端口会在活动拓扑中参与转发数据帧的工作。在默认情况下，端口会在这种状态下停留15秒钟的时间（转发延迟）</p>
<p><strong>Learning（学习状态）</strong>：这个二层端口准备参与数据帧的转发，并开始填写CAM表。在默认情况下，端口会在这种状态下停留15秒钟的时间（转发延迟）</p>
<p><strong>Forwarding（转发状态）</strong>：这个二层端口已经成为了活动拓扑的一个组成部分；它会转发数据帧，并同时收发BPDU</p>
<p><strong>Disabled（禁用状态）</strong>：这个二层端口不会参与生成树，也不会转发数据帧</p>
<h4 id="1-6、STP拓扑变更"><a href="#1-6、STP拓扑变更" class="headerlink" title="1.6、STP拓扑变更"></a>1.6、STP拓扑变更</h4><p>　　当交换机的某个端口变成了转发状态或阻塞状态时，意味着STP拓扑发生了变更。交换机通过向根端口发送TCN BPDU的方法来通告拓扑变更。这一BPDU不包括实际的变更内容，仅用来通知网络中其他交换机拓扑发生变更这一现象。</p>
<p>　　拓扑变更处理流程：</p>
<ul>
<li>当交换机检测到拓扑发生变更时，会沿着根桥的方向发送TCN</li>
<li>上游的交换机接收到TCN以后，首先会回复一个TCA，然后继续沿着根桥的方向发送TCN，直到最后根桥收到TCN</li>
<li>根桥收到TCN后，会回复一个拓扑变更确认（TCA）和一个设置了TC标志位的BPDU给所有的下游交换机，同时将本地的MAC地址表的老化时间从300s缩短至15s——为了实现MAC地址表刷新</li>
<li>下游的交换机收到TC置位的BPDU的时候，也会将本地的MAC地址表老化时间从300s缩短至15s，同时也会继续转发TC置位的BPDU给下游交换机——将TC置位的信息在整个交换网络中泛洪</li>
</ul>
<h4 id="1-7、PVST"><a href="#1-7、PVST" class="headerlink" title="1.7、PVST+"></a>1.7、PVST+</h4><p>　　增强的每个VLAN生成树是Cisco的一种生成树实现技术。PVST+可为网络中配置的每个VLAN提供一个单独的生成树实例。</p>
<p>　　与CST不同的是，PVST+可以为每个VLAN运行一个生成树实例，这就意味着在配置有不同VLAN的冗余链路上可以基于不同的VLAN来负载分担流量。</p>
<blockquote>
<p>拓扑结构如下所示，进行主次根的配置</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wyTFbt.png"></p>
<ul>
<li>指定SW1为VLAN 10的根桥，为VLAN 20的次根桥</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#spanning-tree vlan 10 root primary </span><br><span class="line">SW1(config)#spanning-tree vlan 20 root secondary </span><br></pre></td></tr></table></figure>

<ul>
<li>指定SW2为VLAN 10的次根桥，为VLAN 20的根桥</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW2(config)#spanning-tree vlan 10 root secondary </span><br><span class="line">SW2(config)#spanning-tree vlan 20 root primary </span><br></pre></td></tr></table></figure>

<blockquote>
<p>桥优先级默认为32768，对于SW1而言：</p>
<p>设置为root primary后，优先级降低2个4096，加上vlan-id后，优先级变成24586</p>
<p>设置为root secondary后，优先级降低1个4096，加上vlan-id后，优先级变成28692</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wyb9v4.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wyqUFx.png"></p>
<blockquote>
<p>SW2成为VLAN 20的根桥</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wyLB40.png"></p>
<ul>
<li>关于收敛时间的验证</li>
</ul>
<blockquote>
<p>将SW3的e0/0接口shutdown，观察e0/1端口过渡到forwarding状态所需时间</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SW3#debug spanning-tree events </span><br><span class="line">Spanning Tree event debugging is on</span><br><span class="line">SW3(config)#int e0/0</span><br><span class="line">SW3(config-if)#shutdown </span><br><span class="line">SW3#</span><br><span class="line">*Sep <span class="number">15</span> <span class="number">08</span>:<span class="number">37</span>:<span class="number">02.367</span>: STP: VLAN0020 <span class="keyword">new</span> root port Et0/<span class="number">1</span>, cost <span class="number">200</span>  <span class="comment">//e0/0端口被禁用，则e0/1端口成为根端口</span></span><br><span class="line">*Sep <span class="number">15</span> <span class="number">08</span>:<span class="number">37</span>:<span class="number">02.367</span>: STP: VLAN0020 Et0/<span class="number">1</span> -&gt; listening  <span class="comment">//直接进入侦听状态</span></span><br><span class="line">*Sep <span class="number">15</span> <span class="number">08</span>:<span class="number">37</span>:<span class="number">02.367</span>: STP[<span class="number">20</span>]: Generating TC trap <span class="keyword">for</span> port Ethernet0/<span class="number">0</span></span><br><span class="line">*Sep <span class="number">15</span> <span class="number">08</span>:<span class="number">37</span>:<span class="number">04.372</span>: STP: VLAN0020 sent Topology Change Notice on Et0/<span class="number">1</span>  <span class="comment">//通告拓扑变更</span></span><br><span class="line">*Sep <span class="number">15</span> <span class="number">08</span>:<span class="number">37</span>:<span class="number">17.367</span>: STP: VLAN0020 Et0/<span class="number">1</span> -&gt; learning  <span class="comment">//经过15s，进入学习状态</span></span><br><span class="line">*Sep <span class="number">15</span> <span class="number">08</span>:<span class="number">37</span>:<span class="number">32.373</span>: STP[<span class="number">20</span>]: Generating TC trap <span class="keyword">for</span> port Ethernet0/<span class="number">1</span></span><br><span class="line">*Sep <span class="number">15</span> <span class="number">08</span>:<span class="number">37</span>:<span class="number">32.373</span>: STP: VLAN0020 sent Topology Change Notice on Et0/<span class="number">1</span></span><br><span class="line">*Sep <span class="number">15</span> <span class="number">08</span>:<span class="number">37</span>:<span class="number">32.373</span>: STP: VLAN0020 Et0/<span class="number">1</span> -&gt; forwarding  <span class="comment">//经过30s，进入转发状态</span></span><br></pre></td></tr></table></figure>

<h3 id="2、快速生成树协议（RSTP）"><a href="#2、快速生成树协议（RSTP）" class="headerlink" title="2、快速生成树协议（RSTP）"></a>2、快速生成树协议（RSTP）</h3><p>　　快速生成树协议（IEEE802.1w，也称为RSTP）在网络拓扑变更时，能够显著地提升生成树重新计算的速度。RSTP会选择一台交换机作为活动生成树拓扑的根，并为交换机上的每个端口分配端口角色，所分配的角色取决于端口是否是STP活动拓扑的一部分。通过在交换机之间使用明确的握手协议，新的根端口和指定端口会立刻过渡到forwarding状态。</p>
<h4 id="2-1、RSTP端口角色"><a href="#2-1、RSTP端口角色" class="headerlink" title="2.1、RSTP端口角色"></a>2.1、RSTP端口角色</h4><p><strong>根端口（root）</strong>：根端口是每台非根网桥上选择出来与根网桥相连的端口。每台交换机上只能有一个根端口。根端口在稳定工作状态的拓扑中处于转发状态</p>
<p><strong>指定端口（designated）</strong>：在每个网段中至少会有一个交换机端口作为该网段的指定端口。在拓扑的稳定工作状态下，有指定端口的交换机会在这个网段中接收去往根网桥的数据帧。每个网段只能有一个指定端口。而这个指定端口会处于转发状态。所有与某个特定网段相连的交换机都会侦听所有的BPDU；并判断自己是否要在这个网段中充当指定交换机</p>
<p><strong>替代端口（alternate）</strong>：替代端口是用来提供去往根网桥替代路径的端口。替代端口在稳定工作状态的拓扑中处于丢弃状态。替代端口出现在非指定交换机上，并且会在当前的指定端口出现故障时过渡为指定端口。（对根端口进行备份）</p>
<p><strong>备份端口（backup）</strong>：备份端口是指定交换机上的一个额外的交换机端口，它的作用是为指定交换机提供一条备份链路。备份端口的端口ID高于指定交换机指定端口的端口ID。在稳定工作状态的拓扑中，备份端口处于丢弃状态。（存在Hub的时候才会出现，对链路进行备份）</p>
<p><strong>禁用端口（disabled）</strong>：在生成树工作的过程中，禁用端口不担当任何角色</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/w6Japd.png"></p>
<h4 id="2-2、RSTP端口状态"><a href="#2-2、RSTP端口状态" class="headerlink" title="2.2、RSTP端口状态"></a>2.2、RSTP端口状态</h4><p>　　RSTP中只存在3种端口状态，它们分别对应于端口可能的3种工作状态：丢弃状态、学习状态和转发状态。RSTP 802.1w丢弃状态代表了802.1D STP的禁用、阻塞和监听状态之和(可以节省20s时间)。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/w6YOIS.png"></p>
<h4 id="2-3、拓扑变更"><a href="#2-3、拓扑变更" class="headerlink" title="2.3、拓扑变更"></a>2.3、拓扑变更</h4><p>　　RSTP中的TC（拓扑变更）通告是一步到位的。交换机使用向所有非边缘端口发送带有TC位BPDU的方式宣告拓扑变更，这意味着每台交换机都可以直接重新计算生成树。需要借助提议/同意机制，提议该端口为某个角色，如果没问题就同意。通过这种方式，所有的邻居交换机都会得知拓扑变更，因此会各自更新自己的CAM表，无需等待根桥发送TC BPDU。这种方法会导致更多潜在的临时泛洪，不过，可以很快地将拓扑变更通知扩散到整个网络，从而实现快速收敛。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/w6wFC8.png"></p>
<h4 id="2-4、关于RSTP收敛时间的验证"><a href="#2-4、关于RSTP收敛时间的验证" class="headerlink" title="2.4、关于RSTP收敛时间的验证"></a>2.4、关于RSTP收敛时间的验证</h4><ul>
<li>如下图所示，修改STP的模式为RSTP</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/w6XgIA.png"></p>
<ul>
<li>将SW3的e0/0端口shutdown，观察e0/1端口过渡到转发状态所需时间</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SW3#debug spanning-tree events </span><br><span class="line">Spanning Tree event debugging is on</span><br><span class="line">SW3(config)#int e0/0</span><br><span class="line">SW3(config-if)#shutdown</span><br><span class="line">*Sep <span class="number">15</span> <span class="number">12</span>:<span class="number">09</span>:<span class="number">40.772</span>: RSTP(<span class="number">20</span>): updt roles, root port Et0/<span class="number">0</span> going down</span><br><span class="line">*Sep <span class="number">15</span> <span class="number">12</span>:<span class="number">09</span>:<span class="number">40.772</span>: RSTP(<span class="number">20</span>): Et0/<span class="number">1</span> is now root port  <span class="comment">//成为根端口，时间小于1s</span></span><br><span class="line">*Sep <span class="number">15</span> <span class="number">12</span>:<span class="number">09</span>:<span class="number">40.777</span>: STP[<span class="number">20</span>]: Generating TC trap <span class="keyword">for</span> port Ethernet0/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>如果该端口角色确定为RP，则直接过渡到转发状态</p>
<p>如果该端口角色确定为DP，只能是慢慢过渡</p>
</blockquote>
<h3 id="3、多生成树协议（MSTP）"><a href="#3、多生成树协议（MSTP）" class="headerlink" title="3、多生成树协议（MSTP）"></a>3、多生成树协议（MSTP）</h3><p>　　多生成树（MST）将IEEE 802.1w RSTP算法扩展到了多棵生成树中。MST的主要目的是减少网络拓扑中生成树实例的总数量，从而降低交换机的CPU开销。</p>
<p>　　优势——在实现负载均衡的同时，降低维护生成树实例的个数</p>
<p>　　实现——将多个vlan加入相同的实例中</p>
<p>　　MST注意点：</p>
<ul>
<li>name 域名，同一个实例区域中域名要保持一致</li>
<li>revision 修订号，同一个实例区域中修订号要保持一致</li>
<li>vlan的关联表，将多个vlan关联起来，放入同一个实例中</li>
</ul>
<blockquote>
<p>没有划分的vlan会自动划分进MST0中（CIST）</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/w6zvtJ.png"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#spanning-tree mode mst</span><br><span class="line">SW1(config)#spanning-tree mst configuration </span><br><span class="line">SW1(config-mst)#name jiaohuan  //设置域名称</span><br><span class="line">SW1(config-mst)#revision 10  //设置修订号</span><br><span class="line">SW1(config-mst)#instance 1 vlan 10,20,30  //划分vlan到此关联表</span><br><span class="line">SW1(config-mst)#instance 2 vlan 40,50,60</span><br><span class="line">SW1(config)#spanning-tree mst 1 root primary  //设置SW1为mst1的根桥</span><br><span class="line">SW1(config)#spanning-tree mst 2 root secondary  //设置SW1为mst2的次根桥</span><br><span class="line"></span><br><span class="line">SW2(config)#spanning-tree mode mst</span><br><span class="line">SW2(config)#spanning-tree mst configuration </span><br><span class="line">SW2(config-mst)#name jiaohuan</span><br><span class="line">SW2(config-mst)#revision 10</span><br><span class="line">SW2(config-mst)#instance 1 vlan 10,20,30</span><br><span class="line">SW2(config-mst)#instance 2 vlan 40,50,60</span><br><span class="line">SW2(config)#spanning-tree mst 1 root primary  //设置SW2为mst1的次根桥</span><br><span class="line">SW2(config)#spanning-tree mst 2 root secondary  //设置SW2为mst2的根桥</span><br><span class="line"></span><br><span class="line">SW3(config)#spanning-tree mode mst</span><br><span class="line">SW3(config)#spanning-tree mst configuration </span><br><span class="line">SW3(config-mst)#name jiaohuan</span><br><span class="line">SW3(config-mst)#revision 10</span><br><span class="line">SW3(config-mst)#instance 1 vlan 10,20,30</span><br><span class="line">SW3(config-mst)#instance 2 vlan 40,50,60</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看MST配置</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wc9vtg.png"></p>
<blockquote>
<p>查看MST摘要信息</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wcCucR.png"></p>
<blockquote>
<p>查看MST实例映射消息</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wcCBHf.png"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>STP</tag>
      </tags>
  </entry>
  <entry>
    <title>STP的运用</title>
    <url>/2020/08/31/STP%E7%9A%84%E8%BF%90%E7%94%A8/</url>
    <content><![CDATA[<h4 id="1、实验目的"><a href="#1、实验目的" class="headerlink" title="1、实验目的"></a>1、实验目的</h4><p>1）理解STP的作用<br>2）熟悉STP的工作原理<br>3）掌握STP的查看命令</p>
<a id="more"></a>

<h4 id="2、拓扑结构"><a href="#2、拓扑结构" class="headerlink" title="2、拓扑结构"></a>2、拓扑结构</h4><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djPbAe.png"></p>
<h4 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h4><p><strong>（1）在相应的交换机上创建vlan10，并将连接PC1和PC2的交换端口都划分进该vlan中</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djiiNQ.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djiVcq.png"></p>
<p><strong>（2）为主机设置合适的IP地址，IP地址自定，完成必要的配置实现主机间的通信</strong></p>
<ul>
<li>为两台PC配置IP地址（注意关闭路由功能，因为实验中的PC使用的是路由器的镜像）</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djiUHO.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djiDCd.png"></p>
<ul>
<li>将交换机之间的端口封装802.1Q，并配置成trunk</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djFmRA.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djFKMt.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djFYGj.png"></p>
<ul>
<li>测试PC的连通性</li>
</ul>
<blockquote>
<p>由于PC1和PC2属于同一vlan，所以通过上述配置即可相互ping通</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djFxw8.png"></p>
<p><strong>（3）查看各交换机的STP信息</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djksnP.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djk678.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djkgAS.png"></p>
<p><strong>（4）将SW1设置为vlan10的根桥，使用相关命令验证和查看各交换机上根桥的变化</strong></p>
<ul>
<li>设置SW1为vlan10的根桥</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djAmut.png"></p>
<ul>
<li>使用<span style="color:red">show spanning-tree</span>命令查看交换机状态</li>
</ul>
<blockquote>
<p>由于设置SW1为vlan10的根桥，由下图可知，优先级默认降低2*4096，即为24576，加上vlan-id的10，所以优先级为24586</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djZVgJ.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djZQUK.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djZGgH.png"></p>
<p><strong>（5）测试正常链路出现故障对主机通信的影响</strong></p>
<ul>
<li>将SW2的e0/1接口shutdown</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djZcKs.png"></p>
<ul>
<li>PC1仍然可以ping通PC2</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djZ2bq.png"></p>
<p><strong>（6）先断开PC1与交换机的连接，然后恢复PC1与交换机的连接，观察主机重新接入交换机要经历多久才能够进行数据转发</strong></p>
<blockquote>
<p>由下图可知，PC1重新接入交换机需要经历30s（由于关闭的是SW2上的端口，可以直接进入listening状态（无需经历20s的blocking状态），再经历15s进入learning状态，最后经历15s进入forwarding状态）</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/31/djero6.png"></p>
]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
        <tag>STP</tag>
        <tag>交换</tag>
      </tags>
  </entry>
  <entry>
    <title>SVI回顾</title>
    <url>/2020/09/11/SVI%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<p>　　SVI，即交换虚拟接口，是在多层交换机上配置的一种虚拟接口，如下图所示。管理员可以为任何交换机上配置的VLAN创建SVI接口。每个VLAN只能关联一个SVI接口。SVI并不是真实存在的物理接口，但此接口可以与路由器接口执行同样的VLAN操作功能，为所有出入其VLAN端口的数据包提供3层转发功能。</p>
<a id="more"></a>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/12/wd1VD1.png"></p>
<p>　　默认情况下，交换机会为默认VLAN（VLAN 1）创建一个SVI接口，以允许远程管理交换机。除此之外的SVI都需要管理员手动添加。当用户首次进入VLAN接口配置模式时，就会创建一个SVI。值得注意的是，此处使用的VLAN编号应与802.1Q封装Trunk链路上数据帧携带的VLAN标签，或access端口上配置的VLAN ID一致。管理员要为每个VLAN的SVI分配一个IP地址，用于对应VLAN流量的路由选择。创建SVI时，首先应确保VLAN数据库中存在该VLAN，对于数据库中的VLAN，可以通过手动配置或通过VTP进行学习。</p>
<blockquote>
<p>关于SVI的配置，应注意以下三点</p>
<ul>
<li>存在该VLAN</li>
<li>有端口放行该VLAN</li>
<li>SVI端口需要激活（no shutdown）</li>
</ul>
</blockquote>
<p>　　以下进行SVI配置，拓扑图如下所示</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/12/wdtXJP.png"></p>
<ul>
<li>为各PC配置IP地址和网关</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PC_A1(config)#int e0/0</span><br><span class="line">PC_A1(config-if)#ip address 192.168.10.1 255.255.255.0</span><br><span class="line">PC_A1(config-if)#no shutdown</span><br><span class="line">PC_A1(config)#ip default-gateway 192.168.10.254    </span><br><span class="line"></span><br><span class="line">PC_B1(config)#int e0/0</span><br><span class="line">PC_B1(config-if)#ip address 192.168.20.1 255.255.255.0</span><br><span class="line">PC_B1(config-if)#no shutdown </span><br><span class="line">PC_B1(config)#ip default-gateway 192.168.20.254  </span><br><span class="line"></span><br><span class="line">PC_A2(config)#int e0/0</span><br><span class="line">PC_A2(config-if)#ip address 192.168.10.2 255.255.255.0</span><br><span class="line">PC_A2(config-if)#no shutdown </span><br><span class="line">PC_A2(config)#ip default-gateway 192.168.10.254</span><br><span class="line"></span><br><span class="line">PC_B2(config)#int e0/0</span><br><span class="line">PC_B2(config-if)#ip address 192.168.20.2 255.255.255.0</span><br><span class="line">PC_B2(config-if)#no shutdown </span><br><span class="line">PC_B2(config)#ip default-gateway 192.168.20.254</span><br></pre></td></tr></table></figure>

<ul>
<li>在DSW1和DSW2上创建VLAN，并将连接PC的端口配置成access，划分到相应的VLAN</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#vlan 10</span><br><span class="line">DSW1(config)#vlan 20</span><br><span class="line">DSW1(config)#int e0/0</span><br><span class="line">DSW1(config-if)#switchport mode access </span><br><span class="line">DSW1(config-if)#switchport access vlan 10</span><br><span class="line">DSW1(config)#int e0/1</span><br><span class="line">DSW1(config-if)#switchport mode access </span><br><span class="line">DSW1(config-if)#switchport access vlan 20</span><br><span class="line"></span><br><span class="line">DSW2(config)#vlan 10</span><br><span class="line">DSW2(config)#vlan 20</span><br><span class="line">DSW2(config)#int e0/0</span><br><span class="line">DSW2(config-if)#switchport mode access </span><br><span class="line">DSW2(config-if)#switchport access vlan 10</span><br><span class="line">DSW2(config)#int e0/1</span><br><span class="line">DSW2(config-if)#switchport mode access </span><br><span class="line">DSW2(config-if)#switchport access vlan 20</span><br></pre></td></tr></table></figure>

<ul>
<li>在DSW1和DSW2相连的端口上配置trunk</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#int e0/2</span><br><span class="line">DSW1(config-if)#switchport trunk encapsulation dot1q </span><br><span class="line">DSW1(config-if)#switchport mode trunk </span><br><span class="line"></span><br><span class="line">DSW2(config)#int e0/2</span><br><span class="line">DSW2(config-if)#switchport trunk encapsulation dot1q </span><br><span class="line">DSW2(config-if)#switchport mode trunk </span><br></pre></td></tr></table></figure>

<ul>
<li>在DSW1和DSW2上开启路由功能（思科默认开启）</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#ip routing</span><br><span class="line"></span><br><span class="line">DSW2(config)#ip routing</span><br></pre></td></tr></table></figure>

<ul>
<li>在DSW1为VLAN 10和VLAN 20的SVI配置IP地址，作为PC的网关</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#int vlan 10</span><br><span class="line">DSW1(config-if)#ip address 192.168.10.254 255.255.255.0</span><br><span class="line">DSW1(config-if)#no shutdown </span><br><span class="line">DSW1(config)#int vlan 20</span><br><span class="line">DSW1(config-if)#ip address 192.168.20.254 255.255.255.0</span><br><span class="line">DSW1(config-if)#no shutdown </span><br></pre></td></tr></table></figure>

<ul>
<li>此时PC_A1可以ping通PC_B1</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/12/wdgxq1.png"></p>
<blockquote>
<p>PC_A1发起的流量经过DSW1上的VLAN 10的SVI，继而会被路由至VLAN 20的SVI接口，随后发送给PC_B1</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/12/wd2oyd.png"></p>
<ul>
<li>PC_A1也可以ping通PC_B2</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/12/wd2WFK.png"></p>
<hr>　　

<p>使用SVI实现VLAN间路由的优势</p>
<ul>
<li>速度远远快于单臂路由器，因为流量的路由和交换处理都是通过硬件完成的</li>
<li>无需使用交换机到路由器的外部链路进行路由</li>
<li>没有单条链路的限制。可以在交换机之间使用2层EtherChannel来增加带宽</li>
<li>因为数据的处理无需离开交换机，因此延迟更低</li>
</ul>
<p>使用SVI实现VLAN间路由的劣势</p>
<ul>
<li>需要3层交换机来执行VLAN的路由，而使用3层交换机所需成本更高</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>交换</tag>
        <tag>SVI</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP回顾</title>
    <url>/2020/09/19/TCP-IP%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<p><strong>1、TCP/IP协议簇的5个层次是什么？每一层的目的是什么？</strong></p>
<ul>
<li>物理层——包含关于物理介质的协议</li>
<li>数据链路层——包含了如何控制物理层的一些协议：介质是怎样存取和共享的，介质上的设备是怎样标识的，数据在介质上传播之前是怎样成帧的</li>
<li>IP层——包含一些将数据链路逻辑分组到一个网络以及跨网络进行通信的协议</li>
<li>主机到主机层——包含一些定义并控制中逻辑的、端到端的路径的协议</li>
<li>应用层——对应于OSI中的会话层、表示层和应用层</li>
</ul>
<p><strong>2、目前最常用的IP版本是什么？</strong></p>
<p>　　现在使用最普遍的IP版本为版本4</p>
<p><strong>3、什么是分段？IP报头的什么字段用于分段？</strong></p>
<p>　　当数据包的长度超过它所要去的那个数据链路的MTU时，路由器要将它分段。数据包中的数据将被分成小段，每一段被封装在独立的数据包中。接收端使用标识符、标记域中的MF位以及片偏移来进行重组。</p>
<p><strong>4、IP报头中的TTL字段的用途是什么？TTL过程是如何工作的？</strong></p>
<p>　　TTL用于防止数据包在IP网络中无休止地传播。该字段包含一个8位整数，这个数字由产生数据包的主机设定。数据包每经过一台路由器，TTL值将被减1。如果一台路由器将TTL减至0，它将丢弃该数据包并发送一个ICMP超时消息给数据包的源地址。</p>
<p><strong>5、什么是首个八位组字节规则？</strong></p>
<ul>
<li>A类：第一个八位组字节的第1位是0</li>
<li>B类：第一个八位组字节的前2位是10</li>
<li>C类：第一个八位组字节的前3位是110</li>
<li>D类：第一个八位组字节的前4位是1110</li>
<li>E类：第一个八位组字节的前4位是1111</li>
</ul>
<p><strong>６、怎样识别点分十进制表示的Ａ类、Ｂ类和Ｃ类地址？怎样识别二进制表示的地址？</strong></p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">第一个八位组字节 二进制范围</th>
<th align="center">第一个八位组字节 十进制范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">0000 0001~0111 1110</td>
<td align="center">1~126</td>
</tr>
<tr>
<td align="center">B</td>
<td align="center">1000 0000~1011 1111</td>
<td align="center">128~191</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">1100 0000~1101 1111</td>
<td align="center">192~223</td>
</tr>
</tbody></table>
<p><strong>7、什么是地址掩码？它是如何工作的？</strong></p>
<p>　　IP地址掩码标识了IP地址的网络部分。32位掩码中的1标识了IP地址中相应的网络位，0标识了主机位。将IP地址和掩码进行布尔与运算，结果是，IP地址中对应于掩码网络部分的那一段不变，而对应于主机部分的全变成0。</p>
<p><strong>8、什么是子网？在IP环境中为什么使用子网？</strong></p>
<p>　　子网化是对A、B、C类地址进行子分组。如果没有子网化，A、B、C类的主IP地址的网络部分将只能标识一个数据链路。子网化使用主IP地址中的一些主机位作为网络位，允许一个单独的主地址被划分为多个网络地址。</p>
<p><strong>9、为什么在有类别路由选择环境中子网位不能全部为0或1？</strong></p>
<p>　　有类别路由选择协议不能区分全0子网和主IP地址，也不能区分全1子网和主IP地址的全主机、全子网广播地址</p>
<p><strong>10、什么是ARP？</strong></p>
<p>　　ARP（地址解析协议）的作用是将数据链路上接口的IP地址映射到相应的MAC地址</p>
<p><strong>11、什么是代理ARP？</strong></p>
<p>　　代理ARP是IP路由器的功能之一。如果路由器收到一个ARP请求，并且：目标网络或子网在路由器的路由表中；路由表指出目标可以通过某一个接口可达，该接口不同于接受到ARP请求的那个接口，则路由器将用自己的MAC地址对该ARP请求进行回应。</p>
<p><strong>12、什么是重定向？</strong></p>
<p>　　重定向是IP路由器的功能之一。如果一台设备发送一个数据包给路由器，该路由器必须将数据包转发至同一数据链路上的下一跳路由器，那么该路由器将向原设备发送一条其可以直接到达下一跳路由器的重定向消息。</p>
<p><strong>13、TCP和UDP的本质区别是什么？</strong></p>
<p>　　TCP在无连接的IP层之上提供了面向连接的服务。UDP则提供了无连接的服务。</p>
<p><strong>14、TCP提供面向连接服务的机制是什么？</strong></p>
<p>　　序列号确保了准确的排序；校验、确认、计时器以及重传机制确保了可靠性；滑动窗口机制确保了流量控制</p>
<p><strong>15、为了替代ARP，Novell NetWare用设备的MAC地址作为网络地址中的主机部分。为什么IP不能这样做？</strong></p>
<p>　　MAC地址是固定长度的二进制整数。如果用MAC地址作为IP地址的主机部分，那么子网化将不能实现。因为不可能灵活地使用一些主机位作为网络位</p>
<p><strong>16、UDP通过在无连接服务之上提供无连接服务的目的是什么？</strong></p>
<p>　　UDP报头的唯一目的是增加源端口及目的端口号</p>
]]></content>
      <categories>
        <category>复习题</category>
      </categories>
      <tags>
        <tag>TCP</tag>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title>单区域OSPF的实现</title>
    <url>/2020/08/29/%E5%8D%95%E5%8C%BA%E5%9F%9FOSPF%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="1、实验目的"><a href="#1、实验目的" class="headerlink" title="1、实验目的"></a>1、实验目的</h4><p>1）掌握OSPF的基本配置<br>2）掌握OSPF的邻居表、拓扑表及路由表的含义<br>3）掌握OSPF的DR和BDR的作用<br>4）掌握OSPF的DR和BDR的选举<br>5）查看和调试OSPF路由协议的相关信息<br>6）熟悉OSPF中hello报文的作用和格式</p>
<a id="more"></a>
<h4 id="2、拓扑结构"><a href="#2、拓扑结构" class="headerlink" title="2、拓扑结构"></a>2、拓扑结构</h4><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHg68e.png" alt="拓扑图"></p>
<h4 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h4><p><strong>（1）完成各路由器的基本配置，实现各直连设备之间可以互ping对方，主机和路由器接口的地址自己规划</strong></p>
<ul>
<li>各接口地址如拓扑图标记所示进行配置</li>
</ul>
<p><strong>（2）全网启用OSPF，并划分如区域0</strong></p>
<blockquote>
<p>距离矢量为通告</p>
<p>链路状态为使能</p>
<p>network表示的是划分一个范围，路由器上属于此范围的对应接口加入OSPF的相应进程的相应区域</p>
<p>如network 192.168.12.0 0.0.0.255 area 0 表示的是划分一个范围为192.168.12.0，看此路由器上的哪个接口在这个范围内，则这个接口就会被加入OSPF的区域0中</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dH2hQJ.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dH2Tdx.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dH2qJO.png"></p>
<p><strong>（3）观察各路由器的邻居表、拓扑表及路由表，观察哪些链路上有进行DR/BDR的选举，并测试主机之间的连通性</strong></p>
<blockquote>
<p>优先级用于选举DR/BDR——以太网链路存在DR/BDR的选举，串行链路则没有</p>
<p>选举规则：</p>
<ul>
<li><p>先比较优先级，优先级大的优先；默认情况下以太网接口的优先级都为1，串行链路的接口优先级都为0（优先级为0不能参与DR/BDR的选举）</p>
</li>
<li><p>如果优先级都一样，继续比较RID，RID大的优先</p>
</li>
<li><p>DR的选举是非抢占的</p>
</li>
</ul>
</blockquote>
<blockquote>
<p>Hello报文</p>
<p>作用：用来发现、建立、维持邻居之间的关系</p>
<p>每隔10s往224.0.0.5发送Hello报文，如果在40之后没有收到来自邻居的Hello，则认为该邻居挂了，就切断和该邻居之间的关系（死亡时间通常在30-39之间）</p>
</blockquote>
<blockquote>
<p>-————————————————————————————————————————–</p>
<p>Neighbor ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pri &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;State &nbsp;&nbsp;&nbsp;Dead Time &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Address    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Interface</p>
<p>&nbsp;&nbsp;&nbsp;邻居的ID &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;优先级 &nbsp;&nbsp;状态 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;死亡时间 &nbsp;&nbsp;&nbsp;&nbsp;邻居的IP地址 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自己用于建立邻居的接口</p>
<p>-————————————————————————————————————————–</p>
</blockquote>
<ul>
<li>邻居表</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHWXqA.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHWxat.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHWzIP.png"></p>
<ul>
<li>拓扑表</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHfVZn.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHfeI0.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHfuGT.png"></p>
<ul>
<li>路由表</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHfydI.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHfgFP.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHffSS.png"></p>
<ul>
<li>连通性测试</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHhpwR.png"></p>
<p><strong>（4）指定R2的RID为20.20.20.20，R3的RID为30.30.30.30，使用相关命令观察和验证各路由器RID的变化</strong></p>
<blockquote>
<p>【RID的选举】</p>
<ul>
<li><p>手工指定：最优先</p>
<p>R2(config)#router ospf 1</p>
<p>R2(config-router)#router-id 20.20.20.20    –手动指定RID</p>
<p>Reload or use “clear ip ospf process” command, for this to take effect</p>
<p>R2#clear ip ospf process    –重置OSPF的进程 </p>
<p>Reset ALL OSPF processes? [no]: y</p>
</li>
<li><p>自动选择：在没有手工指定情况下，优先选择回环口中IP地址最大的；若没有回环口，选择物理接口（双UP）中IP地址最大。</p>
</li>
</ul>
</blockquote>
<ul>
<li>查看当前R2和R3的RID，由于没有手工指定，也没有存在回环口，则选择物理接口中IP地址最大的作为RID</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHhI1O.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHhTje.png"></p>
<ul>
<li>指定R2和R3路由器的RID</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dH4PBj.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dH4kEn.png"></p>
<ul>
<li>再次查看R2和R3的RID</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dH4ANq.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dH4E40.png"></p>
<p><strong>（5）实现R2为以太网链路网段上的DR</strong></p>
<ul>
<li>由于R1和R2的优先级默认都为1，并且R2的RID为20.20.20.20，而R1的RID为192.168.12.1，此时需要修改R2的e0/0接口的优先级，使之成为以太网链路上的DR。此处指定R2上e0/0接口的优先级为2即可</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dH4zI1.png"></p>
<ul>
<li>由于DR、BDR的选举为非抢占，此时应重置OSPF进程</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHIpwj.png"></p>
<ul>
<li>查看R1和R2的邻居表，可知此时R2成为以太网链路上的DR</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHIFf0.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dHIApV.png"></p>
<p><strong>（6）分别在R2和R3的路由器上添加172.16.2.0/24和172.16.3.0/24的网段，添加必要配置实现这两个网络之间的连通性</strong></p>
<ul>
<li>由于R3上已存在172.16.3.0/24网段，此时在R2上添加一个回环口（地址为172.16.2.2/24）用作测试</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#interface loopback 1</span><br><span class="line">R2(config-if)#ip address 172.16.2.2 255.255.255.0</span><br><span class="line">R2(config-if)#ip ospf 1 area 0  --把该接口加入到OSPF进程1区域0中</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dHIqHJ.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dHIXNR.png"></p>
<p><strong>（7）开启debug信息，观察OSPF在以太网链路之间信息交互的过程</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dHIx9x.png"></p>
<p><strong>（8）开启debug信息，观察OSPF在串行链路之间信息交互的过程，比较以太网链路和串行链路上OSPF的debug信息输出的区别</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dHoPDe.png"></p>
<blockquote>
<p>最主要区别在于以太网链路会进行DR/BDR的选举；串行链路则没有进行DR/BDR的选举</p>
<p>以太网链路中，路由信息会先被发送到组播地址224.0.0.6，即被DR/BDR所接收，再由DR将此信息发送到组播地址224.0.0.5</p>
</blockquote>
<p><strong>（9）使用wireshark抓取OSPF的hello报文，理解hello报文各字段的含义</strong></p>
<blockquote>
<p>hello报文用于邻居的发现，建立和维持</p>
<p>hello报文中的相关信息包括：</p>
<ul>
<li>Network Mask：发送hello报文的接口所在网络的掩码</li>
<li>Hello Interval（默认为10s）：发送hello报文的时间间隔</li>
<li>Options：可选项<ul>
<li>E：允许Flood AS-External-LSAs</li>
<li>MC：转发IP组播报文</li>
<li>N/P：处理Type-7 LSAs</li>
<li>DC：处理按需链路</li>
</ul>
</li>
<li>Router Priority：优先级，默认为1，如果设置为0，则不参与DR或BDR的选举</li>
<li>Router Dead Interval（默认40s）：失效时间，如果在此时间内未收到邻居发送的hello报文，则认为邻居失效</li>
<li>Designated Router：DR的接口地址</li>
<li>Backup Designated Router：BDR的接口地址</li>
<li>Active Neighbor：活跃的邻居，以RID标识</li>
</ul>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dHoE4I.png"></p>
]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
        <tag>路由协议</tag>
        <tag>OSPF</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hello World</category>
      </categories>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
  <entry>
    <title>关于交换的基础测试</title>
    <url>/2020/09/14/%E5%85%B3%E4%BA%8E%E4%BA%A4%E6%8D%A2%E7%9A%84%E5%9F%BA%E7%A1%80%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h3 id="1、实验目的"><a href="#1、实验目的" class="headerlink" title="1、实验目的"></a>1、实验目的</h3><p>1）掌握VLAN、TRUNK、VTP的作用和配置<br>2）掌握DTP的作用和配置<br>3）掌握DHCP及DHCP中继的作用和配置<br>4）掌握以太网通道技术的作用和配置</p>
<a id="more"></a>

<h3 id="2、拓扑结构"><a href="#2、拓扑结构" class="headerlink" title="2、拓扑结构"></a>2、拓扑结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/14/wseseI.png"></p>
<h3 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h3><p><strong>（1）在该园区网络中有4个VLAN，分别为VLAN10、VLAN20、VLAN30和VLAN40，其中DHCP_SRV和PC1在VLAN10中，PC2、PC3分别在VLAN20、VLAN30和VLAN30中，FTP_SRV和PC4在VLAN40中，其中VLAN10的地址段为192.168.10.0/24，VLAN20的地址段为192.168.20.0/24，VLAN30的地址段为192.168.30.0/24，VLAN40的地址段为192.168.40.0/24，各VLAN主机的网关都设置为其网段中可用的最后一个主机地址，并且设置DHCP服务器的IP地址为192.168.10.100/24，其他主机通过DHCP方式获取IP地址、园区网络外部的地址自己规划</strong></p>
<ul>
<li>在SW1和SW2上创建VLAN，并将端口划分进相应的VLAN</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#vlan 10,20</span><br><span class="line">SW1(config)#int range e0/0,e0/2</span><br><span class="line">SW1(config-if-range)#switchport mode access </span><br><span class="line">SW1(config-if-range)#switchport access vlan 10</span><br><span class="line">SW1(config)#int e0/1</span><br><span class="line">SW1(config-if)#switchport mode access </span><br><span class="line">SW1(config-if)#switchport access vlan 20</span><br><span class="line"></span><br><span class="line">SW2(config)#vlan 30,40</span><br><span class="line">SW2(config)#int e0/0      </span><br><span class="line">SW2(config-if)#switchport mode access </span><br><span class="line">SW2(config-if)#switchport access vlan 30</span><br><span class="line">SW2(config)#int range e0/1-2</span><br><span class="line">SW2(config-if-range)#switchport mode access </span><br><span class="line">SW2(config-if-range)#switchport access vlan 40</span><br></pre></td></tr></table></figure>

<ul>
<li>配置IP地址</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DHCP_SRV(config)#int e0/0</span><br><span class="line">DHCP_SRV(config-if)#ip address 192.168.10.100 255.255.255.0</span><br><span class="line">DHCP_SRV(config-if)#no shutdown </span><br><span class="line"></span><br><span class="line">R1(config)#int e0/0</span><br><span class="line">R1(config-if)#ip address 10.10.10.1 255.255.255.0</span><br><span class="line">R1(config-if)#no shutdown </span><br><span class="line">R1(config)#int s1/0</span><br><span class="line">R1(config-if)#ip address 202.101.100.1 255.255.255.0</span><br><span class="line">R1(config-if)#no shutdown </span><br><span class="line"></span><br><span class="line">ISP(config)#int s1/0</span><br><span class="line">ISP(config-if)#ip address 202.101.100.2 255.255.255.0</span><br><span class="line">ISP(config-if)#no shutdown </span><br><span class="line">ISP(config)#int e0/0</span><br><span class="line">ISP(config-if)#ip address 200.100.100.1 255.255.255.0</span><br><span class="line">ISP(config-if)#no shutdown</span><br><span class="line"></span><br><span class="line">Web_SRV(config)#int e0/0</span><br><span class="line">Web_SRV(config-if)#ip address 200.100.100.2 255.255.255.0</span><br><span class="line">Web_SRV(config-if)#no shutdown </span><br><span class="line"></span><br><span class="line">SW1(config)#int e0/3 </span><br><span class="line">SW1(config-if)#ip address 10.10.10.2 255.255.255.0</span><br><span class="line">SW1(config-if)#no shutdown </span><br><span class="line">SW1(config)#int vlan 10</span><br><span class="line">SW1(config-if)#ip address 192.168.10.254 255.255.255.0 </span><br><span class="line">SW1(config-if)#no shutdown </span><br><span class="line">SW1(config)#int vlan 20</span><br><span class="line">SW1(config-if)#ip address 192.168.20.254 255.255.255.0</span><br><span class="line">SW1(config-if)#no shutdown </span><br><span class="line">SW1(config)#int vlan 30</span><br><span class="line">SW1(config-if)#ip address 192.168.30.254 255.255.255.0</span><br><span class="line">SW1(config-if)#no shutdown</span><br><span class="line">SW1(config)#int vlan 40</span><br><span class="line">SW1(config-if)#ip address 192.168.40.254 255.255.255.0</span><br><span class="line">SW1(config-if)#no shutdown </span><br></pre></td></tr></table></figure>

<p><strong>（2）采用合适的方式完成交换机链路间的TRUNK配置，并采用标准的封装模式</strong></p>
<blockquote>
<p>在SW1和SW2之间的链路封装802.1Q，并关闭DTP协商，更改native vlan为999</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#int range e1/0-1</span><br><span class="line">SW1(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">SW1(config-if-range)#switchport mode trunk </span><br><span class="line">SW1(config-if-range)#switchport nonegotiate</span><br><span class="line">SW1(config-if-range)#switchport trunk native vlan 999</span><br><span class="line"></span><br><span class="line">SW2(config)#int range e1/0-1</span><br><span class="line">SW2(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">SW2(config-if-range)#switchport mode trunk </span><br><span class="line">SW2(config-if-range)#switchport nonegotiate </span><br><span class="line">SW2(config-if-range)#switchport trunk native vlan 999</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/14/ws1dsS.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/14/ws1aM8.png"></p>
<p><strong>（3）设置SW1的VTP模式为Server，SW2的VTP模式为Client，并且设置VTP域名为shain，密码为CCIEPASS，实现该园区网络的VLAN信息同步</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#vtp domain shain</span><br><span class="line">SW1(config)#vtp password CCIEPASS</span><br><span class="line">SW1(config)#vtp mode server </span><br><span class="line"></span><br><span class="line">SW2(config)#vtp password CCIEPASS</span><br><span class="line">SW2(config)#vtp mode client </span><br></pre></td></tr></table></figure>

<ul>
<li>在SW1和SW2上查看VTP的状态信息</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/ws1XLD.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/ws1OsO.png"></p>
<ul>
<li>此时SW2通过VTP方式学习到SW1上的VLAN</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/ws3iSP.png"></p>
<p><strong>（4）使用802.3ad标准构建两交换机间的以太通道链路，要求交换机将EtherChannel的负载均衡设置为src-dst-ip</strong></p>
<ul>
<li>使用LACP进行交换机之间的链路捆绑</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SW1(config)#int range e1/0-1</span><br><span class="line">SW1(config-if-range)#channel-group 1 mode active </span><br><span class="line">Creating a port-channel interface Port-channel <span class="number">1</span></span><br><span class="line"></span><br><span class="line">SW2(config)#int range e1/0-1</span><br><span class="line">SW2(config-if-range)#channel-group 1 mode active </span><br><span class="line">Creating a port-channel interface Port-channel <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看EtherChannel摘要信息，捆绑成功</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/ws8974.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/ws8PAJ.png"></p>
<ul>
<li>将EtherChannel的负载均衡方式设置为src-dst-ip（默认的负载均衡方式即为src-dst-ip）</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#port-channel load-balance src-dst-ip</span><br><span class="line">SW2(config)#port-channel load-balance src-dst-ip</span><br></pre></td></tr></table></figure>

<ul>
<li>在SW1上查看EtherChannel的负载均衡方式</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wsGZPs.png"></p>
<p><strong>（5）根据需求在DHCP_SRV上建立相应的地址池，并且在各个地址池中排除范围从10到20之间的IP地址空间，同时要求无论FTP_SRV何时接入交换网络都会获取到192.168.40.100/24的地址，完成必要的配置，实现各主机和FTP_SRV可以获取相应的IP地址</strong></p>
<ul>
<li>在DHCP_SRV上创建地址池并按要求排除IP地址空间</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建地址池</span></span><br><span class="line">DHCP_SRV(config)#ip dhcp pool vlan_10</span><br><span class="line">DHCP_SRV(dhcp-config)#network 192.168.10.0 255.255.255.0</span><br><span class="line">DHCP_SRV(dhcp-config)#default-router 192.168.10.254</span><br><span class="line">DHCP_SRV(dhcp-config)#dns-server 8.8.8.8</span><br><span class="line">DHCP_SRV(config)#ip dhcp pool vlan_20</span><br><span class="line">DHCP_SRV(dhcp-config)#network 192.168.20.0 255.255.255.0</span><br><span class="line">DHCP_SRV(dhcp-config)#default-router 192.168.20.254</span><br><span class="line">DHCP_SRV(dhcp-config)#dns-server 8.8.8.8</span><br><span class="line">DHCP_SRV(config)#ip dhcp pool vlan_30</span><br><span class="line">DHCP_SRV(dhcp-config)#network 192.168.30.0 255.255.255.0</span><br><span class="line">DHCP_SRV(dhcp-config)#default-router 192.168.30.254</span><br><span class="line">DHCP_SRV(dhcp-config)#dns-server 8.8.8.8</span><br><span class="line">DHCP_SRV(config)#ip dhcp pool vlan_40</span><br><span class="line">DHCP_SRV(dhcp-config)#network 192.168.40.0 255.255.255.0</span><br><span class="line">DHCP_SRV(dhcp-config)#default-router 192.168.40.254</span><br><span class="line">DHCP_SRV(dhcp-config)#dns-server 8.8.8.8</span><br><span class="line"><span class="comment">//排除要求的IP地址，并将已使用的IP地址也排除掉</span></span><br><span class="line">DHCP_SRV(config)#ip dhcp excluded-address 192.168.10.10 192.168.10.20</span><br><span class="line">DHCP_SRV(config)#ip dhcp excluded-address 192.168.20.10 192.168.20.20</span><br><span class="line">DHCP_SRV(config)#ip dhcp excluded-address 192.168.30.10 192.168.30.20</span><br><span class="line">DHCP_SRV(config)#ip dhcp excluded-address 192.168.40.10 192.168.40.20</span><br><span class="line">DHCP_SRV(config)#ip dhcp excluded-address 192.168.10.100</span><br><span class="line">DHCP_SRV(config)#ip dhcp excluded-address 192.168.10.254             </span><br><span class="line">DHCP_SRV(config)#ip dhcp excluded-address 192.168.20.254</span><br><span class="line">DHCP_SRV(config)#ip dhcp excluded-address 192.168.30.254</span><br><span class="line">DHCP_SRV(config)#ip dhcp excluded-address 192.168.40.254</span><br><span class="line">DHCP_SRV(config)#ip dhcp excluded-address 192.168.40.100</span><br></pre></td></tr></table></figure>

<ul>
<li>在DHCP_SRC和SW1上启用OSPF协议</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DHCP_SRV(config)#router ospf 1</span><br><span class="line">DHCP_SRV(config-router)#router-id 3.3.3.3</span><br><span class="line">DHCP_SRV(config-router)#network 192.168.10.0 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">SW1(config)#router ospf 1</span><br><span class="line">SW1(config-router)#router-id 1.1.1.1</span><br><span class="line">SW1(config-router)#network 192.168.10.0 0.0.0.255 area 0</span><br><span class="line">SW1(config-router)#network 192.168.20.0 0.0.0.255 area 0</span><br><span class="line">SW1(config-router)#network 192.168.30.0 0.0.0.255 area 0</span><br><span class="line">SW1(config-router)#network 192.168.40.0 0.0.0.255 area 0</span><br></pre></td></tr></table></figure>

<ul>
<li>在SW1的各VLAN的SVI接口中配置中继地址</li>
</ul>
<blockquote>
<p>由于DHCP_SRV在VLAN10中，所以无需在VLAN10的SVI端口配置中继地址</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#int vlan 20</span><br><span class="line">SW1(config-if)#ip helper-address 192.168.10.100</span><br><span class="line">SW1(config)#int vlan 30</span><br><span class="line">SW1(config-if)#ip helper-address 192.168.10.100</span><br><span class="line">SW1(config)#int vlan 40</span><br><span class="line">SW1(config-if)#ip helper-address 192.168.10.100</span><br></pre></td></tr></table></figure>

<ul>
<li>各主机自动获取IP地址</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wsJB60.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wsJDXV.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wsJ0lq.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wsJwpn.png"></p>
<ul>
<li>让FTP_SRV自动获取地址</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">FTP_SRV(config)#int e0/0</span><br><span class="line">FTP_SRV(config-if)#no shutdown </span><br><span class="line">FTP_SRV(config-if)#ip address dhcp</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如下图所示，此时通过DHCP方式获取到的IP地址为192.168.40.2，并不符合要求的192.168.40.100</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wsYVcq.png"></p>
<ul>
<li>查看DHCP_SRV的DHCP绑定表，可以得到FTP_SRV的电路ID</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wsYdED.png"></p>
<ul>
<li>在DHCP_SRV上清空FTP_SRV的地址绑定信息</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DHCP_SRV#clear ip dhcp binding 192.168.40.2</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wsY2b8.png"></p>
<ul>
<li>在DHCP_SRV上创建FTP_SRV专用的地址池，与FTP_SRV的电路ID进行绑定</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DHCP_SRV(config)#ip dhcp pool FTP_SRV</span><br><span class="line">DHCP_SRV(dhcp-config)#host 192.168.40.100 255.255.255.0</span><br><span class="line">DHCP_SRV(dhcp-config)#default-router 192.168.40.254</span><br><span class="line">DHCP_SRV(dhcp-config)#client-identifier 0063.6973.636f.2d61.6162.622e.6363.3030.2e35.3030.302d.4574.302f.30</span><br></pre></td></tr></table></figure>

<ul>
<li>在FTP_SRV上使用DHCP方式获取IP地址，此时获取到的IP地址为192.168.40.100，符合要求</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wstZPH.png"></p>
<p><strong>（6）完成必要配置，实现各主机可以访问ISP上的Web_SRV</strong></p>
<ul>
<li>在R1和SW1上运行OSPF协议，实现内网的可达性</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#router ospf 1</span><br><span class="line">R1(config-router)#router-id 2.2.2.2</span><br><span class="line">R1(config-router)#network 10.10.10.0 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">SW1(config)#router ospf 1</span><br><span class="line">SW1(config-router)#network 10.10.10.0 0.0.0.255 area 0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时PC3可以访问R1</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wstJiQ.png"></p>
<ul>
<li>在R1上配置默认路由，指定出接口为s1/0，并在OSPF进程下发默认路由</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#ip route 0.0.0.0 0.0.0.0 s1/0</span><br><span class="line">R1(config)#router ospf 1</span><br><span class="line">R1(config-router)#default-information originate </span><br></pre></td></tr></table></figure>

<ul>
<li>指定Web_SRV的网关为ISP的e0/0接口的地址200.100.100.1</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Web_SRV(config)#ip default-gateway 200.100.100.1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时实现了R1可以访问Web_SRV</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wst4eK.png"></p>
<ul>
<li>在R1上配置PAT，实现内网主机可以访问Web_SRV</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#access-list 1 permit 192.168.0.0 /16  //ACL用于匹配内网主机</span><br><span class="line">R1(config)#ip nat inside source list 1 interface s1/0 overload </span><br><span class="line">R1(config)#int e0/0</span><br><span class="line">R1(config-if)#ip nat inside </span><br><span class="line">R1(config)#int s1/0</span><br><span class="line">R1(config-if)#ip nat outside </span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wst7JH.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wstHWd.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wstIoD.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wstTFe.png"></p>
<ul>
<li>在R1上查看地址转换表，可知在R1上进行了地址转换</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/15/wstvef.png"></p>
]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>DHCP</tag>
        <tag>VTP</tag>
        <tag>EtherChannel</tag>
      </tags>
  </entry>
  <entry>
    <title>单臂路由运用</title>
    <url>/2020/08/30/%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1%E8%BF%90%E7%94%A8/</url>
    <content><![CDATA[<h4 id="1、实验目的"><a href="#1、实验目的" class="headerlink" title="1、实验目的"></a>1、实验目的</h4><p>1）掌握交换机上VLAN的创建和划分<br>2）掌握trunk的作用<br>3）掌握VTP的作用与配置<br>4）掌握单臂路由原理与配置<br>5）理解trunk链路上的802.1Q标记的作用</p>
<a id="more"></a>
<h4 id="2、拓扑结构"><a href="#2、拓扑结构" class="headerlink" title="2、拓扑结构"></a>2、拓扑结构</h4><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqOjXR.png"></p>
<h4 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h4><p><strong>（1）在SW1上创建两个vlan，vlan10和vlan20，并将vlan10命名为sales，将vlan20命名为engineers</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqXEjA.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqXeBt.png"></p>
<p><strong>（2）完成必要的配置，实现两交换机的vlan数据库同步，并使用相关命令验证和查看vlan数据库的信息</strong></p>
<blockquote>
<p>要实现两交换机的vlan数据库同步，需要进行vtp的配置</p>
</blockquote>
<ul>
<li>将两交换机相连的端口设置为trunk</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqXJun.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqj8PO.png"></p>
<ul>
<li>指定vtp的域和密码，并指定SW1的vtp模式为server，SW2的vtp模式为client</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqjyRg.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqvFOA.png"></p>
<ul>
<li>在SW2上查看vlna信息，此前并未在SW2上创建vlan，由此可知两交换机之间实现了vlan数据库的同步</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqv6k6.png"></p>
<ul>
<li>尝试在SW2上创建一个vlan，日志提示在vtp的模式为client的条件下不允许创建vlan</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqvRpD.png"></p>
<ul>
<li>在SW1上查看vtp的状态信息，从下图可知SW1的vtp模式为server（默认），已存在的vlan数量为7，修订版本号为8</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqx9A0.png"></p>
<p><strong>（3）将连接PC1和PC3的交换端口划分进vlan10，将连接PC2的交换端口划分进vlan20中，并为各PC配置合适的IP地址和网关</strong></p>
<ul>
<li>依题意将交换机上的端口划分进对应的vlan</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqxYDA.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqxUEt.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqxd4f.png"></p>
<ul>
<li>由于各PC为使用路由器镜像模拟，需在PC上关闭路由功能。按下图所示为各PC配置IP地址和网关</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqxIv4.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqxHbR.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqxLUx.png"></p>
<p><strong>（4）使用show vlan brief查看各交换机的vlan信息</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqzFat.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqzEPf.png"></p>
<p><strong>（5）测试各主机之间的连通性</strong></p>
<blockquote>
<p>PC1和PC3之间可以相互ping通（两PC属于同一vlan，无需经过三层设备）</p>
<p>PC1和PC2之间无法通信（两PC属于不同vlan，需要经过三层设备，此时还未在路由器上进行相应的配置）</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqzlaq.png"></p>
<p><strong>（6）在交换机和路由器上完成必要的配置，实现各主机间可以互相通信</strong></p>
<ul>
<li>将SW1上连路由器的端口配置成trunk</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqzTW8.png">、</p>
<ul>
<li><p>在R1上进行单臂路由的配置</p>
<blockquote>
<p>单臂路由是指在路由器的一个接口上通过配置子接口(或”逻辑接口”，并不真实存在)的方式，实现原来相互隔离的不同vlan之间的互联互通</p>
<p>值得注意的是这些逻辑子接口不能被单独的开启或关闭，即当物理接口被开启或关闭时，所有的该物理接口的子接口也将对应的被开启或关闭</p>
<p>由于单臂路由存在瓶颈和单点故障的问题，因此必须限制主机/vlan的数量。此时可以通过SVI实现不同vlan间的通信（后续会进行介绍）</p>
</blockquote>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqzHSS.png"></p>
<ul>
<li>测试各主机之间的连通性，如下图所示，三台PC之间可以互相ping通</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqzbQg.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/30/dqzLLj.png"></p>
]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>CCNA</tag>
        <tag>单臂路由</tag>
        <tag>vtp</tag>
      </tags>
  </entry>
  <entry>
    <title>在交换网络中部署EtherChannel技术</title>
    <url>/2020/09/05/%E5%9C%A8%E4%BA%A4%E6%8D%A2%E7%BD%91%E7%BB%9C%E4%B8%AD%E9%83%A8%E7%BD%B2EtherChannel%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>　　在有些网络环境中，用户与资源之间的距离也许非常远，交换机与交换机之间或交换机与服务器之间的链路可能会变得非常阻塞。虽然通过线路改造可以增加这些链路的带宽，但并不是所有的链路都具备带宽升级的条件。因此，在以最大化节省现有投资为目的的前提下，EtherChannel技术应运而生。EtherChannel技术可以将多条物理链路捆绑成一条逻辑链路来解决流量拥塞的问题，在提升带宽的同时，也实现了冗余性。</p>
<a id="more"></a>

<h3 id="1、EtherChannel技术背景"><a href="#1、EtherChannel技术背景" class="headerlink" title="1、EtherChannel技术背景"></a>1、EtherChannel技术背景</h3><p>　　EtherChannel技术最初是由Cisco开发的一种LAN交换机之间的链路技术，用来将多个百兆或千兆以太网端口放入一个逻辑的通道中。EtherChannel拥有以下多种优势：</p>
<ul>
<li>利用已有交换机端口。无需升级交换机互联链路，从而节省投资成本。</li>
<li>大多数的配置都可以在EtherChannel接口下完成，而不需要分别在每个端口进行配置，这可以保证交换机之间端口配置的一致性。</li>
<li>EtherChannel技术支持多条链路的负载均衡。根据硬件平台的不同，可以在多条物理链路之间部署多种方式的负载均衡，如基于源MAC和目的MAC，或是基于源IP和目的IP。</li>
</ul>
<p>　　除了交换机，其他网络设备也广泛地支持EtherChannel技术。在任何情况下，EtherChannel创建的都是一对一的逻辑链路。EtherChannel链路可以部署在两台交换机之间，也可以部署在启用了EtherChannel服务的服务器和交换机之间，但是，同一条EtherChannel不能向两台不同的交换机发送流量。一条EtherChannel链路的两端始终只连接着两台设备，而且这两台设备上EtherChannel组成员的端口配置也必须相同。</p>
<p>　　EtherChannel创建的汇聚链路会被看做是一条逻辑链路。当两台交换机之间存在多条EtherChannel链路时，生成树可能会阻塞其中的一条来防止出现环路。当生成树阻断了某条冗余链路时，也就阻断了一条EtherChannel链路，这条EtherChannel链路中的所有端口也都会被阻塞。如果仅有一条EtherChannel链路，捆绑中所有物理端口都会处于Active状态。因为对于生成树算法来说，多条物理链路捆绑后的EtherChannel链路是一条逻辑链路。如果EtherChannel中的某条物理链路出现了故障，EtherChannel会自动更新其捆绑带宽，对应的STP开销也会重新计算。</p>
<blockquote>
<p>注：在三层交换机上，可以将设备的交换端口转化成路由端口。转换后的三层端口同样可以配置EtherChannel链路。在使用了例如VSS（虚拟交换系统）或vPC（虚拟端口通道）技术后，可以在一台接入层交换机和两台不同的汇聚层交换机之间创建EtherChannel链路。</p>
</blockquote>
<h3 id="2、EtherChannel协商协议"><a href="#2、EtherChannel协商协议" class="headerlink" title="2、EtherChannel协商协议"></a>2、EtherChannel协商协议</h3><p>　　可以使用以下三种机制之一来创建EtherChannel</p>
<blockquote>
<p>LACP： IEEE标准协商协议</p>
<p>PAgP： Cisco私有协商协议</p>
<p>静态配置： 无协商协议</p>
</blockquote>
<ul>
<li><strong>LACP</strong></li>
</ul>
<p>　　链路汇聚控制协议（LACP）是一种由IEEE定义的标准（802.3ad），允许将多个 物理端口捆绑到一起形成一个逻辑通道。LACP允许交换机发送LACP数据包来与对端自动协商捆绑通道。由于LACP属于IEEE制定的业界标准，因此可以在不同厂商设备的环境中协商EtherChannel链路。LACP会检查两台交换机的配置一致性以及链路状态，用来确保EtherChannel创建时，所有端口配置有相同的端口速率、双工模式、VLAN信息等。在通道建立之后，任一端口的配置修改都会影响通道另一端的端口状态。</p>
<p>　　LACP数据包会在启用了EtherChannel功能的端口上进行交换。接收方会将对端的端口属性与自身的端口属性进行比较。LACP会为EtherChannel端口分配角色。带有最低的系统优先级的交换机将决定哪些活动端口可以加入EtherChannel。端口根据其优先级选举出Active端口。<span style="color:red">数值越低表示越优先。</span>一般来说，一个EtherChannel最大支持16条链路。同一时间只能有8条处于Active（活动）状态。其余8条非Active端口将处于Standby（备用）状态。如果某条Active链路发生故障，Standby端口将接管成为Active端口。</p>
<blockquote>
<p>两台交换机之间建立EtherChannel的最大Active链路数量是可变的</p>
</blockquote>
<p>　　LACP操作模式如下</p>
<p>　　　　①Active：使端口进入主动协商状态，发送LACP数据包主动与其他接口进行协商</p>
<p>　　　　②Passive：使端口进入被动协商状态，对LACP数据包做出响应</p>
<p>　　　　③On：强制端口形成EtherChannel，不需要使用LACP或PAgP进行协商</p>
<ul>
<li><strong>PAgP</strong></li>
</ul>
<p>　　端口聚合协议（PAgP）提供了与LACP类似的协商优点。PAgP是Cisco私有协议，因此只能运行在Cisco设备上。PAgP数据包会在启用了EtherChannel功能的端口上进行交换，每30s发送过一次。接收方会将对端的端口属性与自身的端口属性进行比较，具有相同属性的端口将被捆绑进同一个EtherChannel中。PAgP只能在配置有相同VLAN或Trunk属性的端口上形成EtherChannel。如果捆绑中的端口修改了配置，那么PAgP也会重新协商EtherChannel的参数。例如，捆绑中的某个端口的速率、双工模式或VLAN信息做了配置修改，PAgP将会重新考虑捆绑中其他端口的参数。<span style="color:red">PAgP与LACP协议之间不能兼容。</span></p>
<p>　　PAgP操作模式如下：</p>
<p>　　　　①Desirable：使端口进入主动协商的状态，发送PAgP数据包</p>
<p>　　　　②Auto：使端口进入被动协商的状态，对PAgP数据包做出响应</p>
<p>　　　　③On：强制端口不使用PAgP而形成EtherChannel，不会交换PAgP数据包</p>
<h3 id="3、EtherChannel配置实例"><a href="#3、EtherChannel配置实例" class="headerlink" title="3、EtherChannel配置实例"></a>3、EtherChannel配置实例</h3><ul>
<li>LACP验证</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmAPhT.png"></p>
<p>①首先将交换机之间的端口配置成Trunk</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#int range e0/0-1</span><br><span class="line">SW1(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">SW1(config-if-range)#switchport mode trunk </span><br><span class="line">SW2(config)#int range e0/0-1</span><br><span class="line">SW2(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">SW2(config-if-range)#switchport mode trunk </span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmVMlD.png"></p>
<p>②在SW1上配置EtherChannel，创建端口组1，模式为Active</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SW1(config)#int range e0/0-1</span><br><span class="line">SW1(config-if-range)#channel-group 1 mode active </span><br><span class="line">Creating a port-channel interface Port-channel <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>③在SW2上配置EtherChannel，创建端口组1，模式为Passive</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SW2(config)#int range e0/0-1</span><br><span class="line">SW2(config-if-range)#channel-group 1 mode passive </span><br><span class="line">Creating a port-channel interface Port-channel <span class="number">1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置后，两个端口将被捆绑到channel-group 1中。由于使用了active关键字，因此将使用LACP协议进行协商。SW1配置了LACP的active模式，SW2配置了LACP的passive模式，因此EtherChannel可以协商成功。</p>
</blockquote>
<p>④在SW1和SW2上分别进入新建的port-channel的接口配置模式，将其配置成dot1Q的trunk模式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#int port-channel 1</span><br><span class="line">SW1(config-if)#switchport trunk encapsulation dot1q </span><br><span class="line">SW1(config-if)#switchport mode trunk </span><br><span class="line">SW2(config)#int port-channel 1</span><br><span class="line">SW2(config-if)#switchport trunk encapsulation dot1q </span><br><span class="line">SW2(config-if)#switchport mode trunk </span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmDsbQ.png"></p>
<p>⑤在SW1和SW2上使用show etherchannel summary命令查看EtherChannel的摘要信息</p>
<blockquote>
<p>如下图所示，port-channel 1是一个正在使用的2层EtherChannel（SU标志）。协商协议使用的是LACP，捆绑成功的端口包括Ethernet 0/0和Ethernet 0/1（P标志）</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmsEk9.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmsg10.png"></p>
<p>⑥在SW1上查看Ethernet 0/0和port-channel 1的信息，可知带宽变为原来的两倍</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmyrDO.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmyYE4.png"></p>
<hr>

<ul>
<li>PAgP验证</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmyn4s.png"></p>
<p>①将交换机之间的端口配置成Trunk</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#int range e0/0-1</span><br><span class="line">SW1(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">SW1(config-if-range)#switchport mode trunk </span><br><span class="line">SW2(config)#int range e0/0-1</span><br><span class="line">SW2(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">SW2(config-if-range)#switchport mode trunk </span><br></pre></td></tr></table></figure>

<p>②在SW1上配置EtherChannel，创建端口组1，模式为Desirable</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SW1(config)#int range e0/0-1</span><br><span class="line">SW1(config-if-range)#channel-group 1 mode desirable </span><br><span class="line">Creating a port-channel interface Port-channel <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>③在SW2上配置EtherChannel，创建端口组2，模式为auto</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SW2(config)#int range e0/0-1</span><br><span class="line">SW2(config-if-range)#channel-group 2 mode auto </span><br><span class="line">Creating a port-channel interface Port-channel <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>④在SW1和SW2上分别进入新建的port-channel的接口配置模式，将其配置成dot1Q的trunk模式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#int port-channel 1</span><br><span class="line">SW1(config-if)#switchport trunk encapsulation dot1q </span><br><span class="line">SW1(config-if)#switchport mode trunk </span><br><span class="line">SW2(config)#int port-channel 2</span><br><span class="line">SW2(config-if)#switchport trunk encapsulation dot1q </span><br><span class="line">SW2(config-if)#switchport mode trunk </span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmcKXV.png"></p>
<p>⑤在SW1和SW2上使用show etherchannel summary命令查看EtherChannel的摘要信息</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmcwnK.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmcaX6.png"></p>
<p>⑥在SW2上查看Ethernet 0/0和port-channel 2的信息，可知带宽变为原来的两倍</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmcXuV.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmcjBT.png"></p>
<hr>

<ul>
<li>On验证</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wmg8Df.png"></p>
<p>①将交换机之间的端口配置成Trunk</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#int range e0/0-1</span><br><span class="line">SW1(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">SW1(config-if-range)#switchport mode trunk </span><br><span class="line">SW2(config)#int range e0/0-1</span><br><span class="line">SW2(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">SW2(config-if-range)#switchport mode trunk </span><br></pre></td></tr></table></figure>

<p>②在SW1和SW2上配置EtherChannel，创建端口组1，模式为On</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SW1(config)#int range e0/0-1</span><br><span class="line">SW1(config-if-range)#channel-group 1 mode on</span><br><span class="line">SW2(config)#int range e0/0-1</span><br><span class="line">SW2(config-if-range)#channel-group 1 mode on </span><br><span class="line">Creating a port-channel interface Port-channel <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>④在SW1和SW2上分别进入新建的port-channel的接口配置模式，将其配置成dot1Q的trunk模式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#int range e0/0-1</span><br><span class="line">SW1(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">SW1(config-if-range)#switchport mode trunk </span><br><span class="line">SW2(config)#int range e0/0-1</span><br><span class="line">SW2(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">SW2(config-if-range)#switchport mode trunk </span><br></pre></td></tr></table></figure>

<p>⑤在SW1和SW2上使用show etherchannel summary命令查看EtherChannel的摘要信息</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wm2Ysx.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wm2JQ1.png"></p>
<p>⑥在SW2上查看Ethernet 0/0和port-channel 2的信息，可知带宽变为原来的两倍</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/07/wm2WTS.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/07/wm2Rw8.png"></p>
<h3 id="4、EtherChannel负载均衡方式"><a href="#4、EtherChannel负载均衡方式" class="headerlink" title="4、EtherChannel负载均衡方式"></a>4、EtherChannel负载均衡方式</h3><p>　　EtherChannel中的流量可以分担到捆绑中的每条链路上。不过，流量并不是严格平均分布到每条链路上的。数据帧选择EtherChannel链路上哪条链路转发取决于哈希算法的结果，不同的设备平台使用的哈希计算算法也不尽相同。</p>
<p>　　在同一个EtherChannel的多个端口成员之间实现负载分担是配置EtherChannel的一个重要因素。管理员可以把负载分担选项当作一个规则，从而极大程度上丰富配置的多样性。举例来说，如果某条通道上的流量只去往单一的MAC地址，那么管理员既可以根据目的MAC地址进行配置，使其总是选择通道中的相同链路;也可以根据源地址进行配置，这样做可以实现更好的负载分担。</p>
<p>　　负载分担会在全局应用于交换机上的所有EtherChannel，可以使用命令<strong>port-channel load-balance</strong>来实现这项技术。负载分担可以基于以下变量实现：</p>
<ul>
<li>src-mac：源MAC地址</li>
<li>dst-mac：目的MAC地址</li>
<li>src-dst-mac：源和目的MAC地址</li>
<li>src-ip：源IP地址</li>
<li>dst-ip：目的IP地址</li>
<li>src-dst-ip：源和目的IP地址（默认）</li>
<li>src-port：源TCP/UDP（用户数据报协议）端口</li>
<li>dst-port：目的TCP/UDP端口</li>
<li>src-dst-port：源和目的TCP/UDP端口</li>
</ul>
<p>　　例如，源MAC地址转发是指当数据包被发送给EtherChannel，设备会根据入站数据包的源MAC地址来判断应该将数据包从通道的哪个端口转发出去。于是，来自不同主机的数据包就会从通道的不同端口中转发出去，而来自同一台主机的数据包会从通道的同一端口中转发出去，这就是实现了负载分担。</p>
<p>　　SW1和SW2之间使用LACP协商建立EtherChannel链路，如下图所示</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/09/wlxaVI.png"></p>
<ul>
<li>输入<span style="color:red">show etherchannel load-balance</span>命令来查看EtherChannel使用的负载均衡信息</li>
</ul>
<blockquote>
<p>此前并未在交换机上配置负载均衡，可见该交换机上默认的负载均衡方式为src-dst-ip，即基于源和目的IP地址进行负载分担</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/09/wlxnbR.png"></p>
<ul>
<li>为了测试上图所示的拓扑中每条链路上分布的流量，在SW1上输入<span style="color:red">clear counters</span>命令清空计数器，即可准确地测试出每条链路分布的流量</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SW1#clear counters </span><br><span class="line">Clear <span class="string">&quot;show interface&quot;</span> counters on all interfaces [confirm]</span><br></pre></td></tr></table></figure>

<ul>
<li>使用扩展ping命令，从PC1上 ping PC3</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/09/wlzMLj.png"></p>
<ul>
<li>在SW1上查看两个端口的计数器</li>
</ul>
<blockquote>
<p>可见大多数流量都分布在了E0/0接口上，通过E0/0端口承载</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/09/wlz5TI.png"></p>
<ul>
<li>将SW1的负载均衡方式修改为dst-ip</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#port-channel load-balance dst-ip</span><br></pre></td></tr></table></figure>

<ul>
<li>查看修改后的负载均衡方式</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/09/w1sPPO.png"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>交换</tag>
        <tag>EtherChannel</tag>
      </tags>
  </entry>
  <entry>
    <title>生成树综合测试</title>
    <url>/2020/09/26/%E7%94%9F%E6%88%90%E6%A0%91%E7%BB%BC%E5%90%88%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h3 id="1、实验目的"><a href="#1、实验目的" class="headerlink" title="1、实验目的"></a>1、实验目的</h3><p>1）掌握RSTP的配置与检验<br>2）掌握MST的配置与检验<br>3）掌握生成树特性的应用<br>4）实现VLAN间的通信</p>
<h3 id="2、拓扑结构"><a href="#2、拓扑结构" class="headerlink" title="2、拓扑结构"></a>2、拓扑结构</h3><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0iszqO.png"></p>
<h3 id="3、实验步骤"><a href="#3、实验步骤" class="headerlink" title="3、实验步骤"></a>3、实验步骤</h3><p><strong>1、在该园区网络中有4个VLAN，VLAN 10、VLAN 20、VLAN 30、VLAN 40，要求在DSW1上创建这些VLAN，其他交换机同步DSW1上的VLAN信息，并且设置VTP域名为shain.top，VTP密码为shain，所有TRUNK链路全部采用标准的封装模式</strong></p>
<ul>
<li>在DSW1上创建4个vlan</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#vlan 10,20,30,40</span><br></pre></td></tr></table></figure>

<ul>
<li>将交换机之间的端口配置成trunk，采用标准的封装模式</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#int range e0/0-3</span><br><span class="line">DSW1(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">DSW1(config-if-range)#switchport mode trunk </span><br><span class="line">DSW1(config-if-range)#switchport nonegotiate </span><br><span class="line"></span><br><span class="line">DSW2(config)#int range e0/0-3</span><br><span class="line">DSW2(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">DSW2(config-if-range)#switchport mode trunk </span><br><span class="line">DSW2(config-if-range)#switchport nonegotiate </span><br><span class="line"></span><br><span class="line">ASW1(config)#int range e0/2-3</span><br><span class="line">ASW1(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">ASW1(config-if-range)#switchport mode trunk </span><br><span class="line">ASW1(config-if-range)#switchport nonegotiate </span><br><span class="line"></span><br><span class="line">ASW2(config)#int range e0/2-3</span><br><span class="line">ASW2(config-if-range)#switchport trunk encapsulation dot1q </span><br><span class="line">ASW2(config-if-range)#switchport mode trunk </span><br><span class="line">ASW2(config-if-range)#switchport nonegotiate </span><br></pre></td></tr></table></figure>

<ul>
<li>在DSW1上设置VTP域名为shain.top，密码为shain，模式为server</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#vtp domain shain.top</span><br><span class="line">DSW1(config)#vtp password shain</span><br><span class="line">DSW1(config)#vtp mode server </span><br><span class="line"></span><br><span class="line">DSW2(config)#vtp password shain</span><br><span class="line">DSW2(config)#vtp mode client </span><br><span class="line"></span><br><span class="line">ASW1(config)#vtp password shain</span><br><span class="line">ASW1(config)#vtp mode client </span><br><span class="line"></span><br><span class="line">ASW2(config)#vtp password shain</span><br><span class="line">ASW2(config)#vtp mode client </span><br></pre></td></tr></table></figure>

<ul>
<li>查看DSW2的VTP状态和VLAN信息，可知已和DSW1进行同步</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0icTZ8.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0igCoF.png"></p>
<p><strong>2、DSW1与DSW2之间的链路不足以传递园区内部流量，使用合适的方式建立DSW1与DSW2之间的以太通道链路</strong></p>
<ul>
<li>在DSW1和DSW2之间配置EtherChannel</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#int range e0/2-3</span><br><span class="line">DSW1(config-if-range)#channel-group 1 mode active </span><br><span class="line"></span><br><span class="line">DSW2(config)#int range e0/2-3</span><br><span class="line">DSW2(config-if-range)#channel-group 1 mode active </span><br></pre></td></tr></table></figure>

<ul>
<li>查看EtherChannel的摘要信息</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0igXkD.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0i2S1A.png"></p>
<p><strong>3、要求全网启用基于802.1w标准的生成树，并且实现DSW1为VLAN 10和VLAN 20的主根，为VLAN 30和VLAN 40的次根，实现DSW2为VLAN 10和VLAN 20的次根，为VLAN 30和VLAN 40的主根，并且哪怕将来在接入层中有新的交换机添加进园区网络，也要确保这两台交换机的地位</strong></p>
<ul>
<li>配置生成树的模式为rapid-pvst</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#spanning-tree mode rapid-pvst </span><br><span class="line">DSW2(config)#spanning-tree mode rapid-pvst </span><br><span class="line">ASW1(config)#spanning-tree mode rapid-pvst </span><br><span class="line">ASW2(config)#spanning-tree mode rapid-pvst </span><br></pre></td></tr></table></figure>

<ul>
<li>指定DSW1为vlan10,20的主根，为vlan30,40的次根；指定DSW2为vlan30,40的主根，为vlan10,20的次根</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#spanning-tree vlan 10,20 root primary </span><br><span class="line">DSW1(config)#spanning-tree vlan 30,40 root secondary </span><br><span class="line"></span><br><span class="line">DSW2(config)#spanning-tree vlan 10,20 root secondary </span><br><span class="line">DSW2(config)#spanning-tree vlan 30,40 root primary </span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0iRtIS.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0iRUPg.png"></p>
<ul>
<li>在DSW1和DSW2上开启Root Guard特性，保证根桥的地位</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#int range e0/0-3,e1/0-3</span><br><span class="line">DSW1(config-if-range)#spanning-tree guard root </span><br><span class="line"></span><br><span class="line">DSW2(config)#int range e0/0-3</span><br><span class="line">DSW2(config-if-range)#spanning-tree guard root </span><br></pre></td></tr></table></figure>

<ul>
<li>以下进行验证测试</li>
</ul>
<blockquote>
<p>将ASW1的VLAN 10的生成树优先级设置为4096</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">ASW1(config)#spanning-tree vlan 10 priority 4096</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时DSW1和DSW2上提示将e0/0端口阻塞</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">DSW1#</span><br><span class="line">*Sep <span class="number">26</span> <span class="number">12</span>:<span class="number">45</span>:<span class="number">29.545</span>: %SPANTREE<span class="number">-2</span>-ROOTGUARD_BLOCK: Root guard blocking port Ethernet0/<span class="number">0</span> on VLAN0010.</span><br><span class="line"></span><br><span class="line">DSW2#</span><br><span class="line">*Sep <span class="number">26</span> <span class="number">12</span>:<span class="number">45</span>:<span class="number">29.545</span>: %SPANTREE<span class="number">-2</span>-ROOTGUARD_BLOCK: Root guard blocking port Ethernet0/<span class="number">0</span> on VLAN0010.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>DSW1仍然认为自己是VLAN 10的根桥，e0/0端口的状态为根不一致</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0iWjtU.png"></p>
<blockquote>
<p>DSW2仍然认为DSW1为VLAN 10的根桥，并且e0/0端口的状态也为根不一致</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0ifH8e.png"></p>
<blockquote>
<p>将ASW1的VLAN 10的生成树优先级恢复，则日志提示不再阻塞e0/0端口</p>
<p>DSW1由于不再监听到比自己更优的BPDU，自动恢复成根桥</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ASW1(config)#spanning-tree vlan 10 priority 32768</span><br><span class="line"></span><br><span class="line">DSW1#</span><br><span class="line">*Sep <span class="number">26</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">16.983</span>: %SPANTREE<span class="number">-2</span>-ROOTGUARD_UNBLOCK: Root guard unblocking port Ethernet0/<span class="number">0</span> on VLAN0010.</span><br><span class="line"></span><br><span class="line">DSW2#</span><br><span class="line">*Sep <span class="number">26</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">16.976</span>: %SPANTREE<span class="number">-2</span>-ROOTGUARD_UNBLOCK: Root guard unblocking port Ethernet0/<span class="number">0</span> on VLAN0010.</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0ih2i8.png"></p>
<p><strong>4、按如下表所示为各PC配置IP地址和网关，并在交换机上将PC划分到相应的VLAN中</strong></p>
<table>
<thead>
<tr>
<th align="center">设备</th>
<th align="center">VLAN</th>
<th align="center">IP地址</th>
<th align="center">默认网关</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PC1</td>
<td align="center">10</td>
<td align="center">192.168.10.100</td>
<td align="center">192.168.10.254</td>
</tr>
<tr>
<td align="center">PC2</td>
<td align="center">20</td>
<td align="center">192.168.20.100</td>
<td align="center">192.168.20.254</td>
</tr>
<tr>
<td align="center">PC3</td>
<td align="center">30</td>
<td align="center">192.168.30.100</td>
<td align="center">192.168.30.254</td>
</tr>
<tr>
<td align="center">PC4</td>
<td align="center">40</td>
<td align="center">192.168.40.100</td>
<td align="center">192.168.40.254</td>
</tr>
</tbody></table>
<ul>
<li>为各PC设置IP地址和网关</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PC1(config)#int e0/0</span><br><span class="line">PC1(config-if)#ip address 192.168.10.100 255.255.255.0</span><br><span class="line">PC1(config-if)#no shutdown</span><br><span class="line"></span><br><span class="line">PC2(config)#int e0/0</span><br><span class="line">PC2(config-if)#ip address 192.168.20.100 255.255.255.0</span><br><span class="line">PC2(config-if)#no shutdown</span><br><span class="line"></span><br><span class="line">PC3(config)#int e0/0</span><br><span class="line">PC3(config-if)#ip address 192.168.30.100 255.255.255.0</span><br><span class="line">PC3(config-if)#no shutdown</span><br><span class="line"></span><br><span class="line">PC4(config)#int e0/0</span><br><span class="line">PC4(config-if)#ip address 192.168.40.100 255.255.255.0</span><br><span class="line">PC4(config-if)#no shutdown</span><br></pre></td></tr></table></figure>

<ul>
<li>在ASW1和ASW2上将端口划分到对应的VLAN中</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">ASW1(config)#int e0/0</span><br><span class="line">ASW1(config-if)#switchport mode access</span><br><span class="line">ASW1(config-if)#switchport access vlan 10</span><br><span class="line">ASW1(config)#int e0/1</span><br><span class="line">ASW1(config-if)#switchport mode access </span><br><span class="line">ASW1(config-if)#switchport access vlan 20</span><br><span class="line"></span><br><span class="line">ASW2(config)#int e0/0</span><br><span class="line">ASW2(config-if)#switchport mode access </span><br><span class="line">ASW2(config-if)#switchport access vlan 30</span><br><span class="line">ASW2(config)#int e0/1</span><br><span class="line">ASW2(config-if)#switchport mode access </span><br><span class="line">ASW2(config-if)#switchport access vlan 40</span><br></pre></td></tr></table></figure>

<ul>
<li>在DSW1上创建相应的SVI接口，成为各PC的网关</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#int vlan 10</span><br><span class="line">DSW1(config-if)#ip address 192.168.10.254 255.255.255.0</span><br><span class="line">DSW1(config-if)#no shutdown </span><br><span class="line">DSW1(config)#int vlan 20</span><br><span class="line">DSW1(config-if)#ip address 192.168.20.254 255.255.255.0</span><br><span class="line">DSW1(config-if)#no shutdown </span><br><span class="line">DSW1(config)#int vlan 30</span><br><span class="line">DSW1(config-if)#ip address 192.168.30.254 255.255.255.0</span><br><span class="line">DSW1(config-if)#no shutdown </span><br><span class="line">DSW1(config)#int vlan 40</span><br><span class="line">DSW1(config-if)#ip address 192.168.40.254 255.255.255.0</span><br><span class="line">DSW1(config-if)#no shutdown </span><br></pre></td></tr></table></figure>

<p><strong>5、要求连接这些主机的交换端口忽视生成树过程，能够直接进入到转发状态，并且这些端口在接收到配置BPDU时就进入err-disabled状态</strong></p>
<ul>
<li>在接入层交换机连接PC的端口上开启PortFast和BPUD Guard特性</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在全局下开启PortFast特性，只针对access端口生效</span></span><br><span class="line">ASW1(config)#spanning-tree portfast edge default </span><br><span class="line">ASW2(config)#spanning-tree portfast edge default </span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0iIaGT.png"></p>
<ul>
<li>在连接PC的接口下开启BPDU Guard特性，则当监听到BPDU时，会把端口shutdown，状态置为err-disabled</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">ASW1(config)#int range e0/0-1</span><br><span class="line">ASW1(config-if-range)#spanning-tree bpduguard enable </span><br><span class="line"></span><br><span class="line">ASW2(config)#int range e0/0-1</span><br><span class="line">ASW2(config-if-range)#spanning-tree bpduguard enable </span><br><span class="line"></span><br><span class="line"><span class="comment">//设定自动恢复的时间</span></span><br><span class="line">ASW1(config)#errdisable recovery cause bpduguard </span><br><span class="line">ASW1(config)#errdisable recovery interval 30</span><br><span class="line"></span><br><span class="line">ASW2(config)#errdisable recovery cause bpduguard </span><br><span class="line">ASW2(config)#errdisable recovery interval 30</span><br></pre></td></tr></table></figure>

<p><strong>6、完成必要的配置，实现各PC间可以互相访问且都能访问R1</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0iTs4x.png"></p>
<ul>
<li>将DSW1连接R1的端口设置成三层端口，配置IP地址</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#int e1/0</span><br><span class="line">DSW1(config-if)#no switchport </span><br><span class="line">DSW1(config-if)#ip address 10.10.10.1 255.255.255.0</span><br><span class="line"></span><br><span class="line">R1(config)#int e0/0</span><br><span class="line">R1(config-if)#ip address 10.10.10.2 255.255.255.0</span><br><span class="line">R1(config-if)#no shutdown </span><br></pre></td></tr></table></figure>

<ul>
<li>在DSW1和R1上启用OSPF</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#router ospf 1</span><br><span class="line">DSW1(config-router)#router-id 1.1.1.1</span><br><span class="line">DSW1(config-router)#network 192.168.10.0 0.0.0.255 a 0</span><br><span class="line">DSW1(config-router)#network 192.168.20.0 0.0.0.255 a 0</span><br><span class="line">DSW1(config-router)#network 192.168.30.0 0.0.0.255 a 0</span><br><span class="line">DSW1(config-router)#network 192.168.40.0 0.0.0.255 a 0</span><br><span class="line">DSW1(config-router)#network 10.10.10.0 0.0.0.255 a 0</span><br><span class="line"></span><br><span class="line">R1(config)#router ospf 1</span><br><span class="line">R1(config-router)#router-id 2.2.2.2</span><br><span class="line">R1(config-router)#network 10.10.10.0 0.0.0.255 a 0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时PC能够访问R1</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0i7ZZ9.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0i73se.png"></p>
<p><strong>7、随着网络规模的扩大，该园区网将来可能需要配置更多的VLAN，大量的VLAN实例会影响交换机的性能，要求将该客户网络迁移到MST中，具体MST需求如下：</strong></p>
<ul>
<li><p><strong>创建两个MST实例，MST1和MST2，其中MST1用于VLAN 10到VLAN 25，MST2用于VLAN 26到VLAN 50，其他VLAN属于CIST</strong></p>
</li>
<li><p><strong>使用MST区域名”SWITCH”，修订号”1”</strong></p>
</li>
<li><p><strong>将DSW1配置为MST1及CIST的主根，为MST2的次根</strong></p>
</li>
<li><p><strong>将DSW2配置为MST2的主根，为MST1及CIST的次根</strong></p>
</li>
<li><p>指定生成树类型为MST，将相应的VLAN加入到实例中，并指定主次根</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#spanning-tree mode mst</span><br><span class="line">DSW1(config)#spanning-tree mst configuration </span><br><span class="line">DSW1(config-mst)#name SWITCH</span><br><span class="line">DSW1(config-mst)#revision 1</span><br><span class="line">DSW1(config-mst)#instance 1 vlan 10-25</span><br><span class="line">DSW1(config-mst)#instance 2 vlan 26-50</span><br><span class="line">DSW1(config)#spanning-tree mst 0-1 root primary </span><br><span class="line">DSW1(config)#spanning-tree mst 2 root secondary </span><br><span class="line"></span><br><span class="line">DSW2(config)#spanning-tree mode mst </span><br><span class="line">DSW2(config)#spanning-tree mst configuration </span><br><span class="line">DSW2(config-mst)#name SWITCH  </span><br><span class="line">DSW2(config-mst)#revision 1</span><br><span class="line">DSW2(config-mst)#instance 1 vlan 10-25</span><br><span class="line">DSW2(config-mst)#instance 2 vlan 26-50</span><br><span class="line">DSW2(config)#spanning-tree mst 0-1 root secondary </span><br><span class="line">DSW2(config)#spanning-tree mst 2 root primary </span><br><span class="line"></span><br><span class="line">ASW1(config)#spanning-tree mode mst </span><br><span class="line">ASW1(config)#spanning-tree mst configuration </span><br><span class="line">ASW1(config-mst)#name SWITCH</span><br><span class="line">ASW1(config-mst)#revision 1</span><br><span class="line">ASW1(config-mst)#instance 1 vlan 10-25</span><br><span class="line">ASW1(config-mst)#instance 2 vlan 26-50</span><br><span class="line"></span><br><span class="line">ASW2(config)#spanning-tree mode mst </span><br><span class="line">ASW2(config)#spanning-tree mst configuration </span><br><span class="line">ASW2(config-mst)#name SWITCH</span><br><span class="line">ASW2(config-mst)#revision 1</span><br><span class="line">ASW2(config-mst)#instance 1 vlan 10-25</span><br><span class="line">ASW2(config-mst)#instance 2 vlan 26-50</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0izjUS.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0FSeC4.png"></p>
<p><strong>8、该客户网络进行了升级，购买了两台新的多层交换机，升级之后的网络拓扑如下，其中客户所属的VLAN角色及地址段信息保持不变，要求完成如下网络配置</strong></p>
<ul>
<li><input disabled="" type="checkbox"> 配置DSW1和DSW2以执行VLAN间路由。将DSW1用作与交换机ASW1连接的PC1和PC2的默认网关。连接DSW2的客户端使用DSW2作为默认网关，所有PC都保留网络升级改造之前的IP地址和默认网关</li>
<li><input disabled="" type="checkbox"> R1与两多层交换机链路的IP地址，以及园区外部的ISP和Web_SRV地址自行规划</li>
<li><input disabled="" type="checkbox"> 在园区网络内启用OSPF，并且将园区网络划分到区域0中</li>
<li><input disabled="" type="checkbox"> 将ASW1和DSW1之间的链路捆绑到一个基于标准的EtherChannel中</li>
<li><input disabled="" type="checkbox"> 完成其他必要配置，实现各VLAN间的用户可以互相通信，并且实现园区网络内的用户可以访问ISP上的Web_SRV</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0FSYPe.png"></p>
<ul>
<li>配置DSW1作为PC1、PC2的网关；DSW2作为PC3、PC4的网关</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#vlan 10,20,30</span><br><span class="line">DSW1(config)#int vlan 10</span><br><span class="line">DSW1(config-if)#no shutdown</span><br><span class="line">DSW1(config-if)#ip address 192.168.10.254 255.255.255.0</span><br><span class="line">DSW1(config)#int vlan 20</span><br><span class="line">DSW1(config-if)#no shutdown</span><br><span class="line">DSW1(config-if)#ip address 192.168.20.254 255.255.255.0</span><br><span class="line">DSW1(config)#int vlan 30</span><br><span class="line">DSW1(config-if)#ip address 192.168.30.253 255.255.255.0</span><br><span class="line">DSW1(config-if)#no shutdown </span><br><span class="line"></span><br><span class="line">DSW2(config)#vlan 30,40</span><br><span class="line">DSW2(config)#int vlan 30</span><br><span class="line">DSW2(config-if)#ip address 192.168.30.254 255.255.255.0</span><br><span class="line">DSW2(config-if)#no shutdown</span><br><span class="line">DSW2(config)#int vlan 40</span><br><span class="line">DSW2(config-if)#ip address 192.168.40.254 255.255.255.0</span><br><span class="line">DSW2(config-if)#no shutdown</span><br></pre></td></tr></table></figure>

<ul>
<li>IP地址规划如下</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int e0/0</span><br><span class="line">R1(config-if)#ip address 172.16.10.1 255.255.255.0</span><br><span class="line">R1(config-if)#no shutdown </span><br><span class="line">R1(config)#int e0/1</span><br><span class="line">R1(config-if)#ip address 172.16.20.1 255.255.255.0</span><br><span class="line">R1(config-if)#no shutdown </span><br><span class="line">R1(config)#int s1/0</span><br><span class="line">R1(config-if)#ip address 12.12.12.1 255.255.255.0</span><br><span class="line">R1(config-if)#no shutdown </span><br><span class="line"></span><br><span class="line">ISP(config)#int s1/0</span><br><span class="line">ISP(config-if)#ip address 12.12.12.2 255.255.255.0</span><br><span class="line">ISP(config-if)#no shutdown </span><br><span class="line">ISP(config)#int e0/0</span><br><span class="line">ISP(config-if)#ip address 23.23.23.2 255.255.255.0</span><br><span class="line">ISP(config-if)#no shutdown </span><br><span class="line"></span><br><span class="line">Web_SRV(config)#int e0/0</span><br><span class="line">Web_SRV(config-if)#ip address 23.23.23.3 255.255.255.0</span><br><span class="line">Web_SRV(config-if)#no shutdown </span><br><span class="line">Web_SRV(config)#ip default-gateway 23.23.23.2</span><br><span class="line"></span><br><span class="line">DSW1(config)#int e0/1</span><br><span class="line">DSW1(config-if)#no switchport </span><br><span class="line">DSW1(config-if)#ip address 172.16.10.2 255.255.255.0</span><br><span class="line"></span><br><span class="line">DSW2(config)#int e0/1</span><br><span class="line">DSW2(config-if)#no switchport </span><br><span class="line">DSW2(config-if)#ip address 172.16.20.2 255.255.255.0</span><br></pre></td></tr></table></figure>

<ul>
<li>启用OSPF</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#router ospf 1</span><br><span class="line">DSW1(config-router)#router-id 1.1.1.1  </span><br><span class="line">DSW1(config-router)#network 192.168.10.0 0.0.0.255 a 0</span><br><span class="line">DSW1(config-router)#network 192.168.20.0 0.0.0.255 a 0</span><br><span class="line">DSW1(config-router)#network 192.168.30.0 0.0.0.255 a 0</span><br><span class="line">DSW1(config-router)#network 172.16.10.0 0.0.0.255 a 0</span><br><span class="line"></span><br><span class="line">DSW2(config)#router ospf 1</span><br><span class="line">DSW2(config-router)#router-id 2.2.2.2</span><br><span class="line">DSW2(config-router)#network 192.168.30.0 0.0.0.255 a 0</span><br><span class="line">DSW2(config-router)#network 192.168.40.0 0.0.0.255 a 0</span><br><span class="line">DSW2(config-router)#network 172.16.20.0 0.0.0.255 a 0</span><br><span class="line"></span><br><span class="line">R1(config)#router ospf 1</span><br><span class="line">R1(config-router)#router-id 3.3.3.3</span><br><span class="line">R1(config-router)#network 172.16.10.0 0.0.0.255 a 0</span><br><span class="line">R1(config-router)#network 172.16.20.0 0.0.0.255 a 0</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/26/0FiB4K.png"></p>
<ul>
<li>在ASW1和DSW1上配置EtherChannel</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#int range e0/2-3</span><br><span class="line">DSW1(config-if-range)#channel-group 1 mode active </span><br><span class="line"></span><br><span class="line">ASW1(config)#int range e0/2-3</span><br><span class="line">ASW1(config-if-range)#channel-group 1 mode active </span><br></pre></td></tr></table></figure>

<ul>
<li>在R1上配置PAT</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在R1配置默认路由，使得R1可以访问Web_SRV</span></span><br><span class="line">R1(config)#ip route 0.0.0.0 0.0.0.0 s1/0</span><br><span class="line"><span class="comment">//在OSPF进程下发默认路由</span></span><br><span class="line">R1(config)#router ospf 1</span><br><span class="line">R1(config-router)#default-information originate </span><br><span class="line"><span class="comment">//ACL匹配PC所在网段</span></span><br><span class="line">R1(config)#access-list 1 permit 192.168.0.0 /16</span><br><span class="line"><span class="comment">//PAT</span></span><br><span class="line">R1(config)#ip nat inside source list 1 interface s1/0 overload </span><br><span class="line"><span class="comment">//指定内外部接口</span></span><br><span class="line">R1(config)#int range e0/0-1</span><br><span class="line">R1(config-if-range)#ip nat inside </span><br><span class="line">R1(config)#int s1/0</span><br><span class="line">R1(config-if)#ip nat outside </span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时PC可以访问Web_SRV</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0FAo8K.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0FAIC6.png"></p>
<blockquote>
<p>查看地址转换表</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0FEp28.png"></p>
]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>STP</tag>
        <tag>RSTP</tag>
        <tag>MST</tag>
      </tags>
  </entry>
  <entry>
    <title>重分布引起的路由环路问题</title>
    <url>/2020/09/27/%E9%87%8D%E5%88%86%E5%B8%83%E5%BC%95%E8%B5%B7%E7%9A%84%E8%B7%AF%E7%94%B1%E7%8E%AF%E8%B7%AF%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="1、环境介绍"><a href="#1、环境介绍" class="headerlink" title="1、环境介绍"></a>1、环境介绍</h3><blockquote>
<p>如下图所示，左边部分运行OSPF，右边部分运行RIP，在R5上启用一个回环口并将其通告进RIP中，在R2和R6上进行重分布</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0FxaCQ.png"></p>
<ul>
<li>在R2上将RIP重分布进OSPF，在R6上将OSPF重分布进RIP</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R2(config)#router ospf 1</span><br><span class="line">R2(config-router)#redistribute rip subnets</span><br><span class="line"></span><br><span class="line">R6(config)#router rip</span><br><span class="line">R6(config-router)#redistribute ospf 1 metric 1    //指定跳数为1</span><br></pre></td></tr></table></figure>

<ul>
<li>将R5上的回环口通告进RIP</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R5(config)#router rip</span><br><span class="line">R5(config-router)#network 5.5.5.0       </span><br></pre></td></tr></table></figure>

<h3 id="2、产生环路"><a href="#2、产生环路" class="headerlink" title="2、产生环路"></a>2、产生环路</h3><ul>
<li>在R1上跟踪到达R5所经过的路径，产生了环路（R1→R2→R3→R6→R1……）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R1#traceroute 5.5.5.5 numeric </span><br><span class="line">Type <span class="built_in">escape</span> sequence to abort.</span><br><span class="line">Tracing the route to <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span></span><br><span class="line">VRF info: (vrf <span class="keyword">in</span> name/id, vrf out name/id)</span><br><span class="line">  <span class="number">1</span> <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span> <span class="number">0</span> msec <span class="number">0</span> msec <span class="number">0</span> msec</span><br><span class="line">  <span class="number">2</span> <span class="number">23.23</span><span class="number">.23</span><span class="number">.3</span> <span class="number">0</span> msec <span class="number">1</span> msec <span class="number">0</span> msec</span><br><span class="line">  <span class="number">3</span> <span class="number">36.36</span><span class="number">.36</span><span class="number">.6</span> <span class="number">1</span> msec <span class="number">0</span> msec <span class="number">1</span> msec</span><br><span class="line">  <span class="number">4</span> <span class="number">16.16</span><span class="number">.16</span><span class="number">.1</span> <span class="number">0</span> msec <span class="number">1</span> msec <span class="number">0</span> msec</span><br><span class="line">  <span class="number">5</span> <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span> <span class="number">1</span> msec <span class="number">0</span> msec <span class="number">0</span> msec</span><br><span class="line">  <span class="number">6</span> <span class="number">23.23</span><span class="number">.23</span><span class="number">.3</span> <span class="number">1</span> msec <span class="number">1</span> msec <span class="number">3</span> msec</span><br><span class="line">  <span class="number">7</span> <span class="number">36.36</span><span class="number">.36</span><span class="number">.6</span> <span class="number">1</span> msec <span class="number">1</span> msec <span class="number">0</span> msec</span><br><span class="line">  <span class="number">8</span> <span class="number">16.16</span><span class="number">.16</span><span class="number">.1</span> <span class="number">1</span> msec <span class="number">1</span> msec <span class="number">1</span> msec</span><br><span class="line">  <span class="number">9</span> <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span> <span class="number">0</span> msec <span class="number">1</span> msec <span class="number">1</span> msec</span><br><span class="line">  ……</span><br><span class="line">  ……</span><br><span class="line">  ……</span><br></pre></td></tr></table></figure>

<h3 id="3、分析"><a href="#3、分析" class="headerlink" title="3、分析"></a>3、分析</h3><ul>
<li>查看R4的路由表</li>
</ul>
<blockquote>
<p>R4从R5上学习到5.5.5.0/24的路由条目，AD值为120，cost值为1，下一跳为45.45.45.5</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R4#show ip route </span><br><span class="line"><span class="comment">//省略部分输出</span></span><br><span class="line">      <span class="number">5.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">R        <span class="number">5.5</span><span class="number">.5</span><span class="number">.0</span> [<span class="number">120</span>/<span class="number">1</span>] via <span class="number">45.45</span><span class="number">.45</span><span class="number">.5</span>, <span class="number">00</span>:<span class="number">00</span>:<span class="number">11</span>, Ethernet0/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看R3的路由表</li>
</ul>
<blockquote>
<p>R3本应从R4上学习到5.5.5.0/24的路由条目，此时的下一跳却为R6。</p>
<p>分析：若R3从R4上学习5.5.5.0/24的路由，则跳数为2。由于在R6上进行了重分布，将OSPF重分布进RIP时指定了跳数为1，所以在相同协议条件下，优先选择cost值小的，因此R3会选择R6去往5.5.5.0/24网段</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R3#show ip route </span><br><span class="line"><span class="comment">//省略部分输出</span></span><br><span class="line">      <span class="number">5.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">R        <span class="number">5.5</span><span class="number">.5</span><span class="number">.0</span> [<span class="number">120</span>/<span class="number">1</span>] via <span class="number">36.36</span><span class="number">.36</span><span class="number">.6</span>, <span class="number">00</span>:<span class="number">00</span>:<span class="number">03</span>, Ethernet0/<span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看R2的路由表</li>
</ul>
<blockquote>
<p>显示下一跳为R3，cost值为2</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R2#show ip route</span><br><span class="line"><span class="comment">//省略部分输出</span></span><br><span class="line">      <span class="number">5.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">R        <span class="number">5.5</span><span class="number">.5</span><span class="number">.0</span> [<span class="number">120</span>/<span class="number">2</span>] via <span class="number">23.23</span><span class="number">.23</span><span class="number">.3</span>, <span class="number">00</span>:<span class="number">00</span>:<span class="number">12</span>, Ethernet0/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看R1的路由表</li>
</ul>
<blockquote>
<p>显示下一跳为R2：R2将RIP重分布进了OSPF中，未指定类型，则默认为O E2，传递过程中保持cost值为20</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R1#show ip route </span><br><span class="line"><span class="comment">///省略部分输出///</span></span><br><span class="line">      <span class="number">5.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O E2     <span class="number">5.5</span><span class="number">.5</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">32</span>:<span class="number">42</span>, Ethernet0/<span class="number">0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看R6路由表</li>
</ul>
<blockquote>
<p>R6从R1上学习到5.5.5.0/24的路由条目</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R6#show ip route </span><br><span class="line"><span class="comment">//省略部分输出</span></span><br><span class="line">      <span class="number">5.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O E2     <span class="number">5.5</span><span class="number">.5</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">16.16</span><span class="number">.16</span><span class="number">.1</span>, <span class="number">00</span>:<span class="number">32</span>:<span class="number">57</span>, Ethernet0/<span class="number">0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>分析总结</strong>：R4从R5上学习到了5.5.5.0/24的路由条目，并将其通告给R3，R3此时若通过R4访问5.5.5.5/24，则开销值为2。R3再将自身的路由信息通告给R2和R6，则此时R2和R6到达5.5.5.5/24的开销值都为3，并且管理距离都为120。在R2上将RIP重分布进OSPF，此时R1通过R2学习到的去往5.5.5.0/24的路由的管理距离为110，开销为20。R6与R1建立了OSPF邻居关系，则R6将会从R1上再次学习到5.5.5.0/24的路由条目，此时R6通过两种路由协议学习到了到达同一目的的路由，则会比较管理距离，最后R6选择通过R1去往5.5.5.0/24网段，因为OSPF的管理距离为110，小于RIP的120，所以在R6的路由表上显示的到达5.5.5.0的路由类型为O E2。R6上又将OSPF重分布进了RIP中，并且指定了开销值为1，此时R3通过同种路由协议学习到了到达同一目的地址的路由，会比较开销，最终选择通过R6去往5.5.5.0/24，因为R6告诉R3去往该网段的开销为1。最终，导致了环路的形成。</p>
</blockquote>
<h3 id="4、问题解决"><a href="#4、问题解决" class="headerlink" title="4、问题解决"></a>4、问题解决</h3><ul>
<li>【解决措施1】修改跳数——在R6上将OSPF重分布进RIP时将跳数设置为大于2</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R6(config)#router rip</span><br><span class="line">R6(config-router)#redistribute ospf 1 metric 3</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看R3的路由表，可知此时通过R4去往5.5.5.0/24网段</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0kVFv8.png"></p>
<blockquote>
<p>在R1上跟踪路由，问题解决</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0kV0xK.png"></p>
<ul>
<li>【解决措施2】使用分发列表过滤，在R3上将R6传过来的5.5.5.0/24的路由进行过滤</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R3(config)#access-list 1 deny 5.5.5.0 /24</span><br><span class="line">R3(config)#access-list 1 permit any </span><br><span class="line">R3(config)#router rip</span><br><span class="line">R3(config-router)#distribute-list 1 in e0/2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看R3的路由表，可知此时通过R4去往5.5.5.0/24网段</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0ke8AJ.png"></p>
<blockquote>
<p>在R1上跟踪路由，问题解决</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0kerAH.png"></p>
<ul>
<li>【解决措施3】针对特定的通告者修改管理距离——把从R6学习到的5.5.5.0/24的路由的AD值改为大于120</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R3(config)#access-list 1 permit 5.5.5.0 /24</span><br><span class="line">R3(config)#router rip</span><br><span class="line"><span class="comment">//针对R6通告的并被ACL 1匹配到的路由，将其管理距离更改为130</span></span><br><span class="line">R3(config-router)#distance 130 36.36.36.6 0.0.0.0 1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看R3的路由表，可知此时通过R4去往5.5.5.0/24网段</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0kmoqO.png"></p>
<blockquote>
<p>在R1上跟踪路由，问题解决</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0knSL8.png"></p>
<ul>
<li>【解决措施4】使用前缀列表匹配，并用分发列表过滤</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用前缀列表拒绝5.5.5.0/24</span></span><br><span class="line">R3(config)#ip prefix-list a deny 5.5.5.0/24</span><br><span class="line"><span class="comment">//前缀列表允许剩下的所有路由</span></span><br><span class="line">R3(config)#ip prefix-list a permit 0.0.0.0/0 le 32</span><br><span class="line">R3(config)#router rip</span><br><span class="line"><span class="comment">//使用分发列表调用前缀列表</span></span><br><span class="line">R3(config-router)#distribute-list prefix a in e0/2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看R3的路由表，可知此时通过R4去往5.5.5.0/24网段</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0kK5Mq.png"></p>
<blockquote>
<p>在R1上跟踪路由，问题解决</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0kMmOP.png"></p>
<ul>
<li>【解决措施5】在R6的out方向调用分发列表</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R6(config)#access-list 1 deny 5.5.5.0 /24</span><br><span class="line">R6(config)#access-list 1 permit any    </span><br><span class="line">R6(config)#router rip</span><br><span class="line"><span class="comment">//将ospf重分布进RIP时，只有被ACL 1允许的才会进行重分布</span></span><br><span class="line">R6(config-router)#distribute-list 1 out ospf 1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看R3的路由表，可知此时通过R4去往5.5.5.0/24网段</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0kQajI.png"></p>
<blockquote>
<p>在R1上跟踪路由，问题解决</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0kQhD0.png"></p>
<ul>
<li>【解决措施6】使用偏移列表（只针对距离矢量有意义）</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R6(config)#access-list 1 permit 5.5.5.0 /24</span><br><span class="line">R6(config)#router rip</span><br><span class="line"><span class="comment">//针对被ACL 1匹配到的路由，对其跳数进行偏移2，即此时R3从R6上学习到的5.5.5.0/24的路由的跳数为3</span></span><br><span class="line">R6(config-router)#offset-list 1 out 2 e0/1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看R3的路由表，可知此时通过R4去往5.5.5.0/24网段</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0k15hF.png"></p>
<blockquote>
<p>在R1上跟踪路由，问题解决</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/27/0k3n3Q.png"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>路由协议</tag>
        <tag>重分布</tag>
      </tags>
  </entry>
  <entry>
    <title>FHRP</title>
    <url>/2020/09/18/FHRP/</url>
    <content><![CDATA[<p>　　第一跳冗余协议（FHRP）是一种用来保护默认网关的网络协议，其原理是允许两台（或多台）路由器或3层交换机共同提供一个冗余的网关地址。默认情况下，如果第一跳设备故障，备用路由器将在数秒内接管网关地址。HSRP、VRRP、GLBP是三种常见的第一跳冗余协议。</p>
<a id="more"></a>

<h3 id="1、HSRP"><a href="#1、HSRP" class="headerlink" title="1、HSRP"></a>1、HSRP</h3><p>　　在HSRP中，特定IP子网中工作站的默认网关将是协议生成的一个虚拟IP地址。当工作站发送数据包至默认网关时，工作站会首先使用ARP协议解析默认网关IP地址的对应MAC地址，而ARP解析会返回一个虚拟路由器的MAC地址。随后，发送给路由器虚拟MAC地址的数据包将会由虚拟路由器组中的活动路由器进行处理。</p>
<p>　　HSRP活动及备用路由器使用组播地址224.0.0.2（版本1，针对所有路由器）或224.0.0.102（版本2）的UDP1985端口发送Hello消息。Hello消息用于HSRP组内路由器的相互通信。</p>
<p>　　HSRP组内的路由器角色：</p>
<ul>
<li>虚拟路由器：终端设备上作为默认网关配置的一组IP地址和MAC地址，不用于处理真实的物理流量。活动路由器负责处理所有发送到虚拟路由器地址的数据包和数据帧。每个HSRP组内只有一台虚拟路由器。</li>
<li>活动路由器：用于转发所有发送到虚拟路由器MAC地址的数据包。每个HSRP组内，只有一台活动路由器。</li>
<li>备用路由器：监听周期性的Hello消息。当活动路由器发生故障时，其他的HSRP路由器将接收不到活动路由器发送的Hello消息，此时备用路由器接管活动路由器的角色。每个HSRP组内只有一台备用路由器。</li>
<li>其他路由器：一个HSRP组内可能有多台路由器，但只能有一台活动路由器和一台备用路由器，其他的路由器处于初始（Initial）状态。当活动路由器和备用路由器全部发生故障之后，组内的其他路由器才会竞争活动路由器和备用路由器的角色。</li>
</ul>
<p>　　HSRP状态：</p>
<ul>
<li>Initial：初始状态，表示路由器还未运行HSRP。当配置修改或接口刚变成up时，将会进入Initial状态</li>
<li>Listen：学习到虚拟IP地址，侦听活动及备用路由器发送的Hello消息</li>
<li>Speak：发送周期性的Hello消息，主动参加到活动或备用路由器的选举中。只有学习到虚拟IP地址才能进入Speak状态</li>
<li>Standby：成为活动路由器的候选角色，发送周期性的Hello消息</li>
<li>Active：周期性地发送Hello消息，负责转发所有发送至虚拟MAC地址的数据包</li>
</ul>
<p>　　</p>
<p>　　<strong>使用如下拓扑进行HSRP的配置</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/20/wosoX4.png"></p>
<ul>
<li>首先按拓扑所示配置各设备上的IP地址</li>
<li>在R1和R2上配置HSRP Standby IP地址192.168.1.1作为虚拟IP地址，并开启抢占功能，修改R1上HSRP组1的优先级为110</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int e0/0</span><br><span class="line">R1(config-if)#standby 1 ip 192.168.1.1</span><br><span class="line">R1(config-if)#standby 1 preempt </span><br><span class="line"><span class="comment">//修改HSRP组1的优先级为110，默认为100。取值范围是0~255。</span></span><br><span class="line"><span class="comment">//带有最高优先级的设备将会选举为活动路由器，若组内设备的优先级相同，则继续比较IP地址，带有最高IP地址的设备选举为活动路由器</span></span><br><span class="line">R1(config-if)#standby 1 priority 110</span><br><span class="line"></span><br><span class="line">R2(config)#int e0/0</span><br><span class="line">R2(config-if)#standby 1 ip 192.168.1.1</span><br><span class="line">R2(config-if)#standby 1 preempt </span><br></pre></td></tr></table></figure>

<ul>
<li>查看R1和R2上的HSRP状态信息</li>
</ul>
<blockquote>
<p>R1当前为活动路由器，R2为备用路由器</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/20/wocg7d.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/20/wocc0H.png"></p>
<ul>
<li>在R1上检查ARP表项</li>
</ul>
<blockquote>
<p>由下图可知，HSRP组内活动路由器的ARP表中维护着虚拟路由器的IP地址以及对应的MAC地址。HSRP MAC地址的格式为：0000.0c07.acXX，其中”XX”为组编号。客户端使用此MAC地址来转发数据</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/20/wo6fQU.png"></p>
<ul>
<li>在PC4上持续pingR3上的回环口地址3.3.3.3，然后将R1的e0/0端口shutdown</li>
</ul>
<blockquote>
<p>R1上的活动路由器角色很快切换到R2，对于PC来说基本是无缝的</p>
<p>此时R2成为活动路由器，R1的状态为Init，表示R1和R2未找到HSRP peer，因为路由器在LAN接口上的连通性已经丢失</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/20/wo2az6.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/20/wo2wQK.png"></p>
<ul>
<li>重新打开R1上的e0/0端口，由于开启了抢占特性，R1再次成为活动路由器</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/20/wo2qWq.png"></p>
<p>　　<strong>使用如下拓扑进行HSRP负载均衡配置</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/21/wblEX6.png"></p>
<ul>
<li>配置DSW1为VLAN 10的根桥，为VLAN 20的次根桥；配置DSW2为VLAN 20的根桥，为VLAN 10的次根桥</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#spanning-tree vlan 10 root primary   </span><br><span class="line">DSW1(config)#spanning-tree vlan 20 root secondary </span><br><span class="line"></span><br><span class="line">DSW2(config)#spanning-tree vlan 10 root secondary </span><br><span class="line">DSW2(config)#spanning-tree vlan 20 root primary </span><br></pre></td></tr></table></figure>

<ul>
<li>在DSW1和DSW2上配置两个HSRP组</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#int vlan 10</span><br><span class="line">DSW1(config-if)#ip address 192.168.10.253 255.255.255.0</span><br><span class="line">DSW1(config-if)#no shutdown </span><br><span class="line">DSW1(config-if)#standby 10 ip 192.168.10.254</span><br><span class="line">DSW1(config-if)#standby 10 priority 110  //修改优先级使DSW1成为组10的活动路由器</span><br><span class="line">DSW1(config-if)#standby 10 preempt </span><br><span class="line">DSW1(config)#int vlan 20</span><br><span class="line">DSW1(config-if)#ip address 192.168.20.252 255.255.255.0</span><br><span class="line">DSW1(config-if)#no shutdown </span><br><span class="line">DSW1(config-if)#standby 20 ip 192.168.20.254  </span><br><span class="line">DSW1(config-if)#standby 20 preempt </span><br><span class="line"></span><br><span class="line">DSW2(config)#int vlan 10</span><br><span class="line">DSW2(config-if)#ip address 192.168.10.252 255.255.255.0</span><br><span class="line">DSW2(config-if)#no shutdown </span><br><span class="line">DSW2(config-if)#standby 10 ip 192.168.10.254</span><br><span class="line">DSW2(config-if)#standby 10 preempt </span><br><span class="line">DSW2(config)#int vlan 20</span><br><span class="line">DSW2(config-if)#ip address 192.168.20.253 255.255.255.0</span><br><span class="line">DSW2(config-if)#no shutdown </span><br><span class="line">DSW2(config-if)#standby 20 ip 192.168.20.254</span><br><span class="line">DSW2(config-if)#standby 20 priority 110  //修改优先级使DSW2成为组20的活动路由器</span><br><span class="line">DSW2(config-if)#standby 20 preempt </span><br></pre></td></tr></table></figure>

<ul>
<li>进行其他必要配置使得PC1和PC2可以访问Internet，并在PC1和PC2上跟踪路径</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/21/wbiuBq.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/21/wbiKH0.png"></p>
<ul>
<li>将DSW1的VLAN 10接口shutdown，观察PC1访问Internet所经过的路径，由下图可知此时PC1通过DSW2访问Internet</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/21/wbMQVe.png"></p>
<p>　　</p>
<p>　　<strong>以下进行HSRP跟踪配置</strong></p>
<ul>
<li>将DSW1的e0/2接口shutdown，观察PC1访问Internet所经过的路径</li>
</ul>
<blockquote>
<p>由于DSW1的上行链路未启用HSRP，因此其故障不会影响到HSRP。DSW1仍然作为活动路由器，所有从PC1去往Internet的流量都会先经过DSW1，然后再路由给DSW2并转发至Internet，此时产生了一个低效率的流量路径</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/21/wbJVoT.png"></p>
<ul>
<li>采用接口跟踪技术，在DSW1上跟踪e0/2接口的状态，当e0/2接口的2层协议变为down状态，将HSRP组10的优先级降低</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#track 10 interface e0/2 line-protocol  //跟踪接口e0/2的2层协议</span><br><span class="line">DSW1(config)#int vlan 10</span><br><span class="line">DSW1(config-if)#standby 10 track 10 decrement 20</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/21/wq0Z1f.png"></p>
<ul>
<li>将DSW1的e0/2接口shutdown</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//日志消息提醒</span></span><br><span class="line">*Sep <span class="number">21</span> <span class="number">15</span>:<span class="number">47</span>:<span class="number">41.079</span>: %TRACK<span class="number">-6</span>-STATE: <span class="number">10</span> interface Et0/<span class="number">2</span> line-protocol Up -&gt; Down</span><br><span class="line">*Sep <span class="number">21</span> <span class="number">15</span>:<span class="number">47</span>:<span class="number">42.136</span>: %HSRP<span class="number">-5</span>-STATECHANGE: Vlan10 Grp <span class="number">10</span> state Active -&gt; Speak</span><br><span class="line">*Sep <span class="number">21</span> <span class="number">15</span>:<span class="number">47</span>:<span class="number">52.999</span>: %HSRP<span class="number">-5</span>-STATECHANGE: Vlan10 Grp <span class="number">10</span> state Speak -&gt; Standby</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/21/wqBJIA.png"></p>
<ul>
<li>在PC1上traceroute，由下图可知此时PC1直接通过DSW2访问Internet</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/21/wq0vUs.png"></p>
<ul>
<li>若Internet上的e0/0接口出现故障，则DSW1无法感知，这时就需要使用对象跟踪</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个IP SLA的连通性测试</span></span><br><span class="line">DSW1(config)#ip sla 10</span><br><span class="line">DSW1(config-ip-sla)#icmp-echo 12.12.12.2  //使用icmp-echo ping来跟踪下一跳路由器的连通性</span><br><span class="line">DSW1(config-ip-sla-echo)#frequency 5  //指定执行测试的频率</span><br><span class="line">DSW1(config)#ip sla schedule 10 life forever start-time now  //指定测试周期和测试开始时间</span><br><span class="line">DSW1(config)#track 100 ip sla 10  //创建一个对象并跟踪IP SLA实例</span><br><span class="line">DSW1(config)#int vlan 10</span><br><span class="line">DSW1(config-if)#standby 10 track 100 decrement 20  //当测试失败时降低相应HSRP组的优先级</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/22/wqswM6.png"></p>
<ul>
<li>此时将Internet上的e0/0接口shutdown，使用traceroute跟踪PC1访问Internet所经过的路径，此时直接通过DSW2进行访问</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//日志消息提醒</span></span><br><span class="line">*Sep <span class="number">21</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">27.862</span>: %TRACK<span class="number">-6</span>-STATE: <span class="number">100</span> ip sla <span class="number">10</span> state Up -&gt; Down</span><br><span class="line">*Sep <span class="number">21</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">28.406</span>: %HSRP<span class="number">-5</span>-STATECHANGE: Vlan10 Grp <span class="number">10</span> state Active -&gt; Speak</span><br><span class="line">*Sep <span class="number">21</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">40.104</span>: %HSRP<span class="number">-5</span>-STATECHANGE: Vlan10 Grp <span class="number">10</span> state Speak -&gt; Standby</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/22/wqsodg.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/22/wqsbJs.png"></p>
<h3 id="2、VRRP"><a href="#2、VRRP" class="headerlink" title="2、VRRP"></a>2、VRRP</h3><p>　　VRRP是一种类似HSRP的开放标准技术。VRRP中的master设备相当于HSRP中的活动路由器，backup设备相当于HSRP中的备用路由器。VRRP组由一台master设备和一台或多台backup设备组成。组内带有最高优先级的设备将选举为master。优先级值为0的特殊含义：表示当前的master设备不参与VRRP的选举进程。该设置用于触发backup设备快速切换至master状态，而无需等待当前的master设备超时。当VRRP组内成员的IP地址与虚拟IP地址相同时，该成员设备具有最高优先级255，成为该VRRP组的master。VRRP中默认开启抢占特性。</p>
<p>　　VRRP中，只有master设备才会发送通告消息，使用的是组播地址224.0.0.18，端口112。默认每秒发送一次，保持时间为3秒。</p>
<ul>
<li>HSRP与VRRP比较</li>
</ul>
<table>
<thead>
<tr>
<th>HSRP</th>
<th>VRRP</th>
</tr>
</thead>
<tbody><tr>
<td>Cisco私有</td>
<td>公有</td>
</tr>
<tr>
<td>1台active设备，1台standby设备，多台候选设备</td>
<td>1台master设备，多台backup设备</td>
</tr>
<tr>
<td>虚拟IP地址与组内设备的IP地址不能相同</td>
<td>虚拟IP地址可以与组内成员的真实IP地址相同</td>
</tr>
<tr>
<td>使用224.0.0.2发送Hello包</td>
<td>使用224.0.0.18发送通告消息</td>
</tr>
<tr>
<td>可以跟踪接口或对象</td>
<td>只能跟踪对象</td>
</tr>
<tr>
<td>默认计时器：Hello–3s；保持时间–10s</td>
<td>默认计时器：Hello–1s；保持时间–3s</td>
</tr>
<tr>
<td>支持认证功能</td>
<td>RFC中不再支持认证功能，但Cisco IOS支持</td>
</tr>
</tbody></table>
<p>　　<strong>以下进行VRRP的配置，拓扑图如下所示</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/29/0e4XQ0.png"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int e0/0</span><br><span class="line">R1(config-if)#vrrp 10 ip 192.168.1.1  //配置虚拟IP地址为192.168.1.1</span><br><span class="line">R1(config-if)#vrrp 10 priority 110    //设置优先级为110</span><br><span class="line"></span><br><span class="line">R2(config)#int e0/0</span><br><span class="line">R2(config-if)#vrrp 10 ip 192.168.1.1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于在R1上配置了更高的优先级，所以R1成为Master</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/29/0eIaDK.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/29/0eIcvt.png"></p>
<ul>
<li>在R1上跟踪接口e0/1的状态，若此接口发生故障，则将其优先级降低20</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#track 1 int e0/1 line-protocol </span><br><span class="line">R1(config)#int e0/0</span><br><span class="line">R1(config-if)#vrrp 10 track 1 decrement 20</span><br></pre></td></tr></table></figure>

<ul>
<li>此时将R1上的e0/1接口shutdown，日志提示信息如下</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">*Sep <span class="number">29</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">14.436</span>: %TRACK<span class="number">-6</span>-STATE: <span class="number">1</span> interface Et0/<span class="number">1</span> line-protocol Up -&gt; Down</span><br><span class="line">*Sep <span class="number">29</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">17.367</span>: %VRRP<span class="number">-6</span>-STATECHANGE: Et0/<span class="number">0</span> Grp <span class="number">10</span> state Master -&gt; Backup</span><br></pre></td></tr></table></figure>

<blockquote>
<p>R1上检测到e0/1发生故障，将VRRP优先级降低20</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/29/0eHEZV.png"></p>
<blockquote>
<p>此时R2成为VRRP组10的Master</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/29/0eHNJe.png"></p>
<blockquote>
<p>在PC4上使用traceroute命令跟踪访问3.3.3.3所经过的路径，可知此时PC4通过R2进行访问</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/29/0m9nJI.png"></p>
<ul>
<li>在R1上配置IP SLA测试，监控上行链路是否出现故障</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#ip sla 100 </span><br><span class="line">R1(config-ip-sla)#icmp-echo 192.168.2.2   //跟踪192.168.2.2的可达性</span><br><span class="line">R1(config-ip-sla-echo)#frequency 5</span><br><span class="line">R1(config)#ip sla schedule 100 life forever start-time now </span><br><span class="line">R1(config)#track 2 ip sla 100</span><br><span class="line">R1(config)#int e0/0</span><br><span class="line">R1(config-if)#vrrp 10 track 2 decrement 50</span><br></pre></td></tr></table></figure>

<ul>
<li>将R3的e0/0接口shutdown，则此时R2成为Master</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/29/0mCYnO.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/29/0mCdNd.png"></p>
<ul>
<li>此时在PC4上使用traceroute命令跟踪访问3.3.3.3所经过的路径，右下图可知通过R2进行访问</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/29/0mCWNj.png"></p>
<h3 id="3、GLBP"><a href="#3、GLBP" class="headerlink" title="3、GLBP"></a>3、GLBP</h3><p>　　网关负载均衡协议（GLBP）可以为LAN上配有相同默认网关的IP主机提供自动的网关备份功能。LAN上的多台第一跳路由器对外提供了一个虚拟的第一跳IP地址，并同时提供了IP包的负载均衡能力。GLBP与HSRP/VRRP最大的区别在于多台GLBP路由器默认情况下都会转发流量。</p>
<p>　　GLBP中存在两种角色：网关（gateway）和转发者（forwarder）</p>
<ul>
<li>GLBP AVG（活动虚拟网关）：每个GLBP组内会选举一台网关设备作为本组的AVG，而其他组成员则扮演着备份AVG的角色并处于Standby状态。AVG会为组GLBP组内的每个成员分配一个虚拟的MAC地址。AVG会侦听来自终端主机对于默认网关的ARP请求，并回复GLBP组内成员的某个MAC地址，以此在所有组成员上实现流量的负载分担。</li>
<li>GLBP AVF（活动虚拟转发者）：AVG为网关分配虚拟MAC地址之后，每台分配了虚拟MAC地址的网关将负责转发发送到此虚拟MAC地址的数据包。这些负责转发的网关叫做AVF。一个GLBP组内最多可以存在4个AVF（AVG同时也可以是AVF）。所有其他的设备将选举为第二转发者，用于备份当前的AVF角色。</li>
</ul>
<p>　　GLBP与HSRP的比较</p>
<table>
<thead>
<tr>
<th>HSRP</th>
<th>GLBP</th>
</tr>
</thead>
<tbody><tr>
<td>Cisco私有</td>
<td>Cisco私有</td>
</tr>
<tr>
<td>1台Active设备，1台Standby设备，多台候选设备</td>
<td>AVG：1台Active设备，1台Standby设备，多台候选设备<br>AVF：多台Active设备，多台候选设备</td>
</tr>
<tr>
<td>虚拟IP地址与真实IP地址不同</td>
<td>虚拟IP地址与真实IP地址不同</td>
</tr>
<tr>
<td>使用224.0.0.2或224.0.0.102，UDP端口1985发送Hello包</td>
<td>使用224.0.0.12，UDP端口3222发送Hello包</td>
</tr>
<tr>
<td>可以跟踪接口或对象</td>
<td>只能跟踪对象</td>
</tr>
<tr>
<td>默认计时器：Hello–3s；保持时间–10s</td>
<td>默认计时器：Hello–3s；保持时间–10s</td>
</tr>
<tr>
<td>支持认证功能</td>
<td>支持认证功能</td>
</tr>
</tbody></table>
<p>　　<strong>以下进行GLBP配置，拓扑如下所示</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0uIJyR.png"></p>
<ul>
<li>在DSW1、DSW2、DSW3上完成GLBP的配置</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#int vlan 10</span><br><span class="line">DSW1(config-if)#ip address 192.168.10.253 255.255.255.0</span><br><span class="line">DSW1(config-if)#no shutdown</span><br><span class="line">DSW1(config-if)#glbp 10 ip 192.168.10.254    //配置GLBP虚拟IP地址为192.168.10.254</span><br><span class="line">DSW1(config-if)#glbp 10 priority 120    //将GLBP的优先级设为120</span><br><span class="line">DSW1(config-if)#glbp 10 preempt    //开启抢占功能</span><br><span class="line"></span><br><span class="line">DSW2(config)#int vlan 10</span><br><span class="line">DSW2(config-if)#ip address 192.168.10.252 255.255.255.0</span><br><span class="line">DSW2(config-if)#no shutdown</span><br><span class="line">DSW2(config-if)#glbp 10 ip 192.168.10.254</span><br><span class="line">DSW2(config-if)#glbp 10 priority 110</span><br><span class="line">DSW2(config-if)#glbp 10 preempt </span><br><span class="line"></span><br><span class="line">DSW3(config)#int vlan 10</span><br><span class="line">DSW3(config-if)#ip address 192.168.10.251 255.255.255.0</span><br><span class="line">DSW3(config-if)#no shutdown</span><br><span class="line">DSW3(config-if)#glbp 10 preempt </span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于DSW1上配置了更高的优先级，所以DSW1成为该GLBP组的AVG，状态为Active；DSW2成为备份AVG，状态为Standby；DSW3也作为AVG的备份，状态为Listen。则当DSW1失效时，DSW2首先接管成为GLBP组中新的AVG角色</p>
</blockquote>
<blockquote>
<p>GLBP的虚拟MAC地址格式为0007.b4XX.XXYY</p>
<p>其中，XXXX是一个16比特值，包含6比特连续的0以及10比特的GLBP组号码；YY为8比特值，代表VF的编号</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0uo3Af.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0uTcIf.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0uT6dP.png"></p>
<ul>
<li>在各PC上执行ping操作，测试各PC与其网关的连通性，并查看各PC的ARP表</li>
</ul>
<blockquote>
<p>由下列各图可知，PC1的ARP表中与网关IP地址绑定的MAC地址是DSW1所得到的虚拟MAC地址，即DSW1是转发者1，PC1通过DSW1访问外部网络；同理，PC2通过DSW2访问外部网络；PC3通过DSW3访问外部网络；由于默认使用的负载均衡方式是轮询，所以PC4会通过DSW1访问外部网络。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0ubS56.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0ubC8O.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0uHzUx.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0ub9PK.png"></p>
<ul>
<li>此时在DSW1上将VLAN 10接口shutdown</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">DSW1(config)#int vlan 10</span><br><span class="line">DSW1(config-if)#shutdown </span><br><span class="line">*Sep <span class="number">30</span> <span class="number">12</span>:<span class="number">09</span>:<span class="number">28.728</span>: %GLBP<span class="number">-6</span>-FWDSTATECHANGE: Vlan10 Grp <span class="number">10</span> Fwd <span class="number">1</span> state Active -&gt; Init</span><br><span class="line">*Sep <span class="number">30</span> <span class="number">12</span>:<span class="number">09</span>:<span class="number">28.728</span>: %GLBP<span class="number">-6</span>-STATECHANGE: Vlan10 Grp <span class="number">10</span> state Active -&gt; Init</span><br><span class="line">*Sep <span class="number">30</span> <span class="number">12</span>:<span class="number">09</span>:<span class="number">30.736</span>: %LINK<span class="number">-5</span>-CHANGED: Interface Vlan10, changed state to administratively down</span><br><span class="line">*Sep <span class="number">30</span> <span class="number">12</span>:<span class="number">09</span>:<span class="number">31.739</span>: %LINEPROTO<span class="number">-5</span>-UPDOWN: Line protocol on Interface Vlan10, changed state to down</span><br></pre></td></tr></table></figure>

<blockquote>
<p>DSW1变为Init状态；DSW2成为AVG，并且成为AVF1和AVF2，除了转发自己的流量外，还需负责转发原本DSW1转发的流量；DSW3成为备份AVG，状态为Standby</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0uLUvF.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0uLt3T.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0uLNgU.png"></p>
<blockquote>
<p>PC1的MAC绑定表未改变，但此时则是通过DSW2访问网关</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0uOKG6.png"></p>
<blockquote>
<p>虽然此时DSW2带有两个不同的虚拟MAC地址，同时充当两个AVF的角色，不过这种现象不会持续很长时间。因为AVG会维护两个不同的计时器。重定向计时器用来决定何时AVG在ARP回复中停止使用旧的虚拟MAC地址。当超时计时器到期后，所有GLBP成员都会将虚拟转发者的旧MAC地址冲刷掉。使用旧MAC地址的客户端也必须刷新其ARP表项来获取新的MAC地址。</p>
<p>默认情况下，重定向计时器为10分钟，超时计时器为4小时。</p>
</blockquote>
<p>　　权重值的变化影响着AVF的选举，以及负载均衡算法。权重值可以与对象跟踪技术协同工作。分配给每台路由器的权重值决定了路由器能够转发数据包的多少，即权重值决定了LAN中某台AVF负责转发主机流量的比例。（默认权重值为100）。当某个GLBP组内的某台路由器的权重低于某个门限值（lower threshold）时，将会关闭该AVF的转发功能。而当权重值上升达到另一门限值（upper threshold）后，又会自动开启该AVF的转发功能。</p>
<ul>
<li>在DSW1上配置权重并跟踪接口e0/1的状态</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">DSW1(config)#track 10 int e0/1 line-protocol </span><br><span class="line">DSW1(config)#int vlan 10</span><br><span class="line">DSW1(config-if)#glbp 10 weighting 110 lower 70 upper 90  //设置权重为110，当低于70时关闭AVF的转发功能</span><br><span class="line">DSW1(config-if)#glbp 10 weighting track 10 decrement 50</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在DSW1上查看GLBP状态</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0KAXss.png"></p>
<ul>
<li>将DSW1上的e0/1接口shutdown，查看GLBP状态信息</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">DSW1(config)#int e0/1</span><br><span class="line">DSW1(config-if)#shutdown </span><br><span class="line">*Sep <span class="number">30</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">01.704</span>: %TRACK<span class="number">-6</span>-STATE: <span class="number">10</span> interface Et0/<span class="number">1</span> line-protocol Up -&gt; Down</span><br><span class="line">*Sep <span class="number">30</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">03.702</span>: %LINK<span class="number">-5</span>-CHANGED: Interface Ethernet0/<span class="number">1</span>, changed state to administratively down</span><br><span class="line">*Sep <span class="number">30</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">04.705</span>: %LINEPROTO<span class="number">-5</span>-UPDOWN: Line protocol on Interface Ethernet0/<span class="number">1</span>, changed state to down</span><br><span class="line"><span class="comment">//默认情况下，GLBP虚拟转发者的抢占延迟为30s</span></span><br><span class="line">*Sep <span class="number">30</span> <span class="number">14</span>:<span class="number">51</span>:<span class="number">33.377</span>: %GLBP<span class="number">-6</span>-FWDSTATECHANGE: Vlan10 Grp <span class="number">10</span> Fwd <span class="number">1</span> state Active -&gt; Listen</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于检测到了e0/1接口发生故障，此时DSW1的权重值会降低50</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0KEHTx.png"></p>
<blockquote>
<p>DSW1仍然为AVG，但由于权重值降到了低门限值之下，此时已不再是AVF</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0KVJc4.png"></p>
<blockquote>
<p>DSW2等待30s后抢占成为AVF，同时成为AVF1和AVF2</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0KVYjJ.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/30/0KVG3F.png"></p>
<h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><p>　　HSRP的运作模式是一台路由器充当Active路由器，一台充当Standby路由器。一个HSRP组只能使用一个虚拟IP地址，如果Active路由器发生故障，Standby路由器将接管成为Active路由器，负责底层PC的数据包转发。可以为路由器配置抢占特性，当带有更高优先级的HSRP成员进入网络时，会主动抢占成为Active路由器。VRRP为公有协议。一个VRRP组内只能有一台Master路由器，一台或多台Backup路由器。并且，VRRP的抢占特性默认开启。GLBP通过使用单个虚拟IP地址与多个虚拟MAC地址的方式提供了路由冗余以及一定程度的网关负载均衡。GLBP组内通过选举出的一台AVG，为每个转发者分配一个虚拟MAC地址，并使用虚拟MAC地址回复客户端的ARP请求。每个GLBP组内最多只能存在四台AVF设备。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HSRP</tag>
        <tag>VRRP</tag>
        <tag>GLBP</tag>
      </tags>
  </entry>
  <entry>
    <title>OSPF基本原理</title>
    <url>/2020/11/15/OSPF%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述　　"></a>1、概述　　</h3><p>　　开放式最短路径优先（Open Shortest Path First，OSPF）协议是由Internet工程任务组（Internet Engineering Task Force，IETF）开发的路由选择协议，用来替代存在一些问题的RIP协议。现在，OSPF协议是IETF组织建议使用的内部网关协议（IGP）。OSPF使用Dijkstra算法来计算最短路径树。像所有的链路状态协议一样，OSPF协议和距离矢量协议相比，一个主要的改善在于它的快速收敛，这使得OSPF协议可以支持更大型的网络，并且不容易受到有害路由选择信息的影响。OSPF协议的其他一些特性有：</p>
<ul>
<li>使用了区域的概念，这样可以有效地减少路由选择协议对路由器的CPU和内存的占用；划分区域还可以降低路由选择协议的通信量，这使构建一个层次化的网络拓扑成为可能；</li>
<li>完全无类别地处理地址问题，排除了不连续子网这样的有类路由选择协议的问题；</li>
<li>支持无类别路由表查询、VLAM和用来进行有效地址管理的超网技术；</li>
<li>支持无大小限制的、任意的度量值；</li>
<li>支持使用多条路径的效率更高的等价负载均衡；</li>
<li>使用保留的组播地址来减少对不宣告OSPF的设备的影响；</li>
<li>使用可以跟踪外部路由的路由标记</li>
</ul>
<h3 id="2、OSPF的相关术语"><a href="#2、OSPF的相关术语" class="headerlink" title="2、OSPF的相关术语"></a>2、OSPF的相关术语</h3><ul>
<li><p><input disabled="" type="checkbox">  链路：链路就是一个网络或者一个被指定给任一给定网络的路由器接口。当一个接口被添加到OSPF进程时，它就被OSPF认定是一个链路。这个链路或接口都将有一个与它关联的状态信息（up或down），以及一个或多个IP地址</p>
</li>
<li><p><input disabled="" type="checkbox">  路由器ID：路由器ID（RID）是一个用来标识此路由器的IP地址。该地址可以通过手动指定（必须唯一）；若未指定，则选择路由器上所有活跃的环回接口中最大的IPv4地址；若不存在环回接口，则选择所有活跃的物理接口中最大的IPv4地址</p>
</li>
<li><p><input disabled="" type="checkbox">  邻居：邻居可以是两个或更多的路由器，这些路由器的某个接口是连接在同一个公共网络上，比如两个通过点到点串行链路连接在一起的路由器</p>
</li>
<li><p><input disabled="" type="checkbox">  邻接：邻接是指两个OSPF路由器之间的关系，这两个路由器之间允许直接交换路由更新数据。注意，并不是所有的邻居都可以建立邻接关系，这将取决于网络类型和路由器配置</p>
</li>
<li><p><input disabled="" type="checkbox">  Hello协议：OSPF的Hello协议能够动态地发现邻居，并维护邻居关系。在两台路由器成为邻居之前，需要通告这两台路由器必须相互认可的几个参数。Hello数据包确保了邻居路由器之间的双向通信，并且和链路状态通告（LSA）共同用于建立并维护拓扑数据库</p>
</li>
<li><p><input disabled="" type="checkbox">  邻居关系数据库：邻居关系数据库是一个OSPF路由器的列表，这些路由器的Hello数据包相互可见。每个路由器上的邻居关系数据库中管理着各种详细的资料，包括路由器ID和状态等信息</p>
</li>
<li><p><input disabled="" type="checkbox">  拓扑数据库：拓扑数据库中包含有来自同一区域接收的所有链路状态通告数据包的信息。路由器使用来自拓扑数据库中的信息，作为Dijkstra算法的输入，并通过该算法为每个网络计算出最短路径</p>
</li>
<li><p><input disabled="" type="checkbox">  链路状态通告（LSA）：LSA中包含着OSPF路由器共享的链路状态和路由选择信息</p>
</li>
<li><p><input disabled="" type="checkbox">  指定路由器和备用指定路由器：当OSPF路由器被连接到同一多路访问网络时，都需要选择一个指定路由器（DR）和备用指定路由器（BDR）。DR负责将路由选择信息分发到广播网络或链路中其他路由器上，或收集其他路由器的路由选择信息。如果DR失效了，那么BDR将成为新的DR。DR和BDR的选择规则如下：</p>
</li>
<li><p>先比较优先级，优先级大的优先；默认情况下以太网接口的优先级为1，串行接口的优先级为0（优先级为0不参与DR/BDR的选举）</p>
</li>
<li><p>若优先级相同，则继续比较RID，RID越大越优先</p>
</li>
</ul>
<blockquote>
<p>注意，DR和BDR的选举是非抢占的（也就是说，在已经选取了DR和BDR路由器后，如果一台具有更高优先级的路由器加入，那么这台新的路由器将不会替代DR和BDR路由器的任何一台）</p>
</blockquote>
<h3 id="3、OSPF的网络类型"><a href="#3、OSPF的网络类型" class="headerlink" title="3、OSPF的网络类型"></a>3、OSPF的网络类型</h3><ul>
<li>点到点网络（point-to-point）</li>
</ul>
<p>　　点到点网络，像T1、DS-3或SONET链路，是连接单独一对路由器的。在点到点网络上的有效邻居总是可以形成邻接关系。在这些网络上的OSPF数据包的目的地址也总是保留的D类地址224.0.0.5，这个组播地址称为ALLSPFRouters。在点到点网络类型不需要进行DR/BDR的选举。</p>
<ul>
<li>广播型网络（broadcast）</li>
</ul>
<p>　　广播型网络，像以太网、令牌环网和FDDI，也可以更确切地定义为广播型多址网络。需要进行DR和BDR的选举。由于是广播型的，所以连接在这种网络上的所有设备都可以接收到个别传送的数据包。</p>
<ul>
<li>非广播多路访问（NBMA）网络</li>
</ul>
<p>　　NBMA网络，像X.25、帧中继和ATM等，可以连接两台以上的路由器，但是它们没有广播数据包的能力。一台在NBMA网络上的路由器发送的数据包将不能被其他与之相连的路由器收到。在NBMA网络上的OSPF路由器需要选举DR和BDR，并且所有的OSPF数据包都是单播的，在这些网络上的路由器需要增加另外的配置来获得它们的邻居。</p>
<ul>
<li>点到多点网络（point-to-multipoint）</li>
</ul>
<p>　　点到多点网络是NBMA网络的一个特殊配置，可以被看做是一群点到点链路的集合。在这些网络上的OSPF路由器不需要选举DR和BDR，OSPF数据包以单播方式发送给每一个已知的邻居。</p>
<ul>
<li>虚链路（virtual links）</li>
</ul>
<p>　　虚链路可以被路由器认为是没有编号的点到点网络的一种特殊配置。在虚链路上OSPF数据包是以单播方式发送的。</p>
<h3 id="4、OSPF消息类型"><a href="#4、OSPF消息类型" class="headerlink" title="4、OSPF消息类型"></a>4、OSPF消息类型</h3><p>　　OSPF使用五种类型的路由协议包，共享通用的协议头部。每个OSPF包被直接封装在IP头部中。OSPF的IP协议号是89。</p>
<ul>
<li>类型一：Hello数据包。Hello数据包负责发现、构建并维持OSPF邻居邻接关系。为了形成一种邻接关系，Hello数据包携带的参数必须和它的邻居保持一致。</li>
<li>类型二：DBD（数据库描述）数据包。数据库描述数据包用于正在建立的邻接关系。它的一个主要的目的是描述始发路由器数据库中的一些或全部LSA信息，以便接收路由器能够确定所收到的LSA在其数据库中是否已经有了一个匹配的LSA。路由器由此判断数据库是否同步。</li>
<li>类型三：LSR（链路状态请求）数据包。在数据库同步过程中如果收到了数据库描述数据包，路由器将会查看数据库描述数据包里有哪些LSA不在自己的数据库中，或者有哪些LSA比自己数据库中的LSA更新。然后，将把这些LSA记录在链路状态请求列表中。接着，路由器会发送一个或多个链路状态请求数据包去向它的邻居请求发送在链路状态请求列表中的这些LSA的副本。</li>
<li>类型四：LSU（链路状态更新）数据包。LSU数据包包括几种类型的LSA。LSU负责泛洪LSA，以及发送对LSR包的LSA响应。LSA响应只会发给之前以LSR包形式请求LSA的直连邻居。进行泛洪时，邻居路由器负责把收到的LSA信息重新封装在新的LSU包中。</li>
<li>类型五：LSAck（链路状态确认）数据包。LSAck负责进行可靠的LSA泛洪。路由器必须明确确认每个收到的LSA，可以用一个LSAck包确认多个LSA。</li>
</ul>
<h3 id="5、OSPF状态机"><a href="#5、OSPF状态机" class="headerlink" title="5、OSPF状态机"></a>5、OSPF状态机</h3><ul>
<li>Down（失效状态）——这是一个邻居会话的初始状态，用来指明在最近一个路由死亡间隔时间内还没有收到来自邻居路由器的Hello数据包。如果一台邻居路由器从其他更高一些的邻居状态转换到了失效状态，那么路由器将会清空链路状态重传列表、数据库摘要列表和链路状态请求列表。当邻居邻接关系建立成功后，由于接口松动、重启进程或其他一些因素也会是OSPF状态动Full转换到Down。在Down状态，网段上不会收到信息。</li>
<li>Attempt（尝试状态）——这种状态仅仅适用于NBMA网络上的邻居，在NBMA网络上邻居路由器是手工配置的。当NBMA网络上具有DR选取资格的路由器和其邻居路由器相连的接口开始变为有效时，或者当这台路由器成为DR或BDR时，这台具有DR选取资格的路由器会把邻居路由器的状态转换到Attempt状态。在Attempt状态下，路由器将使用HelloInterval的时间代替PollInterval的时间来作为向邻居发送Hello数据包的时间间隔。</li>
<li>Init（初始状态）——这一状态表明在最近的RouterDeadInterval时间里路由器收到了来自邻居路由器的Hello数据包，但是双向通信仍然没有建立。路由器将会在Hello数据包的邻居字段中包含这种状态下或更高状态的所有邻居路由器的路由器ID。</li>
<li>2-Way（双向通信状态）——这一状态表明本地路由器已经在来自邻居路由器的Hello数据包的邻居字段中看到了自己的路由器ID，这也就意味着一个双向通信的会话已经成功建立了。在多址网络中，邻居路由器必须在这个状态或更高状态时才能有资格被选作该网络上的DR或BDR。</li>
<li>ExStart（信息交换初始状态）——在这一状态下，本地路由器和它的邻居将建立起主/从关系，并确定数据库描述数据包的序列号，以便为数据库描述数据包的信息交换做准备。在这里，具有最高路由器ID的邻居路由器将成为”主”路由器。</li>
<li>Exchange（信息交换状态）——在这一状态下，本地路由器将向它的邻居路由器发送可以描述它整个链路状态数据库信息的数据库描述数据包。同时，在这个Exchange状态下，本地路由器也会发送链路状态请求数据包给它的邻居路由器，用来请求最新的LSA。</li>
<li>Loading（信息加载状态）——在这一状态下，本地路由器将会向它的邻居路由器发送链路状态请求数据包，用来请求最新的LSA通告。虽然在Exchange状态下已经发现了这些最新的LSA通告，但是本地路由器还没有收到这些LSA通告。</li>
<li>Full（完全邻接状态）——在这一状态下，邻居路由器之间将建立起完全邻接关系，这种邻接关系出现在路由器LSA和网络LSA中。</li>
</ul>
<h3 id="6、建立一个邻接关系"><a href="#6、建立一个邻接关系" class="headerlink" title="6、建立一个邻接关系"></a>6、建立一个邻接关系</h3><p>　　在一个邻接关系的创建过程中，OSPF协议使用以下3种数据包类型：</p>
<ul>
<li>数据库描述数据包</li>
<li>链路状态请求数据包</li>
<li>链路状态更新数据包</li>
</ul>
<p>　　在数据库描述数据包中有3个标记位用来管理邻接关系的建立过程：</p>
<ul>
<li>I位：当需要指明所发送的是第一个数据库描述数据包时，该位设置为1；</li>
<li>M位：当需要指明所发送的还不是最后一个数据库描述数据包时，该位设置为1；</li>
<li>MS位：当数据库描述数据包始发于一个”主”路由器时，该位设置为1.</li>
</ul>
<hr>


<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DikbSP.png"></p>
<p>（1）在多路访问的网络上，路由器RT1变为有效状态，并发送一个Hello数据包。由于它还没有学习到任何邻居，因而这个Hello数据包的邻居字段是空的，而DR和BDR字段设置为0.0.0.0。</p>
<p>（2）RT2收到RT1的Hello数据包后，会为RT1创建一个邻居数据结构，并将RT1的状态设置为Init。RT2把RT1的Hello数据包中的RID提取出来，添加到自己的Hello数据包中，发送给RT1。当RT1和RT2在接收到的Hello包中都看到了自己的RID，则会进入2-Way状态。此时会进行DR和BDR的选举。</p>
<p>（3）RT1产生一个空的DBD数据包（没有包含LSA摘要），并把DBD的序列号设置为x。同时设置初始位（I）来指明这个数据包是路由器RT1用来进行本次信息交换的最初的数据库描述数据包，并设置后继位（M）来指明这个数据包不是最后的数据库描述数据包，最后还要设置主从位（MS）来指明RT1声称自己是”主”路由器。</p>
<p>（4）RT2收到来自RT1的数据库描述数据包后，就会把RT1的状态转换到ExStart状态。接着，它将发送一个响应的数据库描述数据包，并把这个数据库描述数据包的序列号设置为y。由于RT2拥有比RT1更高的RID，因此它将把自己的MS位置1。该数据包也用于主从关系协商，因此也是空的。当RT1收到此数据包后，会将RT2的状态转换到ExStart状态。</p>
<p>（5）当两台邻居路由器同意RT2是主路由器后，路由器RT1就把路由器RT2的状态转换为Exchange状态。路由器RT1将产生一个数据库描述数据包，这个数据包的序列号使用RT2的数据库描述数据包的序列号y，并设置MS位为0用来指明RT1是”从”路由器。同时，该数据包将会传送路由器RT1的链路状态摘要列表中的LSA头部。</p>
<p>（6）当路由器RT2收到来自RT1的数据库描述数据包，就会把它的邻居状态转化到Exchange状态。接着，它将发送一个数据库描述数据包，这个数据包包含路由器RT2自己的链路状态摘要列表中的LSA头部，并使它的数据库描述序列号增加到y+1。</p>
<p>（7）当路由器RT1从路由器RT2收到上述的数据库描述数据包后，路由器RT1就会发送一个包含相同序列号的确认数据包。这个过程将一直延续，路由器RT2发送一个单一的数据库描述数据包，接着等待从RT1发出的包含相同序列号的确认数据包，然后RT2再发送下一个数据库描述数据包，直到路由器RT2发出包含最后一个LSA摘要的数据库描述数据包，并把这个数据包的M位设置为0。</p>
<p>（8）收到上述数据包并且确信它所发出的确认数据包包含它自己最后的LSA摘要后，路由器RT1就会认为Exchange过程已经完成。然而，路由器RT1的链路状态请求列表中还存在LSA条目，因此，它将转换到信息加载状态（Loading）。</p>
<p>（9）当路由器RT2收到RT1的最后一个数据库描述数据包时，路由器RT2将把RT1的状态转换为完全邻接状态（Full），这是因为在它（RT2）的链路状态请求列表中已经没有LSA条目了。</p>
<p>（10）路由器RT1发送链路状态请求数据包，而路由器RT2通过链路状态更新数据包发送被请求的LSA通告，这个过程一直持续到路由器RT1的链路状态请求列表变为空。然后，路由器RT1也将路由器RT2的状态转换到完全邻接状态。</p>
<h3 id="7、OSPF的区域"><a href="#7、OSPF的区域" class="headerlink" title="7、OSPF的区域"></a>7、OSPF的区域</h3><p>　　OSPF协议由于使用了多个数据库和复杂的算法，因而相比其他的路由选择协议而言，他将会耗费路由器更多的内存和更多的CPU处理能力。当网络的规模不断增大时，对路由器的性能要求就会显得比较重要甚至达到了路由器性能的极限。另一方面，虽然LSA的泛洪扩散比RIP协议中周期性的、全路由表的更新更加有效率，但是对于一个大型的网络来说，它依然给大量数据链路带来了无法承受的负担。</p>
<p>　　OSPF协议可以利用区域的概念来缩小这些不利的影响。在OSPF协议的环境下，区域是一组逻辑上的OSPF路由器和链路，它可以有效地把一个OSPF域分割成几个子域。在一个区域内的路由器将不再需要了解他们所在区域外部的拓扑细节。在这种环境下：</p>
<ul>
<li>路由器仅需要和它所在区域的其他路由器具有相同的链路状态数据库，因此，链路状态数据库大小的缩减就降低了对路由器内存的消耗</li>
<li>链路状态数据库的减少也意味着处理较少的LSA，从而也就降低了对路由器CPU的消耗</li>
<li>由于链路状态数据库只需要在一个区域内进行维护，因此，大量的LSA泛洪扩散也就被限制在一个区域里面了</li>
</ul>
<p>　　OSPF使用两层的区域分级：</p>
<ul>
<li><p><input disabled="" type="checkbox">  骨干区域（区域0）——骨干区域的要求为，骨干区域必须连接所有其他非骨干区域；骨干区域必须连续；非骨干区域之间要通信必须经过骨干区域。一般来说，骨干区域中没有终端用户。</p>
</li>
<li><p><input disabled="" type="checkbox">  非骨干区域——此区域的主要功能是连接终端用户和资源。非骨干区域通常根据功能性或地理位置进行划分。不同非骨干区域之间的流量必须总是经过骨干区域。</p>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiASFs.png"></p>
<p>虚链路（virtual link）是指一条通过一个非骨干区域连接到骨干区域的链路。虚链路主要应用于以下几种目的：</p>
<ul>
<li>通过一个非骨干区域连接一个区域到骨干区域</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiAnYR.png"></p>
<ul>
<li>通过一个非骨干区域连接一个分段的骨干区域两边的部分区域</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiAoBF.png"></p>
<p>　在上述例子中，虚链路和具体的物理链路没有关系。虚链路事实上是一个逻辑通道，数据包可以通过选择最优的路径从一端到达另一端。在配置虚链路时，相关的规则说明如下：</p>
<ul>
<li>虚链路必须配置在两台ABR路由器之间</li>
<li>配置了虚链路所经过的区域必须拥有全部的路由选择信息，这样的区域又被称为传送区域（transit areaa）</li>
<li>传送区域不能是一个末梢区域</li>
</ul>
<p>　　正如前面所提及的，OSPF协议也把虚链路归类为一个网络类型。更特别的是，虚链路可以看成是在两台ABR路由器之间的一个无编码的——也就是说无编址地址——链路，并且它是属于骨干区域的。这些ABR路由器之间虽然没有物理的数据链路相连，但是它们可以看作是通过他们之间的虚链路逻辑上虚拟连接的邻居。在每一个ABR路由器的路由表中，当发现有到达邻居的ABR路由器的路由时，虚链路将转换到完全可操作的点到点接口状态。这条虚链路的代价就是到达它的邻居路由器的代价。当接口状态变为点到点状态时，一个邻接关系将通过这条虚链路建立成功。</p>
<p>　　虚链路的存在增加了网络的复杂度，使故障的排除更加困难。因此，最好避免使用虚链路，而应该在区域上，特别是骨干区域上设计冗余链路来确保防止分段区域的产生。虚链路可以看做是一个标明网络的某个部分是否需要重新设计的标志。事实上，永久虚链路的存在总是一个设计比较糟糕的网络的标志。</p>
<h3 id="8、链路状态数据库"><a href="#8、链路状态数据库" class="headerlink" title="8、链路状态数据库"></a>8、链路状态数据库</h3><p>　　一台路由器中所有有效的LSA都被存放在它的链路状态数据库中。正确的LSA将可以描述一个OSPF区域网络拓扑的结构。一个区域中的每一台路由器都要利用这个数据库的信息来计算它自己的最短路径树，因此，所有区域数据库的统一性对于正确的路由选择来说就变得十分重要。</p>
<p>　　由于OSPF协议定义了多种路由器的类型，因而定义多种LSA通告的类型也是必要的。每一种LSA通告类型都描述了OSPF网络的一种不同情况。</p>
<table>
<thead>
<tr>
<th>类型代码</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>路由器LSA</td>
</tr>
<tr>
<td>2</td>
<td>网络LSA</td>
</tr>
<tr>
<td>3</td>
<td>网络汇总LSA</td>
</tr>
<tr>
<td>4</td>
<td>ASBR汇总LSA</td>
</tr>
<tr>
<td>5</td>
<td>AS外部LSA</td>
</tr>
<tr>
<td>6</td>
<td>组成员LSA</td>
</tr>
<tr>
<td>7</td>
<td>NSSA外部LSA</td>
</tr>
<tr>
<td>8</td>
<td>外部属性LSA</td>
</tr>
<tr>
<td>9</td>
<td>Opaque LSA（链路本地范围）</td>
</tr>
<tr>
<td>10</td>
<td>Opaque LSA（本地区域范围）</td>
</tr>
<tr>
<td>11</td>
<td>Opaque LSA（AS范围）</td>
</tr>
</tbody></table>
<ul>
<li><p>路由器LSA（Router LSA）——每一台路由器都会产生路由器LSA通告。这个最基本的LSA通告列出了路由器所有的链路或接口，并指明了它们的状态和沿每条链路方向出站的代价，以及该链路上所有已知的OSPF邻居。这些LSA通告只会在始发它们的区域内部进行泛洪扩散。通过命令<span style="color:red"><code>show ip ospf database router</code></span>可以查看数据库中列出的所有路由器LSA通告。</p>
</li>
<li><p>网络LSA（Network LSA）——每一个多路访问网络中的指定路由器（DR）将会产生网络LSA通告。DR路由器可以看作一个”伪”节点，或是一个虚拟路由器，用来描绘一个多路访问网络和与之相连的所有路由器。从这个角度来看，一条网络LSA通告也可以描绘一个逻辑上的”伪”节点，就像一条路由器LSA通告描绘一个物理上的单台路由器一样。网络LSA通告列出了所有与之相连的路由器，包括DR路由器本身。网络LSA仅仅在产生这条网络LSA的区域内部进行泛洪扩散。可以使用命令<span style="color:red"><code>show ip ospf database network</code></span>查看网络LSA通告的信息。</p>
</li>
<li><p>网络汇总LSA（Network Summary LSA）——是由ABR路由器始发的。ABR路由器将发送网络汇总LSA到一个区域，用来通告该区域外部的目的地址。换句话说，这些网络汇总LSA就是ABR路由器告诉与其相连的区域内的内部路由器所能到达的目的地址的一种方法。可以通过命令<span style="color:red"><code>show ip ospf database summary</code></span>显示链路状态数据库中的网络汇总LSA信息。</p>
</li>
<li><p>ASBR汇总LSA（ASBR Summary LSA）——由ABR路由器始发。ASBR汇总LSA除了所通告的目的地是一台ASBR路由器而不是一个网络外，其他的和网络汇总LSA都是一样的。使用命令<span style="color:red"><code>show ip ospf database asbr-summary</code></span>可以查看ASBR汇总LSA的信息。通过ASBR汇总LSA通告的目的地将总是一个主机地址，因为它是一条到达一台路由器的路由。</p>
</li>
<li><p>自主系统外部LSA（Autonomous System External LSA）——即外部LSA，始发于ASBR路由器，用来通告到达OSPF自主系统外部的目的地或者是OSPF自主系统外部的缺省路由的LSA。外部LSA通告将在整个自主系统中进行泛洪扩散。使用命令<span style="color:red"><code>show ip ospf database external</code></span>可以查看AS外部LSA的信息。</p>
</li>
<li><p>NSSA外部LSA（NSSA External LSA）——是指在非纯末梢区域（Not-So-Stubby Area，NSSA）内始发于ASBR路由器的LSA通告。NSSA外部LSA通告仅在始发这个NSSA外部LSA通告的非纯末梢区域内部进行泛洪扩散。可以通过命令<span style="color:red"><code>show ip ospf database nssa-external</code></span>来显示NSSA外部LSA通告的信息。</p>
</li>
</ul>
<h3 id="9、末梢（Stub）区域"><a href="#9、末梢（Stub）区域" class="headerlink" title="9、末梢（Stub）区域"></a>9、末梢（Stub）区域</h3><p>　　一个学习到外部目的地路由信息的ASBR路由器，将通过在整个OSPF自主系统中泛洪扩散自主系统外部LSA来通告那些外部的目的路由信息。这些外部LSA通告可能会在每台路由器的链路状态数据库中构成较大百分比的LSA数量，对性能不好的路由器产生压力。</p>
<p>　　末梢区域是一个不允许AS外部LSA通告在其内部进行泛洪扩散的区域。若在一个区域内没有学习到类型5的LSA通告，那么类型4的LSA通告也是不必要的了，因此这些LSA通告也将被阻塞。位于末梢区域边界的ABR路由器将使用网络汇总LSA向这个区域通告一个简单的缺省路由。（即在Stub区域中会将类型4和类型5的LSA进行过滤，并且下发类型3的默认路由）</p>
<p>　　末梢区域中存在的4个限制条件：</p>
<ul>
<li>末梢区域内的所有路由器都会在它们的Hello数据包中设置一个标志——E-bit位，并将它设置为0。这样，这些末梢区域路由器将不接受其他路由器发送的任何E-bit为1的Hello数据包。因此，需要将Stub区域内的所有路由器配置成末梢区域路由器。</li>
<li>末梢区域中不能有虚链路的存在</li>
<li>末梢区域内需存在一台或多台ABR路由器，但是不能存在ASBR路由器。</li>
<li>骨干区域不能配置成特殊区域</li>
</ul>
<p>　　完全末梢区域（totally stubby area）不仅使用缺省路由到达OSPF自主系统外部的目的地址，而且使用缺省路由到达这个区域外部的所有目的地址。（过滤类型4和类型5的LSA，并且下发类型3的默认路由，再将类型3的LSA进行过滤）</p>
<p>　　非纯末梢区域（Not-So-Stubby-Area，NSSA）允许外部路由通告到OSPF自主系统内部，而同时保留自主系统其余部分的末梢区域特征。NSSA区域允许ASBR路由器的存在。NSSA外部LSA在它的头部有一个称为P-bit位的标志。NSSA ASBR路由器可以设置或清除这个P-bit位。如果一台NSSA ABR路由器收到一条P-bit设置为1的类型7的LSA数据包，那么它将把这条类型7的LSA转换成为类型5的LSA，并且将这条LSA泛洪扩散到其他区域中。如果这个P-bit位被设置为0，那么将不会转换这条类型7的LSA，而且这条类型7的LSA携带的目的地址也不能通告到这个NSSA区域的外部。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiE1Cn.png"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>OSPF</tag>
      </tags>
  </entry>
  <entry>
    <title>OSPF的配置</title>
    <url>/2020/11/15/OSPF%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="一、基本的OSPF配置"><a href="#一、基本的OSPF配置" class="headerlink" title="一、基本的OSPF配置"></a>一、基本的OSPF配置</h3><p>　　拓扑如下图所示</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiVuM6.png"></p>
<p>（1）在四台路由器的对应接口上分别配置IP地址</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int e0/0</span><br><span class="line">R1(config-if)#ip address 192.168.12.1 255.255.255.0</span><br><span class="line">R1(config-if)#no shutdown</span><br><span class="line">R2(config)#int e0/0</span><br><span class="line">R2(config-if)#ip address 192.168.12.2 255.255.255.0</span><br><span class="line">R2(config-if)#no shutdown </span><br><span class="line">R2(config)#int e0/1</span><br><span class="line">R2(config-if)#ip address 192.168.23.2 255.255.255.0</span><br><span class="line">R2(config-if)#no shutdown </span><br><span class="line">R3(config)#int e0/0</span><br><span class="line">R3(config-if)#ip address 192.168.23.3 255.255.255.0</span><br><span class="line">R3(config-if)#no shutdown </span><br><span class="line">R3(config)#int e0/1</span><br><span class="line">R3(config-if)#ip address 192.168.34.3 255.255.255.0</span><br><span class="line">R3(config-if)#no shutdown </span><br><span class="line">R4(config)#int e0/0</span><br><span class="line">R4(config-if)#ip address 192.168.34.4 255.255.255.0</span><br><span class="line">R4(config-if)#no shutdown </span><br></pre></td></tr></table></figure>

<p>（2）基本的OSPF配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动一个OSPF进程，进程ID为10，此ID号仅本地有效</span></span><br><span class="line">R1(config)#router ospf 10</span><br><span class="line"><span class="comment">//指定路由器ID为1.1.1.1</span></span><br><span class="line">R1(config-router)#router-id 1.1.1.1</span><br><span class="line"><span class="comment">//使用network area命令来指定运行OSPF协议的接口和它们所在的区域</span></span><br><span class="line"><span class="comment">//根据network语句来&quot;启动&quot;所有有效接口的IP地址，所有匹配的接口将被分配到根据network命令的area部分指定的区域</span></span><br><span class="line">R1(config-router)#network 192.168.12.0 0.0.0.255 area 1</span><br><span class="line"></span><br><span class="line">R2(config)#router ospf 20</span><br><span class="line">R2(config-router)#router-id 2.2.2.2</span><br><span class="line">R2(config-router)#network 192.168.12.0 0.0.0.255 area 1</span><br><span class="line">R2(config-router)#network 192.168.23.0 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">R3(config)#router ospf 30</span><br><span class="line">R3(config-router)#router-id 3.3.3.3</span><br><span class="line">R3(config-router)#network 192.168.23.0 0.0.0.255 area 0</span><br><span class="line">R3(config-router)#network 192.168.34.0 0.0.0.255 area 2</span><br><span class="line"></span><br><span class="line">R4(config)#router ospf 40</span><br><span class="line">R4(config-router)#router-id 4.4.4.4</span><br><span class="line">R4(config-router)#network 192.168.34.0 0.0.0.255 area 2</span><br></pre></td></tr></table></figure>

<p>（3）使用show ip ospf neighbor命令验证R1和R2上的OSPF邻居关系</p>
<ul>
<li>输出参数如下</li>
</ul>
<blockquote>
<p>Neighbor ID（邻居ID）：代表邻居的路由器ID</p>
<p>Pri（优先级）：邻居接口上用于DR/BDR选举的优先级</p>
<p>State（状态）：Full状态代表OSPF邻居建立过程的最后阶段，表示本地路由器与远程OSPF邻居已经建立了完全邻居邻接关系。DR表示DR/BDR选举过程已经完成，且使用路由器ID2.2.2.2的远程路由器被选择为DR</p>
<p>Dead Time（失效时间）：代表失效计时器值。当此计时器过期时，路由器将终结邻居关系。每次路由器从特定邻居收到一个OSPF Hello包时，它都会重置失效计时器值</p>
<p>Address（地址）：邻居路由器的主IPv4地址</p>
<p>Interface（接口）：OSPF邻居关系建立所用的本地接口</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiV3IH.png"></p>
<p>（4）使用show ip ospf interface命令验证R1和R2上启用了OSPF的接口</p>
<blockquote>
<p>show ip ospf interface命令的输出显示了OSPF进程中启用的所有接口。对于每个启用的接口，都可以看到一些详细信息，如OSPF区域ID、OSPF进程ID以及接口是如何加入到OSPF进程的。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiV0eS.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiVdL8.png"></p>
<p>（5）使用show ip route ospf命令在R1路由表中验证OSPF路由</p>
<blockquote>
<p>在OSPF自治系统生成的路由中，OSPF清晰地区分了两种类型的路由：区域内路由和区域间路由。在路由表中，区域内路由的代码是O，区域间路由的代码是O IA。从下图可知，R1上学习到的OSPF路由都为区域间路由。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiVczq.png"></p>
<p>（6）使用show ip ospf route命令查看R1上的OSPF数据库路由</p>
<blockquote>
<p>该命令清楚地区分了区域内路由和区域间路由。此外，该命令的输出内容也显示了ABR的基本信息，包括路由器ID、当前区域中的IPv4地址、将路由通告到区域的接口以及区域ID。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiVheU.png"></p>
<p>（7）使用show ip ospf process-id命令显示指定进程的信息</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiV4wF.png"></p>
<h3 id="二、OSPF认证"><a href="#二、OSPF认证" class="headerlink" title="二、OSPF认证"></a>二、OSPF认证</h3><p>　　OSPF存在三种认证方式：</p>
<ul>
<li>不认证——类型0</li>
<li>明文认证——类型1</li>
<li>密文认证——类型2</li>
</ul>
<p>　　接口下和进程下都可以开启认证，接口下的认证方式更优先</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiVqQx.png"></p>
<p>（1）明文认证</p>
<ul>
<li>R1和R2在接口下开启认证</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int e0/0</span><br><span class="line"><span class="comment">//在接口下开启明文认证</span></span><br><span class="line">R1(config-if)#ip ospf authentication</span><br><span class="line"><span class="comment">//设置密码为shain</span></span><br><span class="line">R1(config-if)#ip ospf authentication-key shain</span><br><span class="line"></span><br><span class="line">R2(config)#int e0/0</span><br><span class="line">R2(config-if)#ip ospf authentication</span><br><span class="line">R2(config-if)#ip ospf authentication-key shain</span><br></pre></td></tr></table></figure>

<blockquote>
<p>R1与R2都开启了认证，邻居关系仍正常建立</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiVLy6.png"></p>
<ul>
<li>R1和R2在进程下开启认证</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#router ospf 10</span><br><span class="line"><span class="comment">//R1在进程下针对区域1开启认证</span></span><br><span class="line">R1(config-router)#area 1 authentication </span><br><span class="line"><span class="comment">//在接口下设置认证密码</span></span><br><span class="line">R1(config)#int e0/0</span><br><span class="line">R1(config-if)#ip ospf authentication-key shain</span><br><span class="line"></span><br><span class="line">R2(config)#router ospf 20</span><br><span class="line">R2(config-router)#area 1 authentication </span><br><span class="line">R2(config)#int e0/0</span><br><span class="line">R2(config-if)#ip ospf authentication-key shain</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用show ip ospf 10查看R1上OSPF进程10的信息，由下图可知区域1进行了明文认证</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiZPSI.png"></p>
<blockquote>
<p>由于R1和R2都进行了明文认证，则它们的邻居关系仍能正常建立</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DimjmV.png"></p>
<p>（2）密文认证</p>
<ul>
<li>R2和R3在接口下开启密文认证</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R2(config)#int e0/1</span><br><span class="line"><span class="comment">//R2在接口下开启密文认证</span></span><br><span class="line">R2(config-if)#ip ospf authentication message-digest </span><br><span class="line"><span class="comment">//设置密文密码为shain</span></span><br><span class="line">R2(config-if)#ip ospf message-digest-key 1 md5 shain</span><br><span class="line"></span><br><span class="line">R3(config)#int e0/0</span><br><span class="line">R3(config-if)#ip ospf authentication message-digest </span><br><span class="line">R3(config-if)#ip ospf message-digest-key 1 md5 shain</span><br></pre></td></tr></table></figure>

<ul>
<li>R2和R3在进程下开启密文认证</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R2(config)#router ospf 20</span><br><span class="line"><span class="comment">//R2在进程下针对区域0开启密文认证</span></span><br><span class="line">R2(config-router)#area 0 authentication message-digest </span><br><span class="line"><span class="comment">//在接口下设置密文密码为shain</span></span><br><span class="line">R2(config-if)#ip ospf message-digest-key 1 md5 shain</span><br><span class="line"></span><br><span class="line">R3(config)#router ospf 30</span><br><span class="line">R3(config-router)#area 0 authentication message-digest </span><br><span class="line">R3(config)#int e0/0</span><br><span class="line">R3(config-if)#ip ospf message-digest-key 1 md5 shain</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用show ip ospf 20查看R2上OSPF进程20的信息，由下图可知区域0进行了密文认证</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DinSkF.png"></p>
<h3 id="三、虚链路"><a href="#三、虚链路" class="headerlink" title="三、虚链路"></a>三、虚链路</h3><ul>
<li>使用虚链路连接两个分段的骨干区域</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DinilR.png"></p>
<p>（1）在各路由器上进行基本的OSPF配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R1(config)#router ospf 1</span><br><span class="line"><span class="comment">//在进程下指定路由器ID</span></span><br><span class="line">R1(config-router)#router-id 1.1.1.1</span><br><span class="line">R1(config)#int range e0/0-1</span><br><span class="line"><span class="comment">//将路由器上的接口加入到对应的OSPF进程和指定的区域中</span></span><br><span class="line">R1(config-if-range)#ip ospf 1 area 0</span><br><span class="line"></span><br><span class="line">R2(config)#router ospf 1</span><br><span class="line">R2(config-router)#router-id 2.2.2.2</span><br><span class="line">R2(config)#int range e0/0-1</span><br><span class="line">R2(config-if-range)#ip ospf 1 area 0</span><br><span class="line"></span><br><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#router-id 3.3.3.3</span><br><span class="line">R3(config)#int range e0/0-1</span><br><span class="line">R3(config-if-range)#ip ospf 1 area 0</span><br><span class="line"></span><br><span class="line">R4(config)#router ospf 1</span><br><span class="line">R4(config-router)#router-id 4.4.4.4</span><br><span class="line">R4(config)#int range e0/0-1</span><br><span class="line">R4(config-if-range)#ip ospf 1 area 0</span><br><span class="line">R4(config)#int e0/2</span><br><span class="line">R4(config-if)#ip ospf 1 area 1</span><br><span class="line"><span class="comment">//其余路由器配置同上，此处不再列出</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>完成上述配置后，路由器之间都建立了OSPF邻居邻接关系。以R4为例，R4与R2、R3、R9之前都建立了邻居邻接关系。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DinF61.png"></p>
<p>（2）查看R9的路由表中的OSPF路由，可知R9学习到了到达各网段的路由</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DinV0K.png"></p>
<p>（3）在R4的路由表中，并不存在到达对端区域0的路由，这是因为骨干区域被分隔开了</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DinmkD.png"></p>
<p>（4）在R4和R5上配置虚链路</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R4(config)#router ospf 1</span><br><span class="line"><span class="comment">//配置R4，指定虚链路所使用的传输区域的区域ID为1（注意，该区域不能为特殊区域）；5.5.5.5位虚链路邻居的RID</span></span><br><span class="line">R4(config-router)#area 1 virtual-link 5.5.5.5</span><br><span class="line"></span><br><span class="line">R5(config)#router ospf 1</span><br><span class="line">R5(config-router)#area 1 virtual-link 4.4.4.4</span><br><span class="line">*Nov <span class="number">12</span> <span class="number">07</span>:<span class="number">07</span>:<span class="number">22.823</span>: %OSPF<span class="number">-5</span>-ADJCHG: Process <span class="number">1</span>, Nbr <span class="number">4.4</span><span class="number">.4</span><span class="number">.4</span> on OSPF_VL2 <span class="keyword">from</span> LOADING to FULL, Loading Done</span><br></pre></td></tr></table></figure>

<p>（5）查看R4的邻居表，此时R4和R5之间通过虚链路建立邻居邻接关系，并且没有死亡时间</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DinMpd.png"></p>
<p>（6）查看R4的路由表中的OSPF路由，此时学习到了到达对端骨干区域的路由</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DinQ1A.png"></p>
<p>（7）配置虚链路之间的认证</p>
<blockquote>
<p>由于虚链路属于区域0，所以也可以针对区域0开启认证，以下只针对虚链路进行认证</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R4(config)#router ospf 1</span><br><span class="line">R4(config-router)#area 1 virtual-link 5.5.5.5 authentication-key shain</span><br><span class="line"></span><br><span class="line">R5(config)#router ospf 1</span><br><span class="line">R5(config-router)#area 1 virtual-link 4.4.4.4 authentication-key shain</span><br></pre></td></tr></table></figure>

<p>（8）使用show ip ospf interface命令检验身份验证</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DinG0f.png"></p>
<ul>
<li>使用虚链路连接非骨干区域到骨干区域</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DinJ78.png"></p>
<p>（1）完成各路由器上的基本的OSPF配置</p>
<p>（2）查看R7的路由表中的OSPF路由</p>
<blockquote>
<p>由于R7属于区域2，并且没有与骨干区域相连，所以此时无法学习到OSPF路由</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DinUhQ.png"></p>
<p>（3）在R3和R6上配置虚链路</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#area 1 virtual-link 6.6.6.6</span><br><span class="line"></span><br><span class="line">R6(config)#router ospf 1</span><br><span class="line">R6(config-router)#area 1 virtual-link 3.3.3.3</span><br><span class="line">*Nov <span class="number">12</span> <span class="number">08</span>:<span class="number">09</span>:<span class="number">02.430</span>: %OSPF<span class="number">-5</span>-ADJCHG: Process <span class="number">1</span>, Nbr <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span> on OSPF_VL0 <span class="keyword">from</span> LOADING to FULL, Loading Done</span><br></pre></td></tr></table></figure>

<p>（4）查看R3的邻居表，此时R3与R6之间通过虚链路建立邻居邻接关系</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DinBXq.png"></p>
<p>（5）查看R7的路由表中的OSPF路由，此时R7学习到了到达各网段的路由</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DingNF.png"></p>
<h3 id="四、OSPF-末梢区域"><a href="#四、OSPF-末梢区域" class="headerlink" title="四、OSPF 末梢区域"></a>四、OSPF 末梢区域</h3><p>　　拓扑如下所示</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DinTHK.png"></p>
<p>（1）在OSPF自主系统内完成各路由器的OSPF的基本配置</p>
<blockquote>
<p>查看R4的路由表</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DinbND.png"></p>
<p>（2）R6与R1上启用EIGRP协议，并在R1上执行重分布</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R6(config)#router eigrp 90</span><br><span class="line">R6(config-router)#no auto-summary </span><br><span class="line">R6(config-router)#network 192.168.16.0 0.0.0.255</span><br><span class="line">R6(config-router)#network 10.10.10.0 0.0.0.255</span><br><span class="line">R6(config-router)#network 10.10.20.0 0.0.0.255</span><br><span class="line">R6(config-router)#network 10.10.30.0 0.0.0.255</span><br><span class="line"></span><br><span class="line">R1(config)#router eigrp 90</span><br><span class="line">R1(config-router)#no auto-summary </span><br><span class="line">R1(config-router)#network 192.168.16.0 0.0.0.255</span><br><span class="line"><span class="comment">//将OSPF路由重分布进EIGRP</span></span><br><span class="line">R1(config-router)#redistribute ospf 1 metric 10000 1 1 1 1</span><br><span class="line">R1(config)#router ospf 1</span><br><span class="line"><span class="comment">//将EIGRP路由重分布进OSPF</span></span><br><span class="line">R1(config-router)#redistribute eigrp 90 subnets  </span><br></pre></td></tr></table></figure>

<p>（3）此时查看R4的路由表</p>
<blockquote>
<p>R4的路由表中存在带O、O IA、O E2标志的OSPF路由条目</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiNbLD.png"></p>
<p>（4）查看R4的链路状态数据库和链路状态数据库的汇总信息</p>
<blockquote>
<p>R4的链路状态数据库中存在5种类型的LSA</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R4#show ip ospf database </span><br><span class="line"></span><br><span class="line">            OSPF Router <span class="keyword">with</span> ID (<span class="number">4.4</span><span class="number">.4</span><span class="number">.4</span>) (Process ID <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                Router Link States (Area <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum Link count</span><br><span class="line"><span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1167</span>        <span class="number">0x80000003</span> <span class="number">0x00787E</span> <span class="number">2</span></span><br><span class="line"><span class="number">4.4</span><span class="number">.4</span><span class="number">.4</span>         <span class="number">4.4</span><span class="number">.4</span><span class="number">.4</span>         <span class="number">1137</span>        <span class="number">0x80000003</span> <span class="number">0x005588</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">                Net Link States (Area <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum</span><br><span class="line"><span class="number">192.168</span><span class="number">.24</span><span class="number">.2</span>    <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1260</span>        <span class="number">0x80000001</span> <span class="number">0x00A1F4</span></span><br><span class="line"></span><br><span class="line">                Summary Net Link States (Area <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum</span><br><span class="line"><span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>         <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1175</span>        <span class="number">0x80000001</span> <span class="number">0x008D98</span></span><br><span class="line"><span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1151</span>        <span class="number">0x80000001</span> <span class="number">0x00957E</span></span><br><span class="line"><span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span>         <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1115</span>        <span class="number">0x80000001</span> <span class="number">0x009D64</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.10</span><span class="number">.1</span>    <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1268</span>        <span class="number">0x80000001</span> <span class="number">0x009124</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.12</span><span class="number">.0</span>    <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1297</span>        <span class="number">0x80000002</span> <span class="number">0x00793B</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.13</span><span class="number">.0</span>    <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1268</span>        <span class="number">0x80000001</span> <span class="number">0x00D4D5</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.20</span><span class="number">.1</span>    <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1268</span>        <span class="number">0x80000001</span> <span class="number">0x002388</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.30</span><span class="number">.1</span>    <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1268</span>        <span class="number">0x80000001</span> <span class="number">0x00B4EC</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.35</span><span class="number">.0</span>    <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1268</span>        <span class="number">0x80000001</span> <span class="number">0x004644</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.40</span><span class="number">.1</span>    <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1268</span>        <span class="number">0x80000001</span> <span class="number">0x004651</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.50</span><span class="number">.1</span>    <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1268</span>        <span class="number">0x80000001</span> <span class="number">0x00D7B5</span></span><br><span class="line"></span><br><span class="line">                Summary ASB Link States (Area <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum</span><br><span class="line"><span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>         <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">499</span>         <span class="number">0x80000001</span> <span class="number">0x0075B0</span></span><br><span class="line"></span><br><span class="line">                Type<span class="number">-5</span> AS External Link States</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum Tag</span><br><span class="line"><span class="number">10.10</span><span class="number">.10</span><span class="number">.0</span>      <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>         <span class="number">505</span>         <span class="number">0x80000001</span> <span class="number">0x00601E</span> <span class="number">0</span></span><br><span class="line"><span class="number">10.10</span><span class="number">.20</span><span class="number">.0</span>      <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>         <span class="number">505</span>         <span class="number">0x80000001</span> <span class="number">0x00F182</span> <span class="number">0</span></span><br><span class="line"><span class="number">10.10</span><span class="number">.30</span><span class="number">.0</span>      <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>         <span class="number">505</span>         <span class="number">0x80000001</span> <span class="number">0x0083E6</span> <span class="number">0</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.16</span><span class="number">.0</span>    <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>         <span class="number">505</span>         <span class="number">0x80000001</span> <span class="number">0x0067BB</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>R4的数据库中总共包括19条LSA。其中：类型3的LSA数目为11，类型4的LSA数目为1，类型5的LSA数目为4</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiNLee.png"></p>
<p>（5）此时，将区域1配置成末梢区域</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R2(config)#router ospf 1</span><br><span class="line">R2(config-router)#area 1 stub </span><br><span class="line">R4(config)#router ospf 1</span><br><span class="line">R4(config-router)#area 1 stub </span><br></pre></td></tr></table></figure>

<p>（6）再次查看R4的数据库的汇总信息</p>
<blockquote>
<p>此时，类型3的LSA数目为12、类型4和类型5的数目都为0，总共包含15条LSA</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/Dia8u8.png"></p>
<blockquote>
<p>查看数据库，可知此时多了一条3类的汇总LSA，为配置成Stub区域后下发的默认路由</p>
<p>可知：配置成末梢区域后，会过滤4类和5类的LSA，并且下发3类的默认路由</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiaJHg.png"></p>
<p>（7）测试：在R4上pingR6上的回环口，测试网络的连通性</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiatEQ.png"></p>
<p>（8）将区域1配置成完全末梢区域</p>
<blockquote>
<p>通过在命令area stub的末端增加关键字no-summary来实现。此操作只有在ABR上才是必要的，在内部路由器上使用标准的末梢区域配置即可。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R2(config)#router ospf 1</span><br><span class="line">R2(config-router)#area 1 stub no-summary </span><br></pre></td></tr></table></figure>

<p>（9）此时查看R4上的数据库的汇总信息和数据库</p>
<blockquote>
<p>R4上的数据库总共包括4条LSA，其中1类LSA占2条、2类LSA占1条、3类LSA占1条</p>
<p>可知：配置成完全末梢区域后，会过滤4类和5类的LSA，并下发3类的默认路由，再将3类的LSA进行过滤</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/Diaw3q.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiadCn.png"></p>
<blockquote>
<p>查看路由表，R4访问外部网络时都将匹配该默认路由</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiasDU.png"></p>
<p>（10）测试：在R4上pingR6上的回环口，测试网络的连通性</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiaruT.png"></p>
<p>（11）将区域2配置成NSSA区域</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#area 2 nssa </span><br><span class="line">R5(config)#router ospf 1</span><br><span class="line">R5(config-router)#area 2 nssa </span><br></pre></td></tr></table></figure>

<p>（12）查看R5的链路状态数据库</p>
<blockquote>
<p>此时，4类和5类的LSA被过滤，但是并没有下发默认路由</p>
<p>可知：配置成非完全末梢区域后，会过滤4类和5类的LSA，但是不会下发3类的默认路由</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiaIKK.png"></p>
<p>（13）测试：在R5上pingR6上的回环口，测试网络连通性</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/Dia4v6.png"></p>
<p>（14）在命令area nssa的末端添加关键字no-summary实现将区域2配置成totally-nssa。同样，该操作只需在ABR上进行配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#area 2 nssa no-summary </span><br></pre></td></tr></table></figure>

<p>（15）此时查看R5的链路状态数据库和路由表</p>
<blockquote>
<p>可知：配置成totally-nssa后，过滤掉4类和5类LSA的同时，还会下发3类的默认路由，并且将3类的LSA进行过滤</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiaTbD.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DiaHVe.png"></p>
<p>（16）再次进行连通性测试，此时测试成功</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DidMa4.png"></p>
<h3 id="五、OSPF的地址汇总"><a href="#五、OSPF的地址汇总" class="headerlink" title="五、OSPF的地址汇总"></a>五、OSPF的地址汇总</h3><p>　　虽然末梢区域可以通过防止某些LSA进入该区域，从而达到在一个非骨干的域中节省资源的目的，但是从骨干区域上来看，这些区域除了节省资源外并没有其他任何事情。一个区域内的所有地址仍然会通告到骨干区域中。这种情形可以通过地址汇总来解帮助解决。在Cisco路由器上可以执行两种类型的地址汇总：区域间路由汇总和外部路由汇总。</p>
<ul>
<li>区域间路由汇总（inter-area summarization）：指在区域之间的地址汇总。该类型的汇总通常是在ABR上配置。</li>
<li>外部路由汇总（external route summarization）：允许一组外部地址汇总为一条汇总地址并通过重新分配注入到一个OSPF区域中。该类型的汇总通常是在ASBR上配置。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DidwIH.png"></p>
<p>（1）按照拓扑图完成各路由协议的配置，并在R1上进行重分布</p>
<p>（2）查看R1的路由表</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DidrRI.png"></p>
<p>（3）在R2上进行区域间的路由汇总</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R2(config)#router ospf 1</span><br><span class="line"><span class="comment">//进程下对三类路由进行汇总</span></span><br><span class="line">R2(config-router)#area 1 range 192.168.0.0 255.255.248.0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看R2的路由表，可知此时生成了一条执行null 0的路由条目。该路由条目用于避免路由黑洞和路由环路。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DidgL8.png"></p>
<p>（4）再次查看R1的路由表，192.168.0.0/21为经过R2汇总过的路由</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DidfoQ.png"></p>
<p>（5）在R1上对外部路由进行汇总</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#router ospf 1</span><br><span class="line">R1(config-router)#summary-address 10.10.0.0 255.255.0.0</span><br></pre></td></tr></table></figure>

<p>（6）查看R2的路由表</p>
<blockquote>
<p>与上图相比，外部路由被汇总为10.10.0.0/16</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/15/DidLeU.png"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>OSPF</tag>
      </tags>
  </entry>
  <entry>
    <title>OSPF综合实验二</title>
    <url>/2020/11/17/OSPF%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E4%BA%8C/</url>
    <content><![CDATA[<h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><p>（1）理解和掌握OSPF stub区域的特点和配置</p>
<p>（2）理解和掌握OSPF totally stub区域的特点和配置</p>
<p>（3）理解和掌握OSPF NSSA区域的特点和配置</p>
<p>（4）理解和掌握OSPF totally NSSA区域的特点和配置</p>
<p>（5）掌握被动接口的作用</p>
<p>（6）掌握OSPF LSA7的作用</p>
<p>（7）掌握OSPF邻居间的验证</p>
<h3 id="二、实验拓扑"><a href="#二、实验拓扑" class="headerlink" title="二、实验拓扑"></a>二、实验拓扑</h3><p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCmFJ.png"></p>
<h3 id="三、实验步骤"><a href="#三、实验步骤" class="headerlink" title="三、实验步骤"></a>三、实验步骤</h3><p><strong>1、参考拓扑，完成各路由器的基本配置，除图示地址标识外，设备间的地址自己规划</strong></p>
<ul>
<li>在各路由器的相应接口配置IP地址</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处以路由器R1为例，配置R1上各接口的IP地址</span></span><br><span class="line">R1(config)#int s1/0</span><br><span class="line">R1(config-if)#ip address 12.12.12.1 255.255.255.0</span><br><span class="line">R1(config-if)#no shutdown </span><br><span class="line">R1(config)#int s1/1</span><br><span class="line">R1(config-if)#ip address 13.13.13.1 255.255.255.0</span><br><span class="line">R1(config)#int loopback 1</span><br><span class="line">R1(config-if)#ip address 11.1.1.1 255.255.255.0</span><br><span class="line">R1(config)#int loopback 2</span><br><span class="line">R1(config-if)#ip address 11.1.2.1 255.255.255.0</span><br><span class="line">R1(config)#int loopback 3</span><br><span class="line">R1(config-if)#ip address 11.1.3.1 255.255.255.0</span><br><span class="line">R1(config)#int loopback 4</span><br><span class="line">R1(config-if)#ip address 11.1.4.1 255.255.255.0</span><br><span class="line">R1(config)#int loopback 5</span><br><span class="line">R1(config-if)#ip address 11.1.5.1 255.255.255.0</span><br><span class="line">R1(config)#int loopback 6</span><br><span class="line">R1(config-if)#ip address 11.1.6.1 255.255.255.0</span><br><span class="line">R1(config)#int loopback 7</span><br><span class="line">R1(config-if)#ip address 11.1.7.1 255.255.255.0</span><br><span class="line">R1(config)#int loopback 8</span><br><span class="line">R1(config-if)#ip address 11.1.8.1 255.255.255.0</span><br></pre></td></tr></table></figure>

<p><strong>2、完成各路由协议的基本配置，在R2上进行OSPF与RIPv2的双向重分布，在R6上进行EIGRP与OSPF的双向重分布，然后完成必要的配置，实现全网可达，并且在OSPF区域内的各个路由器上手工指定各路由器的RID为各路由器的编号</strong></p>
<ul>
<li>在相应路由器上进行OSPF的配置</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#router ospf 1</span><br><span class="line">R1(config-router)#router-id 1.1.1.1</span><br><span class="line">R1(config-router)#network 12.12.12.0 0.0.0.255 area 123</span><br><span class="line">R1(config-router)#network 13.13.13.0 0.0.0.255 area 123</span><br><span class="line">R1(config)#int range lo1-8</span><br><span class="line">R1(config-if-range)#ip ospf 1 area 123</span><br><span class="line"></span><br><span class="line">R2(config)#router ospf 1</span><br><span class="line">R2(config-router)#router-id 2.2.2.2</span><br><span class="line">R2(config-router)#network 12.12.12.0 0.0.0.255 area 123</span><br><span class="line">R2(config-router)#network 12.1.1.0 0.0.0.255 area 123</span><br><span class="line">R2(config-router)#network 12.1.2.0 0.0.0.255 area 123</span><br><span class="line">R2(config-router)#network 25.25.25.0 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#router-id 3.3.3.3</span><br><span class="line">R3(config-router)#network 13.13.13.0 0.0.0.255 area 123</span><br><span class="line">R3(config-router)#network 13.1.1.0 0.0.0.255 area 123</span><br><span class="line">R3(config-router)#network 13.1.2.0 0.0.0.255 area 123</span><br><span class="line">R3(config-router)#network 34.34.34.0 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">R4(config)#router ospf 1</span><br><span class="line">R4(config-router)#router-id 4.4.4.4</span><br><span class="line">R4(config-router)#network 34.34.34.0 0.0.0.255 area 0</span><br><span class="line">R4(config-router)#network 14.1.1.0 0.0.0.255 area 0</span><br><span class="line">R4(config-router)#network 14.1.2.0 0.0.0.255 area 0</span><br><span class="line">R4(config-router)#network 47.47.47.0 0.0.0.255 area 4567</span><br><span class="line"></span><br><span class="line">R5(config)#router ospf 1</span><br><span class="line">R5(config-router)#router-id 5.5.5.5</span><br><span class="line">R5(config-router)#network 25.25.25.0 0.0.0.255 area 0</span><br><span class="line">R5(config-router)#network 15.1.1.0 0.0.0.255 area 0</span><br><span class="line">R5(config-router)#network 15.1.2.0 0.0.0.255 area 0</span><br><span class="line">R5(config-router)#network 56.56.56.0 0.0.0.255 area 4567</span><br><span class="line"></span><br><span class="line">R6(config)#router ospf 1</span><br><span class="line">R6(config-router)#router-id 6.6.6.6</span><br><span class="line">R6(config-router)#network 56.56.56.0 0.0.0.255 area 4567</span><br><span class="line">R6(config-router)#network 67.67.67.0 0.0.0.255 area 4567</span><br><span class="line">R6(config-router)#network 16.1.1.0 0.0.0.255 area 4567</span><br><span class="line">R6(config-router)#network 16.1.2.0 0.0.0.255 area 4567</span><br><span class="line"></span><br><span class="line">R7(config)#router ospf 1</span><br><span class="line">R7(config-router)#rou</span><br><span class="line">R7(config-router)#router-id 7.7.7.7</span><br><span class="line">R7(config-router)#network 47.47.47.0 0.0.0.255 are</span><br><span class="line">R7(config-router)#network 67.67.67.0 0.0.0.255 area 4567</span><br><span class="line">R7(config-router)#network 78.78.78.0 0.0.0.255 area 78</span><br><span class="line"></span><br><span class="line">R8(config)#router ospf 1</span><br><span class="line">R8(config-router)#router-id 8.8.8.8</span><br><span class="line">R8(config-router)#network 78.78.78.0 0.0.0.255 area 78</span><br><span class="line">R8(config-router)#network 18.1.1.0 0.0.0.255 area 78</span><br><span class="line">R8(config-router)#network 18.1.2.0 0.0.0.255 area 78</span><br></pre></td></tr></table></figure>

<ul>
<li>在R2和R9上配置RIPv2，并在R2上执行重分布</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R9(config)#router rip</span><br><span class="line">R9(config-router)#version 2</span><br><span class="line">R9(config-router)#no auto-summary </span><br><span class="line">R9(config-router)#network 19.1.1.0 </span><br><span class="line">R9(config-router)#network 19.1.2.0</span><br><span class="line">R9(config-router)#network 29.29.29.0</span><br><span class="line"></span><br><span class="line">R2(config)#router rip</span><br><span class="line">R2(config-router)#version 2</span><br><span class="line">R2(config-router)#no auto-summary </span><br><span class="line">R2(config-router)#network 29.29.29.0</span><br><span class="line"><span class="comment">//将OSPF路由重分布进RIP</span></span><br><span class="line">R2(config-router)#redistribute ospf 1 metric 2</span><br><span class="line">R2(config)#router ospf 1</span><br><span class="line"><span class="comment">//将RIP路由重分布进OSPF，默认的metric为20，类型为O E2，并且在传递过程中保持metric为20不变</span></span><br><span class="line">R2(config-router)#redistribute rip subnets </span><br></pre></td></tr></table></figure>

<ul>
<li>在R6和R10上配置EIGRP，并在R6上执行重分布</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R10(config)#router eigrp 90</span><br><span class="line">R10(config-router)#no auto-summary </span><br><span class="line">R10(config-router)#network 106.106.106.0 0.0.0.255</span><br><span class="line">R10(config-router)#network 192.168.1.0 0.0.0.255</span><br><span class="line">R10(config-router)#network 192.168.2.0 0.0.0.255</span><br><span class="line"></span><br><span class="line">R6(config)#router eigrp 90</span><br><span class="line">R6(config-router)#no auto-summary </span><br><span class="line">R6(config-router)#network 106.106.106.0 0.0.0.255</span><br><span class="line"><span class="comment">//将OSPF路由重分布进EIGRP</span></span><br><span class="line">R6(config-router)#redistribute ospf 1 metric 10000 1 1 1 1</span><br><span class="line">R6(config)#router ospf 1</span><br><span class="line"><span class="comment">//将EIGRP路由重分布进OSPF</span></span><br><span class="line">R6(config-router)#redistribute eigrp 90 subnets </span><br></pre></td></tr></table></figure>

<ul>
<li>由于区域78没有与骨干区域相连，所以在R4和R7、R5和R7上配置隧道</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入隧道接口</span></span><br><span class="line">R4(config)#int tunnel 47</span><br><span class="line"><span class="comment">//指定隧道源地址</span></span><br><span class="line">R4(config-if)#tunnel source 47.47.47.4 </span><br><span class="line"><span class="comment">//指定隧道目的地址</span></span><br><span class="line">R4(config-if)#tunnel destination 47.47.47.7  </span><br><span class="line"><span class="comment">//配置隧道的IP地址</span></span><br><span class="line">R4(config-if)#ip address 172.16.47.4 255.255.255.0</span><br><span class="line">R4(config-if)#no shutdown </span><br><span class="line"><span class="comment">//将隧道接口加入OSPF</span></span><br><span class="line">R4(config-if)#ip ospf 1 area 0</span><br><span class="line"></span><br><span class="line">R5(config)#int tunnel 57</span><br><span class="line">R5(config-if)#tunnel source 56.56.56.5           </span><br><span class="line">R5(config-if)#tunnel destination 67.67.67.7</span><br><span class="line">R5(config-if)#ip address 172.16.57.5 255.255.255.0</span><br><span class="line">R5(config-if)#no shutdown</span><br><span class="line">R5(config-if)#ip ospf 1 area 0</span><br><span class="line"></span><br><span class="line">R7(config)#int tunnel 47</span><br><span class="line">R7(config-if)#tunnel source 47.47.47.7</span><br><span class="line">R7(config-if)#tunnel destination 47.47.47.4</span><br><span class="line">R7(config-if)#ip address 172.16.47.7 255.255.255.0</span><br><span class="line">R7(config-if)#no shutdown </span><br><span class="line">R7(config-if)#ip ospf 1 area 0</span><br><span class="line">*Nov <span class="number">16</span> <span class="number">12</span>:<span class="number">54</span>:<span class="number">24.285</span>: %OSPF<span class="number">-5</span>-ADJCHG: Process <span class="number">1</span>, Nbr <span class="number">4.4</span><span class="number">.4</span><span class="number">.4</span> on Tunnel47 <span class="keyword">from</span> LOADING to FULL, Loading Done</span><br><span class="line">R7(config)#int tunnel 57</span><br><span class="line">R7(config-if)#tunnel source 67.67.67.7 </span><br><span class="line">R7(config-if)#tunnel destination 56.56.56.5</span><br><span class="line">R7(config-if)#ip address 172.16.57.7 255.255.255.0</span><br><span class="line">R7(config-if)#no shutdown </span><br><span class="line">R7(config-if)#ip ospf 1 area 0</span><br><span class="line">*Nov <span class="number">16</span> <span class="number">12</span>:<span class="number">54</span>:<span class="number">58.398</span>: %OSPF<span class="number">-5</span>-ADJCHG: Process <span class="number">1</span>, Nbr <span class="number">5.5</span><span class="number">.5</span><span class="number">.5</span> on Tunnel57 <span class="keyword">from</span> LOADING to FULL, Loading Done</span><br></pre></td></tr></table></figure>

<ul>
<li>查看R8的路由表，此时已经学习到全网的路由</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R8#show ip route ospf</span><br><span class="line">&lt;省略部分输出&gt;</span><br><span class="line">      <span class="number">11.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">32</span> is subnetted, <span class="number">8</span> subnets</span><br><span class="line">O IA     <span class="number">11.1</span><span class="number">.1</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1139</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">11.1</span><span class="number">.2</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1139</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">11.1</span><span class="number">.3</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1139</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">11.1</span><span class="number">.4</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1139</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">11.1</span><span class="number">.5</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1139</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">11.1</span><span class="number">.6</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1139</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">11.1</span><span class="number">.7</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1139</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">11.1</span><span class="number">.8</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1139</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">12.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">8</span> is variably subnetted, <span class="number">3</span> subnets, <span class="number">2</span> masks</span><br><span class="line">O IA     <span class="number">12.1</span><span class="number">.1</span><span class="number">.1</span>/<span class="number">32</span> [<span class="number">110</span>/<span class="number">1075</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">01</span>:<span class="number">55</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">12.1</span><span class="number">.2</span><span class="number">.1</span>/<span class="number">32</span> [<span class="number">110</span>/<span class="number">1075</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">01</span>:<span class="number">55</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">12.12</span><span class="number">.12</span><span class="number">.0</span>/<span class="number">24</span> [<span class="number">110</span>/<span class="number">1138</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">01</span>:<span class="number">55</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">13.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">8</span> is variably subnetted, <span class="number">3</span> subnets, <span class="number">2</span> masks</span><br><span class="line">O IA     <span class="number">13.1</span><span class="number">.1</span><span class="number">.1</span>/<span class="number">32</span> [<span class="number">110</span>/<span class="number">1075</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">13.1</span><span class="number">.2</span><span class="number">.1</span>/<span class="number">32</span> [<span class="number">110</span>/<span class="number">1075</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">13.13</span><span class="number">.13</span><span class="number">.0</span>/<span class="number">24</span> [<span class="number">110</span>/<span class="number">1138</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">14.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">32</span> is subnetted, <span class="number">2</span> subnets</span><br><span class="line">O IA     <span class="number">14.1</span><span class="number">.1</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1065</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">14.1</span><span class="number">.2</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1065</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">15.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">32</span> is subnetted, <span class="number">2</span> subnets</span><br><span class="line">O IA     <span class="number">15.1</span><span class="number">.1</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1065</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">01</span>:<span class="number">55</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">15.1</span><span class="number">.2</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1065</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">01</span>:<span class="number">55</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">16.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">32</span> is subnetted, <span class="number">2</span> subnets</span><br><span class="line">O IA     <span class="number">16.1</span><span class="number">.1</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">75</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">16.1</span><span class="number">.2</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">75</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">19.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">2</span> subnets</span><br><span class="line">O E2     <span class="number">19.1</span><span class="number">.1</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">19</span>, Serial1/<span class="number">0</span></span><br><span class="line">O E2     <span class="number">19.1</span><span class="number">.2</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">19</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">25.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">25.25</span><span class="number">.25</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">1074</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">01</span>:<span class="number">55</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">29.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O E2     <span class="number">29.29</span><span class="number">.29</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">19</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">34.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">34.34</span><span class="number">.34</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">1074</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">47.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">47.47</span><span class="number">.47</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">74</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">56.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">56.56</span><span class="number">.56</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">84</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">67.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">67.67</span><span class="number">.67</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">74</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">106.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O E2     <span class="number">106.106</span><span class="number">.106</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">172.16</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">2</span> subnets</span><br><span class="line">O IA     <span class="number">172.16</span><span class="number">.47</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">1064</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">172.16</span><span class="number">.57</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">1064</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">01</span>:<span class="number">55</span>, Serial1/<span class="number">0</span></span><br><span class="line">O E2  <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br><span class="line">O E2  <span class="number">192.168</span><span class="number">.2</span><span class="number">.0</span>/<span class="number">24</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">78.78</span><span class="number">.78</span><span class="number">.7</span>, <span class="number">00</span>:<span class="number">02</span>:<span class="number">29</span>, Serial1/<span class="number">0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试连通性</li>
</ul>
<blockquote>
<p>使用R9的loopback接口 ping R8上的loopback接口</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCkLT.png"></p>
<blockquote>
<p>使用R1的loopback接口 ping R10上的loopback接口</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCFyV.png"></p>
<p><strong>3、在R1上，采用合适的方式将相应的接口设置为passive-interface</strong></p>
<blockquote>
<p>通过将某个接口设置为被动接口，则该接口不会接收OSPF报文，也不会发送OSPF报文</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#router ospf 1</span><br><span class="line"><span class="comment">//在进程下将所有接口设为被动接口</span></span><br><span class="line">R1(config-router)#passive-interface default </span><br><span class="line"><span class="comment">//取消s1/0和s1/1的被动接口设置</span></span><br><span class="line">R1(config-router)#no passive-interface s1/0</span><br><span class="line">R1(config-router)#no passive-interface s1/1</span><br></pre></td></tr></table></figure>

<p><strong>4、在R1与R2的链路之间使用链路明文认证，密码为”cisco”，并使用wireshark抓包观察认证信息</strong></p>
<ul>
<li>在R1与R2上配置明文认证</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在R1的s1/0接口开启OSPF明文认证，密码为cisco</span></span><br><span class="line">R1(config)#int s1/0</span><br><span class="line">R1(config-if)#ip ospf authentication </span><br><span class="line">R1(config-if)#ip ospf authentication-key cisco</span><br><span class="line"><span class="comment">//在R2的s1/0接口开启OSPF明文认证，密码为cisco</span></span><br><span class="line">R2(config)#int s1/0</span><br><span class="line">R2(config-if)#ip ospf authentication</span><br><span class="line">R2(config-if)#ip ospf authentication-key cisco </span><br></pre></td></tr></table></figure>

<ul>
<li>使用wireshark抓包，报文如下图所示</li>
</ul>
<blockquote>
<p>由于使用明文认证，则可以使用抓包工具获取到进行认证的密码</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCEeU.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCiQ0.png"></p>
<p><strong>5、在R1与R3的链路之间使用链路MD5认证，密码为”shain”，并使用wireshark抓包观察认证信息</strong></p>
<ul>
<li>在R1与R3上配置密文认证</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#int s1/1</span><br><span class="line"><span class="comment">//指定认证方式为密文认证</span></span><br><span class="line">R1(config-if)#ip ospf authentication message-digest </span><br><span class="line"><span class="comment">//指定密文认证的密码</span></span><br><span class="line">R1(config-if)#ip ospf message-digest-key 1 md5 shain</span><br><span class="line"></span><br><span class="line">R3(config)#int s1/1</span><br><span class="line">R3(config-if)#ip ospf authentication message-digest </span><br><span class="line">R3(config-if)#ip ospf message-digest-key 1 md5 shain</span><br></pre></td></tr></table></figure>

<ul>
<li>使用wireshark抓包，报文如下图所示</li>
</ul>
<blockquote>
<p>由于使用了密文认证，此时无法通过抓包工具获取到认证的密码</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCnY9.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCVwF.png"></p>
<p><strong>6、在area4567上使用区域间的MD5认证，密码自定</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R4(config)#int e0/1</span><br><span class="line">R4(config-if)#ip ospf authentication message-digest </span><br><span class="line">R4(config-if)#ip ospf message-digest-key 1 md5 shain</span><br><span class="line"></span><br><span class="line">R5(config)#int e0/1</span><br><span class="line">R5(config-if)#ip ospf authentication message-digest </span><br><span class="line">R5(config-if)#ip ospf message-digest-key 1 md5 shain</span><br><span class="line"></span><br><span class="line">R6(config)#int range e0/0-1</span><br><span class="line">R6(config-if-range)#ip ospf authentication message-digest </span><br><span class="line">R6(config-if-range)#ip ospf message-digest-key 1 md5 shain</span><br><span class="line"></span><br><span class="line">R7(config)#int range e0/0-1</span><br><span class="line">R7(config-if-range)#ip ospf authentication message-digest </span><br><span class="line">R7(config-if-range)#ip ospf message-digest-key 1 md5 shain</span><br></pre></td></tr></table></figure>

<p><strong>7、在骨干区域上采用区域间的明文认证，密码自定</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R2(config)#int e0/0</span><br><span class="line">R2(config-if)#ip ospf authentication</span><br><span class="line">R2(config-if)#ip ospf authentication-key shain</span><br><span class="line">  </span><br><span class="line">R3(config)#int e0/0</span><br><span class="line">R3(config-if)#ip ospf authentication</span><br><span class="line">R3(config-if)#ip ospf authentication-key shain</span><br><span class="line"></span><br><span class="line">R4(config)#int e0/0</span><br><span class="line">R4(config-if)#ip ospf authentication</span><br><span class="line">R4(config-if)#ip ospf authentication-key shain</span><br><span class="line"></span><br><span class="line">R5(config)#int e0/0</span><br><span class="line">R5(config-if)#ip ospf authentication</span><br><span class="line">R5(config-if)#ip ospf authentication-key shain</span><br></pre></td></tr></table></figure>

<p><strong>8、仔细观察各区域路由器的路由表，观察各OSPF路由器LSDB数据库的信息，重点观察各OSPF路由器存在哪些类型的LSA信息</strong></p>
<p>此处以R1为例</p>
<ul>
<li>查看R1的路由表</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R1#show ip route </span><br><span class="line">&lt;省略部分输出&gt;</span><br><span class="line">      <span class="number">11.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">8</span> is variably subnetted, <span class="number">16</span> subnets, <span class="number">2</span> masks</span><br><span class="line">C        <span class="number">11.1</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> is directly connected, Loopback1</span><br><span class="line">L        <span class="number">11.1</span><span class="number">.1</span><span class="number">.1</span>/<span class="number">32</span> is directly connected, Loopback1</span><br><span class="line">C        <span class="number">11.1</span><span class="number">.2</span><span class="number">.0</span>/<span class="number">24</span> is directly connected, Loopback2</span><br><span class="line">L        <span class="number">11.1</span><span class="number">.2</span><span class="number">.1</span>/<span class="number">32</span> is directly connected, Loopback2</span><br><span class="line">C        <span class="number">11.1</span><span class="number">.3</span><span class="number">.0</span>/<span class="number">24</span> is directly connected, Loopback3</span><br><span class="line">L        <span class="number">11.1</span><span class="number">.3</span><span class="number">.1</span>/<span class="number">32</span> is directly connected, Loopback3</span><br><span class="line">C        <span class="number">11.1</span><span class="number">.4</span><span class="number">.0</span>/<span class="number">24</span> is directly connected, Loopback4</span><br><span class="line">L        <span class="number">11.1</span><span class="number">.4</span><span class="number">.1</span>/<span class="number">32</span> is directly connected, Loopback4</span><br><span class="line">C        <span class="number">11.1</span><span class="number">.5</span><span class="number">.0</span>/<span class="number">24</span> is directly connected, Loopback5</span><br><span class="line">L        <span class="number">11.1</span><span class="number">.5</span><span class="number">.1</span>/<span class="number">32</span> is directly connected, Loopback5</span><br><span class="line">C        <span class="number">11.1</span><span class="number">.6</span><span class="number">.0</span>/<span class="number">24</span> is directly connected, Loopback6</span><br><span class="line">L        <span class="number">11.1</span><span class="number">.6</span><span class="number">.1</span>/<span class="number">32</span> is directly connected, Loopback6</span><br><span class="line">C        <span class="number">11.1</span><span class="number">.7</span><span class="number">.0</span>/<span class="number">24</span> is directly connected, Loopback7</span><br><span class="line">L        <span class="number">11.1</span><span class="number">.7</span><span class="number">.1</span>/<span class="number">32</span> is directly connected, Loopback7</span><br><span class="line">C        <span class="number">11.1</span><span class="number">.8</span><span class="number">.0</span>/<span class="number">24</span> is directly connected, Loopback8</span><br><span class="line">L        <span class="number">11.1</span><span class="number">.8</span><span class="number">.1</span>/<span class="number">32</span> is directly connected, Loopback8</span><br><span class="line">      <span class="number">12.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">8</span> is variably subnetted, <span class="number">4</span> subnets, <span class="number">2</span> masks</span><br><span class="line">O        <span class="number">12.1</span><span class="number">.1</span><span class="number">.1</span>/<span class="number">32</span> [<span class="number">110</span>/<span class="number">65</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">0</span></span><br><span class="line">O        <span class="number">12.1</span><span class="number">.2</span><span class="number">.1</span>/<span class="number">32</span> [<span class="number">110</span>/<span class="number">65</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">0</span></span><br><span class="line">C        <span class="number">12.12</span><span class="number">.12</span><span class="number">.0</span>/<span class="number">24</span> is directly connected, Serial1/<span class="number">0</span></span><br><span class="line">L        <span class="number">12.12</span><span class="number">.12</span><span class="number">.1</span>/<span class="number">32</span> is directly connected, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">13.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">8</span> is variably subnetted, <span class="number">4</span> subnets, <span class="number">2</span> masks</span><br><span class="line">O        <span class="number">13.1</span><span class="number">.1</span><span class="number">.1</span>/<span class="number">32</span> [<span class="number">110</span>/<span class="number">65</span>] via <span class="number">13.13</span><span class="number">.13</span><span class="number">.3</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">1</span></span><br><span class="line">O        <span class="number">13.1</span><span class="number">.2</span><span class="number">.1</span>/<span class="number">32</span> [<span class="number">110</span>/<span class="number">65</span>] via <span class="number">13.13</span><span class="number">.13</span><span class="number">.3</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">1</span></span><br><span class="line">C        <span class="number">13.13</span><span class="number">.13</span><span class="number">.0</span>/<span class="number">24</span> is directly connected, Serial1/<span class="number">1</span></span><br><span class="line">L        <span class="number">13.13</span><span class="number">.13</span><span class="number">.1</span>/<span class="number">32</span> is directly connected, Serial1/<span class="number">1</span></span><br><span class="line">      <span class="number">14.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">32</span> is subnetted, <span class="number">2</span> subnets</span><br><span class="line">O IA     <span class="number">14.1</span><span class="number">.1</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">75</span>] via <span class="number">13.13</span><span class="number">.13</span><span class="number">.3</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">1</span></span><br><span class="line">O IA     <span class="number">14.1</span><span class="number">.2</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">75</span>] via <span class="number">13.13</span><span class="number">.13</span><span class="number">.3</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">1</span></span><br><span class="line">      <span class="number">15.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">32</span> is subnetted, <span class="number">2</span> subnets</span><br><span class="line">O IA     <span class="number">15.1</span><span class="number">.1</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">75</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">13</span>:<span class="number">12</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">15.1</span><span class="number">.2</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">75</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">13</span>:<span class="number">12</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">16.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">32</span> is subnetted, <span class="number">2</span> subnets</span><br><span class="line">O IA     <span class="number">16.1</span><span class="number">.1</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">85</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">13</span>:<span class="number">12</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">16.1</span><span class="number">.2</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">85</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">13</span>:<span class="number">12</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">18.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">32</span> is subnetted, <span class="number">2</span> subnets</span><br><span class="line">O IA     <span class="number">18.1</span><span class="number">.1</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1139</span>] via <span class="number">13.13</span><span class="number">.13</span><span class="number">.3</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">1</span></span><br><span class="line">                  [<span class="number">110</span>/<span class="number">1139</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">13</span>:<span class="number">12</span>, Serial1/<span class="number">0</span></span><br><span class="line">O IA     <span class="number">18.1</span><span class="number">.2</span><span class="number">.1</span> [<span class="number">110</span>/<span class="number">1139</span>] via <span class="number">13.13</span><span class="number">.13</span><span class="number">.3</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">1</span></span><br><span class="line">                  [<span class="number">110</span>/<span class="number">1139</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">13</span>:<span class="number">12</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">19.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">2</span> subnets</span><br><span class="line">O E2     <span class="number">19.1</span><span class="number">.1</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">0</span></span><br><span class="line">O E2     <span class="number">19.1</span><span class="number">.2</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">25.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">25.25</span><span class="number">.25</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">74</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">29.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O E2     <span class="number">29.29</span><span class="number">.29</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">34.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">34.34</span><span class="number">.34</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">74</span>] via <span class="number">13.13</span><span class="number">.13</span><span class="number">.3</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">1</span></span><br><span class="line">      <span class="number">47.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">47.47</span><span class="number">.47</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">84</span>] via <span class="number">13.13</span><span class="number">.13</span><span class="number">.3</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">1</span></span><br><span class="line">      <span class="number">56.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">56.56</span><span class="number">.56</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">84</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">13</span>:<span class="number">12</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">67.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">67.67</span><span class="number">.67</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">94</span>] via <span class="number">13.13</span><span class="number">.13</span><span class="number">.3</span>, <span class="number">00</span>:<span class="number">18</span>:<span class="number">29</span>, Serial1/<span class="number">1</span></span><br><span class="line">                    [<span class="number">110</span>/<span class="number">94</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">13</span>:<span class="number">12</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">78.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O IA     <span class="number">78.78</span><span class="number">.78</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">1138</span>] via <span class="number">13.13</span><span class="number">.13</span><span class="number">.3</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">1</span></span><br><span class="line">                    [<span class="number">110</span>/<span class="number">1138</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">13</span>:<span class="number">12</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">106.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">1</span> subnets</span><br><span class="line">O E2     <span class="number">106.106</span><span class="number">.106</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">13</span>:<span class="number">07</span>, Serial1/<span class="number">0</span></span><br><span class="line">      <span class="number">172.16</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span> is subnetted, <span class="number">2</span> subnets</span><br><span class="line">O IA     <span class="number">172.16</span><span class="number">.47</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">1074</span>] via <span class="number">13.13</span><span class="number">.13</span><span class="number">.3</span>, <span class="number">00</span>:<span class="number">37</span>:<span class="number">21</span>, Serial1/<span class="number">1</span></span><br><span class="line">O IA     <span class="number">172.16</span><span class="number">.57</span><span class="number">.0</span> [<span class="number">110</span>/<span class="number">1074</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">13</span>:<span class="number">12</span>, Serial1/<span class="number">0</span></span><br><span class="line">O E2  <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">13</span>:<span class="number">07</span>, Serial1/<span class="number">0</span></span><br><span class="line">O E2  <span class="number">192.168</span><span class="number">.2</span><span class="number">.0</span>/<span class="number">24</span> [<span class="number">110</span>/<span class="number">20</span>] via <span class="number">12.12</span><span class="number">.12</span><span class="number">.2</span>, <span class="number">00</span>:<span class="number">13</span>:<span class="number">07</span>, Serial1/<span class="number">0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看R1的拓扑表。存在类型1、类型3、类型4、类型5的LSA</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">R1#show ip ospf database                  </span><br><span class="line"></span><br><span class="line">            OSPF Router <span class="keyword">with</span> ID (<span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>) (Process ID <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                Router Link States (Area <span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum Link count</span><br><span class="line"><span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>         <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span>         <span class="number">533</span>         <span class="number">0x8000000E</span> <span class="number">0x006EC0</span> <span class="number">12</span></span><br><span class="line"><span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1490</span>        <span class="number">0x8000000B</span> <span class="number">0x00BC3B</span> <span class="number">4</span></span><br><span class="line"><span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1392</span>        <span class="number">0x8000000A</span> <span class="number">0x009D4C</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">                Summary Net Link States (Area <span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum</span><br><span class="line"><span class="number">14.1</span><span class="number">.1</span><span class="number">.1</span>        <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x004BF5</span></span><br><span class="line"><span class="number">14.1</span><span class="number">.1</span><span class="number">.1</span>        <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1392</span>        <span class="number">0x80000007</span> <span class="number">0x00B955</span></span><br><span class="line"><span class="number">14.1</span><span class="number">.2</span><span class="number">.1</span>        <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x0040FF</span></span><br><span class="line"><span class="number">14.1</span><span class="number">.2</span><span class="number">.1</span>        <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1392</span>        <span class="number">0x80000007</span> <span class="number">0x00AE5F</span></span><br><span class="line"><span class="number">15.1</span><span class="number">.1</span><span class="number">.1</span>        <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x00D641</span></span><br><span class="line"><span class="number">15.1</span><span class="number">.1</span><span class="number">.1</span>        <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1160</span>        <span class="number">0x80000001</span> <span class="number">0x00201C</span></span><br><span class="line"><span class="number">15.1</span><span class="number">.2</span><span class="number">.1</span>        <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">896</span>         <span class="number">0x80000001</span> <span class="number">0x00CB4B</span></span><br><span class="line"><span class="number">15.1</span><span class="number">.2</span><span class="number">.1</span>        <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1160</span>        <span class="number">0x80000001</span> <span class="number">0x001526</span></span><br><span class="line"><span class="number">16.1</span><span class="number">.1</span><span class="number">.1</span>        <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x002EDE</span></span><br><span class="line"><span class="number">16.1</span><span class="number">.1</span><span class="number">.1</span>        <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1213</span>        <span class="number">0x80000008</span> <span class="number">0x006691</span></span><br><span class="line"><span class="number">16.1</span><span class="number">.2</span><span class="number">.1</span>        <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x0023E8</span></span><br><span class="line"><span class="number">16.1</span><span class="number">.2</span><span class="number">.1</span>        <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1213</span>        <span class="number">0x80000008</span> <span class="number">0x005B9B</span></span><br><span class="line"><span class="number">18.1</span><span class="number">.1</span><span class="number">.1</span>        <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x006583</span></span><br><span class="line"><span class="number">18.1</span><span class="number">.1</span><span class="number">.1</span>        <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">392</span>         <span class="number">0x80000006</span> <span class="number">0x003DA2</span></span><br><span class="line"><span class="number">18.1</span><span class="number">.2</span><span class="number">.1</span>        <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x005A8D</span></span><br><span class="line"><span class="number">18.1</span><span class="number">.2</span><span class="number">.1</span>        <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">392</span>         <span class="number">0x80000006</span> <span class="number">0x0032AC</span></span><br><span class="line"><span class="number">25.25</span><span class="number">.25</span><span class="number">.0</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1490</span>        <span class="number">0x80000007</span> <span class="number">0x001EBB</span></span><br><span class="line"><span class="number">25.25</span><span class="number">.25</span><span class="number">.0</span>      <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1160</span>        <span class="number">0x80000001</span> <span class="number">0x00D722</span></span><br><span class="line"><span class="number">34.34</span><span class="number">.34</span><span class="number">.0</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x00B032</span></span><br><span class="line"><span class="number">34.34</span><span class="number">.34</span><span class="number">.0</span>      <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1392</span>        <span class="number">0x80000007</span> <span class="number">0x00BAFF</span></span><br><span class="line"><span class="number">47.47</span><span class="number">.47</span><span class="number">.0</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x003C43</span></span><br><span class="line"><span class="number">47.47</span><span class="number">.47</span><span class="number">.0</span>      <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1392</span>        <span class="number">0x80000007</span> <span class="number">0x004940</span></span><br><span class="line"><span class="number">56.56</span><span class="number">.56</span><span class="number">.0</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x002E4A</span></span><br><span class="line"><span class="number">56.56</span><span class="number">.56</span><span class="number">.0</span>      <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1213</span>        <span class="number">0x80000008</span> <span class="number">0x00CA8E</span></span><br><span class="line"><span class="number">67.67</span><span class="number">.67</span><span class="number">.0</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x000548</span></span><br><span class="line"><span class="number">67.67</span><span class="number">.67</span><span class="number">.0</span>      <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1213</span>        <span class="number">0x80000008</span> <span class="number">0x00D869</span></span><br><span class="line"><span class="number">78.78</span><span class="number">.78</span><span class="number">.0</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x0064AF</span></span><br><span class="line"><span class="number">78.78</span><span class="number">.78</span><span class="number">.0</span>      <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">392</span>         <span class="number">0x80000006</span> <span class="number">0x003CCE</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.47</span><span class="number">.0</span>     <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x008CDA</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.47</span><span class="number">.0</span>     <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">392</span>         <span class="number">0x80000006</span> <span class="number">0x003119</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.57</span><span class="number">.0</span>     <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x00EA5E</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.57</span><span class="number">.0</span>     <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">392</span>         <span class="number">0x80000006</span> <span class="number">0x00F55E</span></span><br><span class="line"></span><br><span class="line">                Summary ASB Link States (Area <span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum</span><br><span class="line"><span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">892</span>         <span class="number">0x80000001</span> <span class="number">0x00F447</span></span><br><span class="line"><span class="number">6.6</span><span class="number">.6</span><span class="number">.6</span>         <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">895</span>         <span class="number">0x80000001</span> <span class="number">0x00F215</span></span><br><span class="line"><span class="number">6.6</span><span class="number">.6</span><span class="number">.6</span>         <span class="number">3.3</span><span class="number">.3</span><span class="number">.3</span>         <span class="number">1136</span>        <span class="number">0x8000000C</span> <span class="number">0x0023CB</span></span><br><span class="line"></span><br><span class="line">                Type<span class="number">-5</span> AS External Link States</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum Tag</span><br><span class="line"><span class="number">19.1</span><span class="number">.1</span><span class="number">.0</span>        <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1490</span>        <span class="number">0x80000006</span> <span class="number">0x0092EB</span> <span class="number">0</span></span><br><span class="line"><span class="number">19.1</span><span class="number">.2</span><span class="number">.0</span>        <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1490</span>        <span class="number">0x80000006</span> <span class="number">0x0087F5</span> <span class="number">0</span></span><br><span class="line"><span class="number">29.29</span><span class="number">.29</span><span class="number">.0</span>      <span class="number">2.2</span><span class="number">.2</span><span class="number">.2</span>         <span class="number">1490</span>        <span class="number">0x80000006</span> <span class="number">0x0089B2</span> <span class="number">0</span></span><br><span class="line"><span class="number">106.106</span><span class="number">.106</span><span class="number">.0</span>   <span class="number">6.6</span><span class="number">.6</span><span class="number">.6</span>         <span class="number">968</span>         <span class="number">0x80000006</span> <span class="number">0x003212</span> <span class="number">0</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>     <span class="number">6.6</span><span class="number">.6</span><span class="number">.6</span>         <span class="number">968</span>         <span class="number">0x80000006</span> <span class="number">0x006CAC</span> <span class="number">0</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.0</span>     <span class="number">6.6</span><span class="number">.6</span><span class="number">.6</span>         <span class="number">967</span>         <span class="number">0x80000006</span> <span class="number">0x0061B6</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><strong>9、将area 123设置为stub区域，然后观察R1上的OSPF数据库和R1路由条目的变化，并测试R1与其他区域的连通性</strong></p>
<ul>
<li>查看R1上的数据库摘要信息</li>
</ul>
<blockquote>
<p>总共有44条LSA。其中类型1有3条，类型3有32条，类型4有3条，类型5有6条</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCMS1.png"></p>
<ul>
<li>将区域123设置为stub区域</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R1(config)#router ospf 1</span><br><span class="line">R1(config-router)#area 123 stub </span><br><span class="line"></span><br><span class="line">R2(config)#router ospf 1</span><br><span class="line">R2(config-router)#area 123 stub</span><br><span class="line"></span><br><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#area 123 stub</span><br></pre></td></tr></table></figure>

<ul>
<li>再次查看R1的数据库摘要</li>
</ul>
<blockquote>
<p>由于将区域123设置为stub区域，所以R2、R3会将类型4和类型5的LSA过滤，并下发三类的默认路由</p>
<p>此时总共有37条LSA。其中类型1有3条，类型3有34条</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCZo4.png"></p>
<blockquote>
<p>R2和R3分别向区域123下发了一条类型3的默认路由</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCQQx.png"></p>
<p><strong>10、将area 123设置为totally stub区域，再次观察R1上的OSPF数据库和路由条目的变化，并测试R1与其他区域的连通性</strong></p>
<ul>
<li>在ABR上进行配置</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R2(config)#router ospf 1</span><br><span class="line">R2(config-router)#area 123 stub no-summary </span><br><span class="line"></span><br><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#area 123 stub no-summary </span><br></pre></td></tr></table></figure>

<ul>
<li>查看R1的OSPF数据库的摘要信息</li>
</ul>
<blockquote>
<p>由于将区域123配置成了完全末梢区域，所以R2、R3会在末梢区域的基础上，在将类型3的LSA进行过滤</p>
<p>此时，总共有5条LSA。其中类型1有3条，类型3有2条</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCly6.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVC8eO.png"></p>
<p><strong>11、将area 4567设置为NSSA区域，再次观察各路由条目的变化，完成必要的配置，实现全网可达</strong></p>
<ul>
<li>将区域4567设置为NSSA</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R4(config)#router ospf 1</span><br><span class="line">R4(config-router)#area 4567 nssa</span><br><span class="line"></span><br><span class="line">R5(config)#router ospf 1</span><br><span class="line">R5(config-router)#area 4567 nssa</span><br><span class="line"></span><br><span class="line">R6(config)#router ospf 1</span><br><span class="line">R6(config-router)#area 4567 nssa</span><br><span class="line"></span><br><span class="line">R7(config)#router ospf 1</span><br><span class="line">R7(config-router)#area 4567 nssa</span><br></pre></td></tr></table></figure>

<ul>
<li><p>由于配置成NSSA，所以类型4、类型5的LSA将被过滤，并且不会下发三类默认路由</p>
</li>
<li><p>在R6上进行ping测试</p>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVC1OK.png"></p>
<ul>
<li>R4、R5下发默认路由</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R4(config)#router ospf 1 </span><br><span class="line">R4(config-router)#area 4567 nssa default-information-originate </span><br><span class="line"></span><br><span class="line">R5(config)#router ospf 1    </span><br><span class="line">R5(config-router)#area 4567 nssa default-information-originate </span><br></pre></td></tr></table></figure>

<ul>
<li>查看R6的数据库，由R4和R5下发的默认路由将以类型7的LSA存在</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCGwD.png"></p>
<ul>
<li>此时R6可以正常访问外部网络</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCJTe.png"></p>
<p><strong>12、将area 4567设置为totally NSSA区域，再次观察各路由条目的变化，完成必要的配置，实现全网可达</strong></p>
<ul>
<li>在R4和R5上将区域4567配置成totally NSSA区域</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">R4(config)#router ospf 1 </span><br><span class="line">R4(config-router)#area 4567 nssa no-summary </span><br><span class="line"></span><br><span class="line">R5(config)#router ospf 1</span><br><span class="line">R5(config-router)#area 4567 nssa no-summary </span><br></pre></td></tr></table></figure>

<ul>
<li>此时R4和R5将会下发三类默认路由</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCtFH.png"></p>
<ul>
<li>在R6上进行ping测试</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s3.ax1x.com/2020/11/17/DVCNYd.png"></p>
]]></content>
      <categories>
        <category>实验</category>
      </categories>
      <tags>
        <tag>OSPF</tag>
      </tags>
  </entry>
  <entry>
    <title>VTP协议</title>
    <url>/2020/09/03/VTP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>　　VTP（VLAN Trunking Protocol）用来在整个交换网络中分发和同步VLAN数据库，可以将配置错误和配置不一致等问题导致障碍的几率降至最低。这些问题包括重复的VLAN名称、不正确的VLAN类型，以及安全性违规等。</p>
<a id="more"></a>

<h3 id="1、VTP概述"><a href="#1、VTP概述" class="headerlink" title="1、VTP概述"></a>1、VTP概述</h3><p>　　VTP是一种通过添加、删除、修改VLAN等管理操作，来维护网络内VLAN配置一致性的2层协议。</p>
<p>　　交换机只能通过802.1Q或ISL Trunk传输VTP消息。Cisco交换机会通过管理VLAN（默认为VLAN 1），使用2层组播数据帧每5分钟传输一次VTP汇总通告。在单台VTP服务器上的VLAN配置会通过Trunk链路宣告给网络中的所有互联交换机。例如，当管理者添加了一个新的VLAN，那么VTP会将VLAN信息宣告给VTP域内的所有交换机，每台交换机会同步VLAN信息，再将这些信息合并成新的VLAN数据库。</p>
<p>　　VTP域是由一台或多台共享相同VTP配置的互联的交换机组成的，每台交换机只能处于一个VTP域中。默认情况下，Cisco Catalyst交换机处于”no-management-domain”状态（null状态），直到通过Trunk链路收到了带有域名的VTP通告，或手动配置了VTP域名。配置应在VTP服务器上执行，随后会通过Trunk链路宣告给网络中的所有互联交换机。当VTP域名及VTP密码匹配之后，配置信息将会同步。</p>
<p>　　<span style="color:red">VTP是Cisco私有的协议。</span></p>
<h3 id="2、VTP模式"><a href="#2、VTP模式" class="headerlink" title="2、VTP模式"></a>2、VTP模式</h3><p>　　VTP可以工作在3种模式下：服务器（server）模式、客户端（client）模式、透明（transparent）模式。VTP服务器模式是默认的模式，不过在未配置或未学习到 VTP域名时，VLAN信息是不会宣告到网络中的。需要注意的是，VTP消息仅会在Trunk链路上传播。VTP客户端模式与服务器模式相似，在Trunk链路上发送和接收VTP更新。处于VTP客户端模式的交换机无法创建、删除或修改VLAN，其学习到的VLAN都是由域内的VTP服务器模式的交换机所创建的。处于VTP透明模式的交换机对VLAN进行操作时，配置仅会影响到本地交换机，VLAN的修改信息并不会宣告给VTP域中的其他交换机，但是在该模式下的交换机可以将收到的VTP宣告转发出去。三种模式总结如下所示：</p>
<ul>
<li>服务器模式<ul>
<li>可以创建、删除、修改VLAN</li>
<li>可以发送及转发VTP通告</li>
<li>同步VLAN的配置</li>
</ul>
</li>
<li>客户端模式<ul>
<li>不能创建、删除、修改VLAN</li>
<li>可以发送及转发VTP通告</li>
<li>同步VLAN的配置</li>
</ul>
</li>
<li>透明模式<ul>
<li>可以创建、删除、修改<span style="color:red">本地VLAN</span></li>
<li>可以转发VTP通告</li>
<li>不同步VLAN配置</li>
</ul>
</li>
</ul>
<h3 id="3、VTP版本"><a href="#3、VTP版本" class="headerlink" title="3、VTP版本"></a>3、VTP版本</h3><p>　　Ｃisco Catalyst交换机支持三种不同版本的VTP：版本1、版本2、版本3。不同版本的VTP之间无法通信，因此管理者必须确定使用哪个版本的VTP。此外，出于稳定性方面的考虑，Cisco建议只使用一种版本的VTP。</p>
<p>　　Ｃisco交换机上默认启用的VTP版本是版本1。相比于旧版本的VTP，新版本的VTP支持以下特性：</p>
<ul>
<li><strong>与版本无关的透明模式：</strong>在VTP版本1中，VTP透明模式的网络设备会检查VTP消息中的域名和版本信息，而且只有当域名和版本号相匹配时才会转发此消息。由于Cisco IOS软件中只支持一个VTP域，因此在VTP版本2中会直接转发VTP消息，而不会检查其版本号。</li>
<li><strong>一致性检查：</strong>在VTP版本2中，会对VLAN名称及VLAN编号进行VLAN一致性检查。不过，只有通过命令行界面（CLI）或简单网络管理协议（SNMP）输入的信息才会触发一致性检查，如果新信息是通过VTP消息或NVRAM中读取的，则不会执行一致性检查。如果接收到的VTP消息MD5比对正确，VTP版本2会直接接收此消息，而不会执行一致性检查。</li>
<li><strong>支持令牌环：</strong>VTP版本2支持令牌环交换和令牌环VLAN。</li>
<li><strong>支持未识别TLV（Type-Length-Value）：</strong>在VTP版本1中，未被识别的VTP消息会被直接丢弃，而VTP版本2会将未识别的消息转发出去并将其保存在NVRAM中。</li>
<li><strong>支持扩展VLAN：</strong>VTP版本3可支持VLAN1025<del>4094的消息通告（VLAN编号1006</del>1024以及4095~4096被保留）。</li>
<li><strong>域名不自动学习：</strong>在VTP版本2中，交换机会从接收的VTP信息中自动学习到新的VTP域名。由于这种行为比较危险，因此在VTP版本3中，此功能需要手动强制开启。</li>
<li><strong>更优的安全性：</strong>VTP域密码以一种安全的方式传输并存储在交换机数据库中。</li>
<li><strong>更优的数据库宣告机制：</strong>只有主用服务器允许更新其他设备，而且每个VTP域内一台主用服务器。</li>
<li><strong>支持多生成树（MST）：</strong>VTP版本3加入了对MST进程通告的支持。</li>
</ul>
<h3 id="4、VTP修剪"><a href="#4、VTP修剪" class="headerlink" title="4、VTP修剪"></a>4、VTP修剪</h3><p>　　VTP修剪（pruning）技术使用VLAN通告消息来判断Trunk连接何时正在泛洪不必要的流量。默认情况下，Trunk连接会承受VTP管理域中所有的VLAN流量，但一般情况下，企业网络中的多数交换机并没有为每个VLAN都配置本地端口。</p>
<p>　　VTP修剪技术可以将可泛洪的流量限制在合适的范围内，仅允许必要的VLAN流量通过Trunk链路，从而提高链路的可用带宽。如下图所示的交换网络启用了VTP的修剪功能，从Red VLAN中的主机或工作站发出的广播流量不会转发给交换机3、5和6，因为Red VLAN已经在交换机2、4的链路上被修剪掉了。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/04/wAKLaq.png" alt="VTP修剪"></p>
<p>　　无论是否使用了VTP修剪功能，Catalyst交换机都会为每个VLAN运行一个STP实例，即使VLAN中没有活动端口，或VTP修剪已经将VLAN从接口上移除了出去。因此，VTP修剪能够防止将流量泛洪传播给没有特定VLAN成员的交换机。不过，VTP修剪不会将已被修剪的VLAN信息从交换机上删除。</p>
<h3 id="5、VTP认证"><a href="#5、VTP认证" class="headerlink" title="5、VTP认证"></a>5、VTP认证</h3><p>　　管理员可以使用VTP密码特性来增强VTP域的安全性。必须要保证VTP域内的所有交换机使用了相同的密码及域名；否则，交换机无法成为VTP域的成员。Cisco交换机使用MD5算法将密码编码成16字节的密码。这些密码会在VTP汇总通告中进行传播。在VTP中，密码是区分大小写的，长度为8~64个字符。建议在所有VTP域中使用VTP认证特性。</p>
<h3 id="6、VTP通告"><a href="#6、VTP通告" class="headerlink" title="6、VTP通告"></a>6、VTP通告</h3><p>　　VTP通告会在整个管理域中泛洪。交换机默认每隔5分钟发送过一次VTP通告，当VLAN的配置发生变化时会触发发送VTP通告。VTP通告使用组播帧在native VLAN（默认为VLAN 1）中以不打标签的方式传播。每个VTP通告中都包含了一个配置修订号。配置修订号越高，表示VLAN信息越新。配置修订号（configuration revision number）是VTP中非常重要的参数。每次VTP服务器在对VLAN进行操作（增加、删除、修改VLAN信息）时，都会将配置修订号加1。随后VTP服务器发送的VTP通告将带有新的配置修订号。如果VTP域内的其他交换机收到了带有更高配置修订号的VTP通告，将会使用新收到的VLAN信息更新自身的VLAN配置。由于VTP透明模式的交换机不会与域内的其他交换机同步VLAN的信息，所以其配置修订号或VLAN数据库将不会改变（始终为0）。</p>
<blockquote>
<p>注意：根据VTP的更新规则，如果一台删除了所有VLAN并带有更高的配置修订号的VTP服务器加入到VTP域中，那么域内所有设备上的VLAN都会被覆盖删除</p>
</blockquote>
<p>　　设备在接收到VTP通告后，需要对一些参数进行检查，之后才会合并其中的VLAN信息。首先就是管理域名和密码必须与本地交换机配置的一致。其次，如果配置修订号比当前交换机的高时，交换机才会合并这条VLAN通告信息。在许多Cisco Catalyst交换机上，可以通过修改VTP域名称的方式重置配置修订号；还可以将其模式修改成透明模式，再改回先前的服务器或客户端模式。这两种方法都可以让配置修订号归零。</p>
<h3 id="7、VTP消息类型"><a href="#7、VTP消息类型" class="headerlink" title="7、VTP消息类型"></a>7、VTP消息类型</h3><ul>
<li>汇总通告（Summary Advertisement）</li>
</ul>
<p>　　默认情况下，Catalyst交换机会每5分钟发送一次汇总通告消息。汇总通告消息会通知邻接Catalyst交换机当前的VTP域名及配置修订号。当交换机接收到汇总通告数据包时，会将数据包中的域名与本地配置的VTP域名相比较。如果名称不同，交换机就会忽略这个数据包。如果域名相同，交换机会继续比较配置修订号，如果自身的配置修订号高于或等于接收数据包的修订号，数据包也会被忽略。如果本地的配置修订号比收到的低，交换机则会发送一个请求通告消息。</p>
<ul>
<li>子集通告（Subnet Advertisement）</li>
</ul>
<p>　　当管理员在Catalyst交换机上添加、删除或修改VLAN时，配置修订号会相应地增加，并且会发送一条汇总通告消息。随后，还会发送一条或多条子集通告消息。每条自己通告包含一个VLAN信息列表。如果VLAN的数量很多，就会以多条子集通告的形式通告所有VLAN。</p>
<ul>
<li>请求通告（Request Advertisement）</li>
</ul>
<p>　　当交换机重启、VTP域名被修改或当交换机收到了一个配置修订号高于自身的VTP汇总通告时，交换机会发送VTP请求通告消息。在收到了一个请求通告后，VTP设备会发送一条汇总通告消息，随后再发送一条或多条子集通告消息。</p>
<h3 id="8、VTP配置实例"><a href="#8、VTP配置实例" class="headerlink" title="8、VTP配置实例"></a>8、VTP配置实例</h3><blockquote>
<p>VTP配置所使用的拓扑如下图所示，其中SW1配置成了VTP服务器模式；SW2配置成了VTP客户端模式；SW3配置成了透明模式</p>
</blockquote>
<blockquote>
<p>在进行VTP配置前，应注意将三台交换机之间的链路配置成Trunk链路，因为VTP消息仅会在Trunk链路上传播</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/04/wABjxJ.png"></p>
<ul>
<li>在所有交换机上配置VTP，SW1配置成服务器模式，SW2配置成客户端模式，SW3配置成透明模式</li>
</ul>
<blockquote>
<p>默认状态下的交换机运行的是VTP版本1</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW1(config)#vtp password cisco</span><br><span class="line">SW1(config)#vtp mode server</span><br><span class="line">SW1(config)#vtp domain shain</span><br><span class="line">SW1(config)#vtp version 1</span><br><span class="line"></span><br><span class="line">SW2(config)#vtp password cisco</span><br><span class="line">SW2(config)#vtp mode client </span><br><span class="line">SW2(config)#vtp domain shain</span><br><span class="line">SW2(config)#vtp version 1</span><br><span class="line"></span><br><span class="line">SW3(config)#vtp password cisco</span><br><span class="line">SW3(config)#vtp mode transparent </span><br><span class="line">SW3(config)#vtp domain shain</span><br><span class="line">SW3(config)#vtp version 1</span><br></pre></td></tr></table></figure>

<ul>
<li>在SW2上输入命令<span style="color:red">show vtp status</span>查看本交换机的VTP状态信息</li>
</ul>
<blockquote>
<p>能看到SW2配置成了VTP客户端模式（client），处于VTP域shain内</p>
</blockquote>
<blockquote>
<p>当前交换机上只有5个默认的VLAN：VLAN1和VLAN1002~1005。VTP配置修订号为0。此值为0以为着这台交换机的VLAN数据库未做任何修改。每次对VLAN进行操作（增加、删除、修改），配置修订号都会加1。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/04/wADxfS.png"></p>
<ul>
<li>在SW1上输入命令show vtp status</li>
</ul>
<blockquote>
<p>可以看到SW1配置成了VTP服务器模式（server）</p>
</blockquote>
<blockquote>
<p>与SW2一样，当前设备上只有默认VLAN。VTP配置修订号为0，VTP域名为shain。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wAroNV.png"></p>
<ul>
<li>在SW3输入命令show vtp status</li>
</ul>
<blockquote>
<p>SW3配置成了VTP透明模式（transparent）</p>
</blockquote>
<blockquote>
<p>和SW1、SW2一样，当前设备上只有默认VLAN。VTP配置修订号为0，VTP域名为shain</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wAsQgg.png"></p>
<ul>
<li>在SW1上创建VLAN 10</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SW1(config)<span class="meta">#vlan 10</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：在VTP客户端模式下是无法添加VLAN的。若在SW2上尝试添加VLAN 5，SW2则会提示如下信息：</p>
<p>SW2(config)#vlan 5<br>VTP VLAN configuration not allowed when device is in CLIENT mode.</p>
</blockquote>
<ul>
<li>在SW1上检查VLAN数据库及VTP状态</li>
</ul>
<blockquote>
<p>使用命令show vlan和命令show vtp status</p>
<p>VLAN 10此时已经出现在了SW1的数据库中</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wA6rA1.png"></p>
<blockquote>
<p>SW1上的配置修订号也增加到了1</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wA617n.png"></p>
<ul>
<li>检查SW2上的VLAN数据库和VTP状态</li>
</ul>
<blockquote>
<p>使用命令show vlan和命令show vtp status</p>
<p>由于SW2为VTP客户端模式，因此从SW1学习到了VLAN 10</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wA6wnJ.png"></p>
<blockquote>
<p>SW2当前的配置修订号与SW1相同，代表两台交换机拥有相同的VLAN数据库</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wA62cD.png"></p>
<ul>
<li>检查SW3上的VLAN数据库和VTP状态</li>
</ul>
<blockquote>
<p>使用命令show vlan和命令show vtp status</p>
<p>由于SW3处于VTP透明模式，因此永远不会和其他处于任何VTP模式的交换机同步自身的VLAN数据库</p>
<p>从某种程度上讲，启用VTP透明模式就等同于关闭了VTP功能</p>
</blockquote>
<blockquote>
<p>注意此时SW3上并没有VLAN 10</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wAcAu4.png"></p>
<blockquote>
<p>VTP透明模式的交换机配置修订号始终为0</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wAcM8K.png"></p>
<ul>
<li>在SW3上创建VLAN 20</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW3(config)#vlan 20</span><br></pre></td></tr></table></figure>

<ul>
<li>在三台交换机上检查VLAN 20是否存在</li>
</ul>
<blockquote>
<p>从以下显示结果中可以看出VTP透明模式的交换机可以创建、删除本地VLAN，但是不会将本地VLAN的信息通告给其他交换机</p>
<p>VLAN 20仅存在与SW3上</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wAcYVA.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wAcN5t.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wActUI.png"></p>
<h3 id="9、VTP配置覆盖（VTP常见问题）"><a href="#9、VTP配置覆盖（VTP常见问题）" class="headerlink" title="9、VTP配置覆盖（VTP常见问题）"></a>9、VTP配置覆盖（VTP常见问题）</h3><p>　　VTP的一个常见问题就是由于管理员的粗心大意，错误地将整个网络中的VLAN数据库配置删除。因此，当向网络中添加一台交换机时，一定不能将错误的信息注入到现网中。如下图所示，SW1是一台VTP服务器，SW2和SW3是VTP客户端。所有交换机同步后的配置修订号均为12，并带有VLAN 10、20、30和40。每台交换机上有多个用户连接到不同的VLAN。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wAg5fP.png"></p>
<ul>
<li>查看SW1上的VTP状态和VLAN数据库信息</li>
</ul>
<blockquote>
<p>SW2和SW3有着与SW1同样的配置修订号及VLAN信息，这是因为VTP已经完全同步</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wEfxTe.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wEhkOf.png"></p>
<ul>
<li>现在假定SW2发生了故障，从配线间取出了另外一台交换机来替代SW2</li>
</ul>
<blockquote>
<p>backup交换机配置了与其他两台交换机相同的VTP域名，VTP的配置修订号为29，比现网中的VTP修订号要高</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wE46K0.png"></p>
<blockquote>
<p>backup交换机的VLAN信息和VTP信息如下图所示</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wEIl6I.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wEIsBV.png"></p>
<blockquote>
<p>默认情况下，Cisco IOS VTP服务器和客户端会将VLAN信息保存在flash下的vlan.dat文件中，其中包括了VLAN表以及配置修订号。删除vlan.dat文件并重启交换机可以将VTP和VLAN信息彻底删除，其删除方式根据具体交换机型号而定。</p>
<p>处于VTP透明模式的交换机可以使用show running-config命令查看VLAN和VTP配置，这是由于配置是存放在配置文本文件中的，而不是vlan.dat。因此在VTP透明模式的交换机上执行erase startup-config命令的话，所有的VLAN信息都会被删除。</p>
</blockquote>
<ul>
<li>由于backup交换机带有更高的配置修订号，因此SW1和SW3都会与其同步。分别在SW1和SW3上查看VLAN和VTP状态</li>
</ul>
<blockquote>
<p>VLAN20、30、40将从SW1和SW3上删除，连接到这些VLAN的终端用户也会失去其连通性</p>
</blockquote>
<blockquote>
<p>查看SW1的VLAN信息和VTP状态</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wEbL6J.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wEqtA0.png"></p>
<blockquote>
<p>查看SW3上的VLAN信息和VTP状态</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wELA8U.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/05/wELkCT.png"></p>
<blockquote>
<p>因此，当一台带有更高配置修订号的交换机加入到VTP域中时，很有可能会导致重大的网络故障。当VTP客户端交换机加入到网络时，会发送一个自身数据库的汇总通告。也就是说，带有更高配置修订号的交换机，无论是服务器模式还是客户端模式，都会导致现网交换机的VTP配置覆盖（VLAN重新学习）。</p>
</blockquote>
<h3 id="10、VTP部署的推荐做法"><a href="#10、VTP部署的推荐做法" class="headerlink" title="10、VTP部署的推荐做法"></a>10、VTP部署的推荐做法</h3><p>　　VTP一般使用在新建网络中，用来减轻VLAN的配置工作。不过，随着网络规模数日渐增大，伴随而来的也有一些风险。如果VTP域内的某台VTP服务器意外地删除了一个VLAN，那么VTP域所在网络都会删除这个VLAN。已经预先配置过VLAN的交换机加入到了网络中，那么VTP域所在网络中的所有交换机的VLAN数据库都可能被覆盖。因此，部署VTP时建议先将所有交换机配置成VTP透明模式，并手动按需添加VLAN，尤其是在大型园区网环境中。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>交换</tag>
        <tag>VTP</tag>
      </tags>
  </entry>
  <entry>
    <title>生成树特性</title>
    <url>/2020/09/16/%E7%94%9F%E6%88%90%E6%A0%91%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>　　为了能够帮助STP实现更快的收敛，也能让协议的操作能够更好地利用现有的网络架构，这时就需要应用一些特性来过滤一些条件下BPDU的发送或接收，并改变网络拓扑变化时网络的响应方式。本文将介绍8种特性，用于优化管理STP。</p>
<a id="more"></a>

<blockquote>
<p>注：无特别说明，本文使用的STP的模式为PVST</p>
</blockquote>
<h3 id="1、PortFast"><a href="#1、PortFast" class="headerlink" title="1、PortFast"></a>1、PortFast</h3><blockquote>
<p>针对pvst、rstp、mst都有效</p>
</blockquote>
<p>（1）对象：连接终端设备的端口</p>
<p>（2）功能：可以使得接入端口（access）直接过渡到转发状态；当交换机PortFast端口up或down时，不会发送TCN BPDU</p>
<p>（3）配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不同镜像命令可能不同</span></span><br><span class="line">接口下:</span><br><span class="line">SW3(config-if)#spanning-tree portfast</span><br><span class="line">全局下:    <span class="comment">//(针对access端口才生效)</span></span><br><span class="line">SW3(config)#spanning-tree portfast default   </span><br><span class="line"><span class="comment">//查看portfast当前状态</span></span><br><span class="line">SW3#show spanning-tree interface e0/2 portfast </span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/wg1ddU.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//未开启PortFast，则Et0/2需经历30s时间才过渡到转发状态</span></span><br><span class="line">SW3#debug spanning-tree events </span><br><span class="line">Spanning Tree event debugging is on</span><br><span class="line">SW3(config)#int e0/2</span><br><span class="line">SW3(config-if)#no shutdown</span><br><span class="line">*Aug  <span class="number">6</span> <span class="number">13</span>:<span class="number">41</span>:<span class="number">02.355</span>: set portid: VLAN0001 Et0/<span class="number">2</span>: <span class="keyword">new</span> port id <span class="number">8003</span>    <span class="comment">//80表示端口优先级为128，03表示端口号为0/2</span></span><br><span class="line">*Aug  <span class="number">6</span> <span class="number">13</span>:<span class="number">41</span>:<span class="number">02.355</span>: STP: VLAN0001 Et0/<span class="number">2</span> -&gt; listening</span><br><span class="line">*Aug  <span class="number">6</span> <span class="number">13</span>:<span class="number">41</span>:<span class="number">17.362</span>: STP: VLAN0001 Et0/<span class="number">2</span> -&gt; learning</span><br><span class="line">*Aug  <span class="number">6</span> <span class="number">13</span>:<span class="number">41</span>:<span class="number">32.369</span>: STP[<span class="number">1</span>]: Generating TC trap <span class="keyword">for</span> port Ethernet0/<span class="number">2</span></span><br><span class="line">*Aug  <span class="number">6</span> <span class="number">13</span>:<span class="number">41</span>:<span class="number">32.369</span>: STP: VLAN0001 sent Topology Change Notice on Et0/<span class="number">0</span></span><br><span class="line">*Aug  <span class="number">6</span> <span class="number">13</span>:<span class="number">41</span>:<span class="number">32.369</span>: STP: VLAN0001 Et0/<span class="number">2</span> -&gt; forwarding</span><br><span class="line"></span><br><span class="line"><span class="comment">//在接口下开启PortFast特性</span></span><br><span class="line">SW3(config)#int e0/2</span><br><span class="line">SW3(config-if)#spanning-tree portfast edge</span><br><span class="line"><span class="comment">//开启debug，观察收敛情况，可知此时过渡到转发状态所需时间&lt;1s</span></span><br><span class="line">SW3#debug spanning-tree events </span><br><span class="line">Spanning Tree event debugging is on</span><br><span class="line">SW3(config)#int e0/2</span><br><span class="line">SW3(config-if)#no shutdown</span><br><span class="line">*Aug  <span class="number">6</span> <span class="number">13</span>:<span class="number">48</span>:<span class="number">52.275</span>: set portid: VLAN0001 Et0/<span class="number">2</span>: <span class="keyword">new</span> port id <span class="number">8003</span></span><br><span class="line">*Aug  <span class="number">6</span> <span class="number">13</span>:<span class="number">48</span>:<span class="number">52.275</span>: STP: VLAN0001 Et0/<span class="number">2</span> -&gt;jump to forwarding <span class="keyword">from</span> blocking</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/wgG6Qs.png"></p>
<blockquote>
<p>再次强调，只能在连接终端设备（PC或服务器）的端口上配置PortFast特性。否则，可能会产生环路并导致网络瘫痪。</p>
</blockquote>
<p>　　RSTP中配置PortFast特性的方法与STP相同。在RSTP中，连接单个主机的端口称作边缘端口（edge port）。在RSTP中启用PortFast，可以减少STP重计算的数量，因为在网络中若终端设备数量过多，且同时up或down的话，会导致过多的STP重计算。</p>
<h3 id="2、BPDU-Guard"><a href="#2、BPDU-Guard" class="headerlink" title="2、BPDU Guard"></a>2、BPDU Guard</h3><p>（1）对象：针对开启PortFast的端口</p>
<p>（2）功能：用于保护PortFast端口的完整性。为了防止接入端口存在错误性连接，把交换机接到开启PortFast的端口可能导致环路，所以提出BPDU Guard，负责监听BPDU，如果发现有监听到BPDU，可以认为当前存在误接，则直接把端口shutdown，状态置为err-disabled。</p>
<blockquote>
<p>建议在所有启用PortFast特性的端口上使用BPDU保护技术！</p>
</blockquote>
<p>（3）配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前提：配置BPDU保护的端口启用了PortFast特性</span></span><br><span class="line">接口下：</span><br><span class="line">SW3(config-if)#spanning-tree bpduguard enable</span><br><span class="line">全局下：</span><br><span class="line">SW3(config)#spanning-tree portfast bpduguard default    //在交换机的所有PortFast端口上配置BPDU保护</span><br><span class="line"></span><br><span class="line">SW3#show spanning-tree suammary totals    //查看BPDU保护配置</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复被置为err-diabled的端口：</span></span><br><span class="line">（<span class="number">1</span>）端口下操作</span><br><span class="line">SW3(config)#int e0/2</span><br><span class="line">SW3(config-if)#shutdown</span><br><span class="line">SW3(config-if)#no shutdown</span><br><span class="line">（<span class="number">2</span>）设定自动恢复的时间</span><br><span class="line">SW3(config)#errdisable recovery cause bpduguard   //原因；开启倒计时的开关</span><br><span class="line">SW3(config)#errdisable recovery interval 30   //设定倒计时的时间；默认为300s</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/wgdg9f.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//由于在e0/2端口开启了BPDU Guard，但是该端口连接了交换机，从该端口收到了BPDU，则会将此端口的状态置为err-disable，并shutdown</span></span><br><span class="line">SW3#debug spanning-tree events </span><br><span class="line">Spanning Tree event debugging is on</span><br><span class="line">*Aug  <span class="number">6</span> <span class="number">14</span>:<span class="number">30</span>:<span class="number">38.295</span>: set portid: VLAN0001 Et0/<span class="number">2</span>: <span class="keyword">new</span> port id <span class="number">8003</span></span><br><span class="line">*Aug  <span class="number">6</span> <span class="number">14</span>:<span class="number">30</span>:<span class="number">38.295</span>: STP: VLAN0001 Et0/<span class="number">2</span> -&gt;jump to forwarding <span class="keyword">from</span> blocking</span><br><span class="line">*Aug  <span class="number">6</span> <span class="number">14</span>:<span class="number">30</span>:<span class="number">38.402</span>: %SPANTREE<span class="number">-2</span>-BLOCK_BPDUGUARD: Received BPDU on port Et0/<span class="number">2</span> <span class="keyword">with</span> BPDU Guard enabled. Disabling port.</span><br><span class="line">*Aug  <span class="number">6</span> <span class="number">14</span>:<span class="number">30</span>:<span class="number">38.402</span>: %PM<span class="number">-4</span>-ERR_DISABLE: bpduguard error detected on Et0/<span class="number">2</span>, putting Et0/<span class="number">2</span> <span class="keyword">in</span> err-disable state</span><br><span class="line">*Aug  <span class="number">6</span> <span class="number">14</span>:<span class="number">30</span>:<span class="number">40.297</span>: %LINK<span class="number">-3</span>-UPDOWN: Interface Ethernet0/<span class="number">2</span>, changed state to down</span><br></pre></td></tr></table></figure>

<ul>
<li>查看端口信息可知状态为err-disabled</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/wgwl28.png"></p>
<ul>
<li>以下进行端口恢复（应先将误接的设备&lt;SW4&gt;移除）</li>
</ul>
<p><span style=color:red>方法一：</span>将该接口关闭再打开</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW3(config)#int e0/2</span><br><span class="line">SW3(config-if)#shutdown </span><br><span class="line">SW3(config-if)#no shutdown </span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/wgrAJI.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/wgrkFA.png"></p>
<p><span style=color:red>方法二：</span>设定自动恢复的时间</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">SW3(config)#errdisable recovery cause bpduguard</span><br><span class="line">SW3(config)#errdisable recovery interval 30</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/wgrW0e.png"></p>
<p>　　需要注意的是，BPDU保护技术并不能预防所有环路的产生。例如集线器（hub）和傻瓜交换机是不会发送BPDU的；因此，BPDU保护也就无法检测到这些设备。如果hub或非网管交换机同时连接到了网络中的两个位置，那么就有可能导致网络环路的产生。</p>
<h3 id="3、BPDU-Filter——慎用"><a href="#3、BPDU-Filter——慎用" class="headerlink" title="3、BPDU Filter——慎用"></a>3、BPDU Filter——<span style="color:red">慎用</span></h3><p>（1）对象：针对接入端口配置</p>
<p>（2）背景：如果连接的是接入端口，则不必要向对方发送BPDU，就提出BPDU Filter，过滤BPDU</p>
<p>（3）功能：如果在端口上启用，则代表禁用掉该端口的STP 功能；如果是在全局上启用，则代表仅仅过滤掉发出的BPDU</p>
<p>（4）配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在特定端口上启用BPDU过滤</span></span><br><span class="line">SW3(config-if)#spanning-tree bpdufilter enable</span><br><span class="line"><span class="comment">//在交换机的所有PortFast端口上启用BPDU过滤</span></span><br><span class="line">SW3(config)#spanning-tree portfast bpdufilter default </span><br><span class="line"><span class="comment">//查看特定端口上的BPDU过滤配置</span></span><br><span class="line">SW3#show spanning-tree interface e0/2 detail </span><br><span class="line"><span class="comment">//验证全局的BPDU过滤配置</span></span><br><span class="line">SW3#show spanning-tree summary totals </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果一台交换机同时配置了BPDU保护和BPDU过滤特性，只有BPDU过滤能够生效。因此，不要在同一端口上同时部署BPDU保护和BPDU过滤这两种机制。</p>
</blockquote>
<h3 id="4、UplinkFast——只对PVST生效"><a href="#4、UplinkFast——只对PVST生效" class="headerlink" title="4、UplinkFast——只对PVST生效"></a>4、UplinkFast——<span style="color:red">只对PVST生效</span></h3><p>（1）对象：在有阻塞端口的设备上配置才有效果</p>
<p>（2）功能：如果发现活跃端口失效，则可以立即启用阻塞端口，直接过渡到转发状态，节省30s</p>
<p>（3）配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//UplinkFast只能基于整台交换机开启或关闭，无法为单个VLAN启用UplinkFast</span></span><br><span class="line"><span class="comment">//启用UplinkFast特性</span></span><br><span class="line">SW3(config)#spanning-tree uplinkfast</span><br><span class="line"><span class="comment">//检查UplinkFast配置</span></span><br><span class="line">SW3#show spanning-tree uplinkfast </span><br></pre></td></tr></table></figure>

<ul>
<li>在SW3上开启UplinkFast后，将e0/0端口shutdown，则e0/1端口立刻变为转发状态</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/wggfJJ.png"></p>
<blockquote>
<p>注：RSTP协议中内置了UplinkFast机制，无需手动开启</p>
</blockquote>
<h3 id="5、BackboneFast——只对PVST生效"><a href="#5、BackboneFast——只对PVST生效" class="headerlink" title="5、BackboneFast——只对PVST生效"></a>5、BackboneFast——<span style="color:red">只对PVST生效</span></h3><p>（1）对象：监听上行链路的备份</p>
<p>（2）功能：如果有设备链路出现故障，则认为自己是根桥，会发送次级BPDU给所有直连交换机。这时候有开启BackboneFast的设备会直接去询问根是否还存活，根回复还活着，则会为发送次级BPDU的设备提供新的链路，阻塞端口直接跳过20s进入到监听状态，差不多30s完成收敛，节省20ｓ。</p>
<p>（3）配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//必须在每一台设备上都开启</span></span><br><span class="line">SW3(config)#spanning-tree backbonefast</span><br><span class="line"><span class="comment">//检查STP BackboneFast的当前状态</span></span><br><span class="line">SW3#show spanning-tree backbonefast </span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/wgOanO.png"></p>
<ul>
<li>将SW2的e0/0端口shutdown，观察SW3的e0/2端口过渡到转发状态所需的时间</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//未开启backbonefast特性</span></span><br><span class="line">当SW2的e0/<span class="number">0</span>端口被关闭后，SW2无法接收到根桥发送的BPDU，会认为自己就是根桥，从e0/<span class="number">1</span>端口发送BPDU，</span><br><span class="line">SW3接收到SW2发送的次级BPDU（因为会从e0/<span class="number">0</span>端口接收到根桥发送的更优的BPDU）不会进行受理，</span><br><span class="line"><span class="number">20</span>s之后SW3从端口e0/<span class="number">1</span>仍未收到根桥发送的BPDU，则会从端口e0/<span class="number">0</span>发送RLQ(根链路查询)，询问根是否还存活着，</span><br><span class="line">收到根桥的回复后，SW3受理从e0/<span class="number">1</span>端口收到的次级BPDU，告知SW2它不是根桥，进入listen、learning、forwarding，需要大约<span class="number">50</span>s时间</span><br><span class="line"></span><br><span class="line">SW3#debug spanning-tree events </span><br><span class="line">Spanning Tree event debugging is on</span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">58</span>:<span class="number">51.042</span>: STP: VLAN0001 heard root <span class="number">32769</span>-aabb.cc00<span class="number">.2000</span> on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">58</span>:<span class="number">52.887</span>: STP: VLAN0001 heard root <span class="number">32769</span>-aabb.cc00<span class="number">.2000</span> on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">58</span>:<span class="number">54.890</span>: STP: VLAN0001 heard root <span class="number">32769</span>-aabb.cc00<span class="number">.2000</span> on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">58</span>:<span class="number">56.889</span>: STP: VLAN0001 heard root <span class="number">32769</span>-aabb.cc00<span class="number">.2000</span> on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">58</span>:<span class="number">58.890</span>: STP: VLAN0001 heard root <span class="number">32769</span>-aabb.cc00<span class="number">.2000</span> on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">59</span>:<span class="number">00.899</span>: STP: VLAN0001 heard root <span class="number">32769</span>-aabb.cc00<span class="number">.2000</span> on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">59</span>:<span class="number">02.904</span>: STP: VLAN0001 heard root <span class="number">32769</span>-aabb.cc00<span class="number">.2000</span> on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">59</span>:<span class="number">04.913</span>: STP: VLAN0001 heard root <span class="number">32769</span>-aabb.cc00<span class="number">.2000</span> on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">59</span>:<span class="number">06.919</span>: STP: VLAN0001 heard root <span class="number">32769</span>-aabb.cc00<span class="number">.2000</span> on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">59</span>:<span class="number">08.927</span>: STP: VLAN0001 heard root <span class="number">32769</span>-aabb.cc00<span class="number">.2000</span> on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">59</span>:<span class="number">09.047</span>: STP: VLAN0001 Et0/<span class="number">1</span> -&gt; listening</span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">59</span>:<span class="number">10.103</span>: STP: VLAN0001 Topology Change rcvd on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">59</span>:<span class="number">10.103</span>: STP: VLAN0001 sent Topology Change Notice on Et0/<span class="number">0</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">59</span>:<span class="number">24.051</span>: STP: VLAN0001 Et0/<span class="number">1</span> -&gt; learning</span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">59</span>:<span class="number">39.057</span>: STP[<span class="number">1</span>]: Generating TC trap <span class="keyword">for</span> port Ethernet0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">59</span>:<span class="number">39.057</span>: STP: VLAN0001 sent Topology Change Notice on Et0/<span class="number">0</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">05</span>:<span class="number">59</span>:<span class="number">39.057</span>: STP: VLAN0001 Et0/<span class="number">1</span> -&gt; forwarding</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启backbonefast</span></span><br><span class="line">当监听到次级BPDU后，直接询问根桥，根桥仍然存活着，则受理BPDU，直接进入listening状态，节省<span class="number">20</span>s时间</span><br><span class="line"></span><br><span class="line">SW3#debug spanning-tree events </span><br><span class="line">Spanning Tree event debugging is on</span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">16</span>:<span class="number">15.879</span>: STP: VLAN0001 heard root <span class="number">32769</span>-aabb.cc00<span class="number">.2000</span> on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">16</span>:<span class="number">15.880</span>: STP: VLAN0001 Et0/<span class="number">1</span> -&gt; listening</span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">16</span>:<span class="number">16.781</span>: STP: VLAN0001 Topology Change rcvd on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">16</span>:<span class="number">16.781</span>: STP: VLAN0001 sent Topology Change Notice on Et0/<span class="number">0</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">16</span>:<span class="number">30.887</span>: STP: VLAN0001 Et0/<span class="number">1</span> -&gt; learning</span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">16</span>:<span class="number">45.895</span>: STP[<span class="number">1</span>]: Generating TC trap <span class="keyword">for</span> port Ethernet0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">16</span>:<span class="number">45.895</span>: STP: VLAN0001 sent Topology Change Notice on Et0/<span class="number">0</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">16</span>:<span class="number">45.895</span>: STP: VLAN0001 Et0/<span class="number">1</span> -&gt; forwarding</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：当前，RSTP协议内置了BackboneFast机制。不过RSTP与BackboneFast的实现方式略有不同。BackboneFast依赖RLQ信息来检测根桥是否可用，而RSTP则依赖缓存信息来实现。</p>
</blockquote>
<h3 id="6、Root-Guard"><a href="#6、Root-Guard" class="headerlink" title="6、Root Guard"></a>6、Root Guard</h3><p>（1）作用：巩固根桥的地位</p>
<p>（2）功能：开启根保护特性可以强制将某个端口变成指定端口，来防止周围的交换机选举为根交换机。如果交换机在根保护端口上收到了更优的BPDU，那么端口将会进入”不一致根”（root-inconsistent）的STP状态（等同于listening状态），并且交换机也不会从该端口转发流量。当不再监听到更优的BPDU，则自行修复。</p>
<p>（3）配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口下开启跟保护特性</span></span><br><span class="line">sw1(config-<span class="keyword">if</span>)spanning-tree guard root</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/w2plMn.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在SW1的e0/0和e0/1端口开启Root Gard</span></span><br><span class="line">sw1(config)#int range e0/0-1</span><br><span class="line">sw1(config-if-range)#spanning-tree guard root</span><br><span class="line">sw1(config-if-range)#</span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">01.091</span>: %SPANTREE<span class="number">-2</span>-ROOTGUARD_CONFIG_CHANGE: Root guard enabled on port Ethernet0/<span class="number">0.</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">01.091</span>: STP: VLAN0001 we are the spanning tree root</span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">01.091</span>: %SPANTREE<span class="number">-2</span>-ROOTGUARD_CONFIG_CHANGE: Root guard enabled on port Ethernet0/<span class="number">1.</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">36</span>:<span class="number">01.091</span>: STP: VLAN0001 we are the spanning tree root</span><br><span class="line"></span><br><span class="line"><span class="comment">//将SW3的优先级更改为4096</span></span><br><span class="line">SW3(config)#spanning-tree vlan 1 priority 4096</span><br><span class="line"></span><br><span class="line">sw1#debug spanning-tree events </span><br><span class="line">Spanning Tree event debugging is on</span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">39</span>:<span class="number">33.050</span>: STP: VLAN0001 heard root  <span class="number">4097</span>-aabb.cc00<span class="number">.3000</span> on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">39</span>:<span class="number">33.050</span>:     supersedes <span class="number">32769</span>-aabb.cc00<span class="number">.1000</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">39</span>:<span class="number">33.050</span>: %SPANTREE<span class="number">-2</span>-ROOTGUARD_BLOCK: Root guard blocking port Ethernet0/<span class="number">1</span> on VLAN0001.</span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">39</span>:<span class="number">33.050</span>: STP[<span class="number">1</span>]: Generating TC trap <span class="keyword">for</span> port Ethernet0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">39</span>:<span class="number">33.050</span>: STP: VLAN0001 Et0/<span class="number">1</span> -&gt; blocking</span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">39</span>:<span class="number">33.050</span>: STP: VLAN0001 heard root  <span class="number">4097</span>-aabb.cc00<span class="number">.3000</span> on Et0/<span class="number">0</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">39</span>:<span class="number">33.050</span>:     supersedes <span class="number">32769</span>-aabb.cc00<span class="number">.1000</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">39</span>:<span class="number">33.050</span>: STP[<span class="number">1</span>]: Generating TC trap <span class="keyword">for</span> port Ethernet0/<span class="number">0</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">39</span>:<span class="number">33.050</span>: STP: VLAN0001 Et0/<span class="number">0</span> -&gt; blocking</span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">39</span>:<span class="number">35.054</span>: STP: VLAN0001 heard root  <span class="number">4097</span>-aabb.cc00<span class="number">.3000</span> on Et0/<span class="number">0</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">39</span>:<span class="number">35.054</span>:     supersedes <span class="number">32769</span>-aabb.cc00<span class="number">.1000</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">39</span>:<span class="number">35.055</span>: STP: VLAN0001 heard root  <span class="number">4097</span>-aabb.cc00<span class="number">.3000</span> on Et0/<span class="number">1</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">39</span>:<span class="number">35.055</span>:     supersedes <span class="number">32769</span>-aabb.cc00<span class="number">.1000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>根不一致状态</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/w29Se0.png"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/w29pwV.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将SW3的优先级更改为原来的优先级，则SW1自动恢复为根桥</span></span><br><span class="line">SW3(config)#spanning-tree vlan 1 priority 32768</span><br><span class="line"></span><br><span class="line"><span class="comment">//SW1上提示RootGuard不再阻塞</span></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">06</span>:<span class="number">52</span>:<span class="number">51.986</span>: %SPANTREE<span class="number">-2</span>-ROOTGUARD_UNBLOCK: Root guard unblocking port Ethernet0/<span class="number">1</span> on VLAN0001.</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/w2CAN8.png"></p>
<h3 id="7、Loop-Guard"><a href="#7、Loop-Guard" class="headerlink" title="7、Loop Guard"></a>7、Loop Guard</h3><p>（1）对象：针对单向链路故障配置；存在端口不能正常发送或接收BPDU的情况</p>
<p>（2）功能：开启Loop Guard的端口，监听BPDU，如果没有监听到，则会进入到环路不一致状态，相当于阻塞端口（不会是转发状态）；只有当重新监听到BPDU，该端口会自动恢复</p>
<p>（3）配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在接口下启用环路保护特性</span></span><br><span class="line">SW3(config-if)#spanning-tree guard loop</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/w2iocQ.png"></p>
<blockquote>
<p>如上图所示，SW1为根桥。由于SW2和SW3之间的单向链路故障，导致SW3接收不到SW2转发的BPDU。在未启用环路保护特性时，SW3上的Blocking端口会在最大超时时间（20s）到期后过渡到STP Listening状态，并且会在两倍转发延迟（30s）之后进入Forwarding状态并产生环路。若启用了环路保护特性，SW3上的Blocking端口会在接收不到BPDU的20s后过渡到STP loop-inconsistent状态。处于loop-inconsistent状态的端口则不会发送流量，阻止了环路的产生。</p>
</blockquote>
<ul>
<li>进行必要配置使上图所示的交换机的所有端口都处于转发状态，则会产生环路。在SW3的e0/1端口开启环路防护</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SW3(config)#int e0/1</span><br><span class="line">SW3(config-if)#spanning-tree guard loop</span><br><span class="line"></span><br><span class="line">*Aug  <span class="number">7</span> <span class="number">07</span>:<span class="number">17</span>:<span class="number">15.156</span>: %SPANTREE<span class="number">-2</span>-LOOPGUARD_BLOCK: Loop guard blocking port Ethernet0/<span class="number">1</span> on VLAN0001.</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/w2FyCT.png"></p>
<ul>
<li>端口状态为环路不一致状态</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/16/w2F5Ux.png"></p>
<h3 id="8、UDLD"><a href="#8、UDLD" class="headerlink" title="8、UDLD"></a>8、UDLD</h3><p>　　在双向链路中，流量可以同时在两个方向上传输。如果链路发生故障，导致流量只能单向传递时，这种链路叫做单向链路。单向链路将导致邻居之间的链路上只有一侧流量传输，这种情况有可能导致生成树拓扑成环。单向链路故障检测（UDLD）可帮助设备检测出自身的单向链路，并将问题端口关闭。</p>
<p>　　在启用了UDLD的情况下，交换机会周期性地向邻居发送UDLD包，若收到了对端回应的echo包，则判定链路工作正常（双向）；若在指定时间内邻居并未回应echo包，链路则被认为是单向链路，端口将进入err-disabled状态。链路两端的设备必须同时支持UDLD协议，才能正确地识别和关闭单向链路。</p>
<p>　　在UDLD检测到了单向链路之后，根据配置的以下两种模式，可执行两种不同的操作。</p>
<ul>
<li><p>普通模式（Normal mode）：端口保持原有状态继续工作。UDLD仅会将此端口标记为”不确定”状态，并生成一条syslog消息</p>
</li>
<li><p>激进模式（Aggressive mode）：交换机会每秒发送一次UDLD包尝试重新建立连接，8s过后，如果仍未收到echo包，会将端口置于err-disabled状态</p>
<p>配置</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在全局启用UDLD，对于普通模式，使用enable关键字，而激进模式则使用aggressive关键字</span></span><br><span class="line">SW3(config)#udld &#123; enable | aggressive &#125; </span><br><span class="line"><span class="comment">//基于端口启用UDLD</span></span><br><span class="line">SW3(config-if)#udld port [ aggressive ]</span><br><span class="line"><span class="comment">//查看端口的UDLD状态</span></span><br><span class="line">SW3#show udld </span><br><span class="line"><span class="comment">//重置所有UDLD关闭的顿口苦</span></span><br><span class="line">SW3#udld reset </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>STP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2020/10/15/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="一、命令基本格式"><a href="#一、命令基本格式" class="headerlink" title="一、命令基本格式"></a>一、命令基本格式</h3><p>1、命令提示符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[shain-l@study ~]$</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[]：这是提示符的分隔符号，没有特殊含义</p>
<p>shain-l：显示的是当前的登录用户，如上所示的用户为shain-l</p>
<p>@：分隔符号，没有特殊含义</p>
<p>study：当前系统的简写主机名</p>
<p>~：代表用户当前所在的目录，此例中用户当前所在的目录是家目录</p>
<p>$：命令提示符，普通用户是$，超级用户是#</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令提示符的显示形式可以通过修改变量PS1来自定义，若想永久修改提示符，则需修改/etc/bashrc文件中PS1变量的内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash">默认情况下，显示的格式为[当前用户@简写主机名 当前所在目录的最后一个目录]$ </span></span><br><span class="line">[shain-l@study ~]$ echo $PS1</span><br><span class="line">[\u@\h \W]\$</span><br></pre></td></tr></table></figure>

<p>2、命令的基本格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# 命令 [选项] [参数]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>选项：用于调整命令的功能</p>
<p>参数：命令的操作对象，如果省略参数则使用默认参数</p>
</blockquote>
<h3 id="二、目录操作命令"><a href="#二、目录操作命令" class="headerlink" title="二、目录操作命令"></a>二、目录操作命令</h3><h4 id="1、ls命令"><a href="#1、ls命令" class="headerlink" title="1、ls命令"></a>1、ls命令</h4><blockquote>
<p>英文原意：list directory contents</p>
<p>所在路径：/usr/bin/ls</p>
<p>执行权限：所有用户</p>
<p>功能描述：显示目录下的内容</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# ls [选项] [文件名或目录名]</span><br><span class="line">选项：</span><br><span class="line">	-a　　　　　　显示出所有文件（包括隐藏文件）</span><br><span class="line">	-d　　　　　　显示目录信息，而不是目录下的文件</span><br><span class="line">	-h　　　　　　人性化显示，按照我们习惯的单位显示文件大小</span><br><span class="line">	-i　　　　　　显示inode号码</span><br><span class="line">	-l　　　　　　长格式显示，显示详细信息</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用ls命令查看<span class="built_in">test</span>目录下的文件</span></span><br><span class="line">[root@study test]# ls</span><br><span class="line">test1  test2  test3  test_dir</span><br><span class="line"><span class="meta">#</span><span class="bash">添加-a选项，查看的内容包括隐藏文件</span></span><br><span class="line">[root@study test]# ls -a</span><br><span class="line">.  ..  test1  test2  test3  test_dir</span><br><span class="line"><span class="meta">#</span><span class="bash">添加-l参数，显示详细信息，包括文件的属性与权限等数据</span></span><br><span class="line">[root@study test]# ls -l</span><br><span class="line">total 80</span><br><span class="line">-rw-r--r--. 1 root root  9240 Oct 16 13:57 test1</span><br><span class="line">-rw-r--r--. 1 root root 63504 Oct 16 13:57 test2</span><br><span class="line">-rw-r--r--. 1 root root     6 Oct 16 13:57 test3</span><br><span class="line">drwxr-xr-x. 2 root root     6 Oct 16 13:58 test_dir</span><br><span class="line"><span class="meta">#</span><span class="bash">添加-h选项，将文件容量以人类较易读的方式显示，其中ls -l可以使用ll替代</span></span><br><span class="line">[root@study test]# ll -h</span><br><span class="line">total 80K</span><br><span class="line">-rw-r--r--. 1 root root 9.1K Oct 16 13:57 test1</span><br><span class="line">-rw-r--r--. 1 root root  63K Oct 16 13:57 test2</span><br><span class="line">-rw-r--r--. 1 root root    6 Oct 16 13:57 test3</span><br><span class="line">drwxr-xr-x. 2 root root    6 Oct 16 13:58 test_dir</span><br><span class="line"><span class="meta">#</span><span class="bash">添加-i参数，列出文件的inode号码</span></span><br><span class="line">[root@study test]# ll -i</span><br><span class="line">total 80</span><br><span class="line">27407027 -rw-r--r--. 1 root root  9240 Oct 16 13:57 test1</span><br><span class="line">27407026 -rw-r--r--. 1 root root 63504 Oct 16 13:57 test2</span><br><span class="line">27407023 -rw-r--r--. 1 root root     6 Oct 16 13:57 test3</span><br><span class="line">    4258 drwxr-xr-x. 2 root root     6 Oct 16 13:58 test_dir</span><br><span class="line"><span class="meta">#</span><span class="bash">添加-d参数，用于显示目录信息</span></span><br><span class="line">[root@study test]# ll -d test_dir/</span><br><span class="line">drwxr-xr-x. 2 root root 6 Oct 16 13:58 test_dir/</span><br></pre></td></tr></table></figure>

<ul>
<li>ls -l 输出内容各字段含义</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study test]# ll</span><br><span class="line">total 80</span><br><span class="line">-rw-r--r--. 1 root root  9240 Oct 16 13:57 test1</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled="" type="checkbox"> 第一列：文件类型与权限</li>
</ul>
<ul>
<li><input disabled="" type="checkbox"> 第二列：链接数</li>
<li><input disabled="" type="checkbox"> 第三列：文件所属主</li>
<li><input disabled="" type="checkbox"> 第四列：文件所属组</li>
<li><input disabled="" type="checkbox"> 第五列：文件大小</li>
<li><input disabled="" type="checkbox"> 第六列：文件最后修改时间</li>
<li><input disabled="" type="checkbox"> 第七列：文件名</li>
</ul>
<h4 id="2、cd命令"><a href="#2、cd命令" class="headerlink" title="2、cd命令"></a>2、cd命令</h4><blockquote>
<p>英文原意：change directory</p>
<p>所在路径：Shell内置命令</p>
<p>执行权限：所有用户</p>
<p>功能描述：切换所在目录</p>
</blockquote>
<ul>
<li>特殊目录</li>
</ul>
<table>
<thead>
<tr>
<th>特殊符号</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>代表此层目录</td>
</tr>
<tr>
<td>..</td>
<td>代表上一层目录</td>
</tr>
<tr>
<td>-</td>
<td>代表前一个工作目录</td>
</tr>
<tr>
<td>~</td>
<td>代表目前使用者身份所在的家目录</td>
</tr>
<tr>
<td>~shain-l</td>
<td>代表shain-l这个使用者的家目录（shain-l是个账号名称）</td>
</tr>
</tbody></table>
<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换工作目录到test_dir</span></span><br><span class="line">[root@study test]# cd test_dir/</span><br><span class="line">[root@study test_dir]#</span><br><span class="line"><span class="meta">#</span><span class="bash">切换到上级目录</span></span><br><span class="line">[root@study test_dir]# cd ..</span><br><span class="line">[root@study test]#</span><br><span class="line"><span class="meta">#</span><span class="bash">切换到当前用户的家目录，<span class="built_in">cd</span>命令等价于<span class="built_in">cd</span> ~</span></span><br><span class="line">[root@study test]# cd</span><br><span class="line">[root@study ~]#</span><br><span class="line"><span class="meta">#</span><span class="bash">使用-可以切换到前一个工作目录</span></span><br><span class="line">[root@study test]# cd /tmp</span><br><span class="line">[root@study tmp]# cd -</span><br><span class="line">/root/test</span><br></pre></td></tr></table></figure>

<ul>
<li>绝对路径与相对路径<ul>
<li>绝对路径：路径的写法一定由根目录/写起，一级一级进入目录，如<code>&quot;/usr/share/doc&quot;</code></li>
<li>相对路径：以当前目录作为参照物，进行目录查找。例如由 <code>/usr/share/doc</code> 要到 <code>/usr/share/man</code> 下时，可以写成<code>&quot;cd ../man&quot;</code></li>
</ul>
</li>
</ul>
<h4 id="3、pwd命令"><a href="#3、pwd命令" class="headerlink" title="3、pwd命令"></a>3、pwd命令</h4><blockquote>
<p>英文原意：print name of current/working directory</p>
<p>所在路径：/usr/bin/pwd</p>
<p>执行权限：所有用户</p>
<p>功能描述：显示目前所在的目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# pwd [-P]</span><br><span class="line">选项与参数：</span><br><span class="line">	-P：显示出真正的路径，而非使用链接路径</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示目前的工作目录</span></span><br><span class="line">[root@study ~]# pwd</span><br><span class="line">/root</span><br><span class="line"><span class="meta">#</span><span class="bash">查看/var/mail和/var/spool/mail两个目录的详细信息，可知/var/mail链接到/var/spool/mail</span></span><br><span class="line">[root@study var]# ll -d mail spool/mail</span><br><span class="line">lrwxrwxrwx. 1 root root 10 Aug  9  2019 mail -&gt; spool/mail</span><br><span class="line">drwxrwxr-x. 2 root mail 44 Oct 15 16:55 spool/mail</span><br><span class="line"><span class="meta">#</span><span class="bash">切换工作目录到/var/mail下</span></span><br><span class="line">[root@study var]# cd mail</span><br><span class="line"><span class="meta">#</span><span class="bash">列出目前工作目录</span></span><br><span class="line">[root@study mail]# pwd</span><br><span class="line">/var/mail</span><br><span class="line"><span class="meta">#</span><span class="bash">添加-P后，显示的是实际的工作目录，而非链接文件本身的目录名</span></span><br><span class="line">[root@study mail]# pwd -P</span><br><span class="line">/var/spool/mail</span><br></pre></td></tr></table></figure>

<h4 id="4、mkdir命令"><a href="#4、mkdir命令" class="headerlink" title="4、mkdir命令"></a>4、mkdir命令</h4><blockquote>
<p>英文原意：make directories</p>
<p>所在路径：/usr/bin/mkdir</p>
<p>执行权限：所有用户</p>
<p>功能描述：创建新目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# mkdir [选项] 目录名</span><br><span class="line">选项：</span><br><span class="line">	-p：递归创建所需目录</span><br><span class="line">	-m：设置文件的权限。直接设置，不使用默认权限（umask）</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用-p选项递归创建目录</span></span><br><span class="line">[root@study test]# mkdir -p s/sh/sha/shai/shain</span><br><span class="line">[root@study test]# cd s/sh/sha/shai/shain/</span><br><span class="line">[root@study shain]# pwd</span><br><span class="line">/root/test/s/sh/sha/shai/shain</span><br><span class="line"><span class="meta">#</span><span class="bash">查看目录s的权限，为rwxr-xr-x，这是系统的默认属性，因为root的<span class="built_in">umask</span>为022</span></span><br><span class="line">[root@study test]# ll -d s</span><br><span class="line">drwxr-xr-x. 3 root root 16 Oct 16 14:54 s</span><br><span class="line"><span class="meta">#</span><span class="bash">使用-m选项设置所创建的目录的权限为rwx--x--x</span></span><br><span class="line">[root@study test]# mkdir -m 711 shain</span><br><span class="line">[root@study test]# ll -d shain</span><br><span class="line">drwx--x--x. 2 root root 6 Oct 16 14:58 shain</span><br></pre></td></tr></table></figure>

<h4 id="5、rmdir命令"><a href="#5、rmdir命令" class="headerlink" title="5、rmdir命令"></a>5、rmdir命令</h4><blockquote>
<p>英文原意：remove empty directories</p>
<p>所在路径：/usr/bin/rmdir</p>
<p>执行权限：所有用户</p>
<p>功能描述：删除空目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# rmdir [-p] 目录名</span><br><span class="line">选项：</span><br><span class="line">	-p：递归删除空目录</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看shain目录下的文件，可知存在一个名为text的文件</span></span><br><span class="line">[root@study test]# ls shain/</span><br><span class="line">text</span><br><span class="line"><span class="meta">#</span><span class="bash">使用rmdir命令删除目录shain，提示无法删除，因为该目录不为空</span></span><br><span class="line">[root@study test]# rmdir shain/</span><br><span class="line">rmdir: failed to remove ‘shain/’: Directory not empty</span><br><span class="line"><span class="meta">#</span><span class="bash">使用-p选项递归删除之前创建的空目录s/sh/sha/shai/shain</span></span><br><span class="line">[root@study test]# rmdir -p s/sh/sha/shai/shain/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于rmdir只能用于删除空目录，即被删除的目录中不能存在其他的目录或文件，所以一般使用rm命令删除文件或目录。</p>
</blockquote>
<h3 id="三、文件操作命令"><a href="#三、文件操作命令" class="headerlink" title="三、文件操作命令"></a>三、文件操作命令</h3><h4 id="1、touch命令"><a href="#1、touch命令" class="headerlink" title="1、touch命令"></a>1、touch命令</h4><blockquote>
<p>英文原意：change file timestamps</p>
<p>所在路径：/usr/bin/touch</p>
<p>执行权限：所有用户</p>
<p>功能描述：修改文件的时间戳</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# touch [选项] 文件</span><br><span class="line">选项：</span><br><span class="line">	-a：仅自定义access time</span><br><span class="line">	-c：仅修改文件的时间，若该文件不存在则不建立新文件</span><br><span class="line">	-d：后面可以接欲自定义的日期而不用目前的日期，也可以使用--date=&quot;日期或时间&quot;</span><br><span class="line">	-m：仅修改mtime</span><br><span class="line">	-t：后面可以接欲自定义的时间而不用目前的时间，格式为[YYYYMMDDhhmm]</span><br></pre></td></tr></table></figure>

<ul>
<li>三个时间参数</li>
</ul>
<p>修改时间(modification time, mtime)</p>
<p>　　当文件的内容数据变更时，会更新这个时间，内容数据指的是文件的内容，而不是文件的属性或权限</p>
<p>状态时间(status time, ctime)</p>
<p>　　当该文件的状态改变时，就会更新这个时间，例如权限与属性被更改了，就会更新这个时间</p>
<p>读取时间(access time, atime)</p>
<p>　　当该文件的内容被读取时，就会更新这个读取时间，例如使用cat命令读取文件，则会更新该文件的atime</p>
<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建一个新文件，名称为time</span></span><br><span class="line">[root@study test]# touch time</span><br><span class="line"><span class="meta">#</span><span class="bash">查看当前时间和该文件的三个时间</span></span><br><span class="line">[root@study test]# date; ll time; ll --time=ctime time; ll --time=atime time</span><br><span class="line">Fri Oct 16 15:47:28 CST 2020  #当前时间</span><br><span class="line">-rw-r--r--. 1 root root 0 Oct 16 15:47 time  #mtime</span><br><span class="line">-rw-r--r--. 1 root root 0 Oct 16 15:47 time  #ctime</span><br><span class="line">-rw-r--r--. 1 root root 0 Oct 16 15:47 time  #atime</span><br><span class="line"><span class="meta">#</span><span class="bash">默认ll显示出来的是文件的mtime，即该文件内容上次被修改的时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash">向该文件中输入内容</span></span><br><span class="line">[root@study test]# echo &quot;testtest&quot; &gt;&gt; time</span><br><span class="line"><span class="meta">#</span><span class="bash">此时文件内容被修改，该文件的mtime与ctime都发生了改变，由于为读取过文件内容，故atime不变</span></span><br><span class="line">[root@study test]# date; ll time; ll --time=ctime time; ll --time=atime time</span><br><span class="line">Fri Oct 16 15:48:34 CST 2020</span><br><span class="line">-rw-r--r--. 1 root root 9 Oct 16 15:48 time  #mtime</span><br><span class="line">-rw-r--r--. 1 root root 9 Oct 16 15:48 time  #ctime</span><br><span class="line">-rw-r--r--. 1 root root 9 Oct 16 15:47 time  #atime</span><br><span class="line"><span class="meta">#</span><span class="bash">使用cat命令访问该文件</span></span><br><span class="line">[root@study test]# cat time</span><br><span class="line">testtest</span><br><span class="line"><span class="meta">#</span><span class="bash">此时atime发生了改变</span></span><br><span class="line">[root@study test]# date; ll time; ll --time=ctime time; ll --time=atime time</span><br><span class="line">Fri Oct 16 15:50:24 CST 2020</span><br><span class="line">-rw-r--r--. 1 root root 9 Oct 16 15:48 time  #mtime</span><br><span class="line">-rw-r--r--. 1 root root 9 Oct 16 15:48 time  #ctime</span><br><span class="line">-rw-r--r--. 1 root root 9 Oct 16 15:50 time  #atime</span><br><span class="line"><span class="meta">#</span><span class="bash">使用chmod命令修改该文件的权限</span></span><br><span class="line">[root@study test]# chmod 755 time</span><br><span class="line"><span class="meta">#</span><span class="bash">此时该文件的权限发生了改变，故ctime也对应进行更新</span></span><br><span class="line">[root@study test]# date; ll time; ll --time=ctime time; ll --time=atime time</span><br><span class="line">Fri Oct 16 15:51:33 CST 2020</span><br><span class="line">-rwxr-xr-x. 1 root root 9 Oct 16 15:48 time  #mtime</span><br><span class="line">-rwxr-xr-x. 1 root root 9 Oct 16 15:51 time  #ctime</span><br><span class="line">-rwxr-xr-x. 1 root root 9 Oct 16 15:50 time  #atime</span><br></pre></td></tr></table></figure>

<h4 id="2、stat命令"><a href="#2、stat命令" class="headerlink" title="2、stat命令"></a>2、stat命令</h4><blockquote>
<p>英文原意：display file or file system status</p>
<p>所在路径：/usr/bin/stat</p>
<p>执行权限：所有用户</p>
<p>功能描述：显示文件或文件系统的详细信息</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study test]# stat time</span><br><span class="line">  File: ‘time’</span><br><span class="line">  Size: 9         	Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: fd00h/64768d	Inode: 27407015    Links: 1</span><br><span class="line">Access: (0755/-rwxr-xr-x)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Context: unconfined_u:object_r:admin_home_t:s0</span><br><span class="line">Access: 2020-10-16 15:50:20.276058996 +0800</span><br><span class="line">Modify: 2020-10-16 15:48:32.567058143 +0800</span><br><span class="line">Change: 2020-10-16 15:51:31.239059558 +0800</span><br><span class="line"> Birth: -</span><br></pre></td></tr></table></figure>

<h4 id="3、cat命令"><a href="#3、cat命令" class="headerlink" title="3、cat命令"></a>3、cat命令</h4><blockquote>
<p>英文原意：concatenate files and print on the standard output</p>
<p>所在路径：/usr/bin/cat</p>
<p>执行权限：所有用户</p>
<p>功能描述：合并文件并打印输出到标准输出</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# cat [选项] 文件名</span><br><span class="line">选项：</span><br><span class="line">	-A：相当于-vET的整合选项，用于列出一些特殊字符</span><br><span class="line">	-b：列出行号，仅针对非空白行做行号显示，空白行不标行号</span><br><span class="line">	-E：列出每行结尾的回车符$</span><br><span class="line">	-n：显示行号，连同空白行也会有行号</span><br><span class="line">	-T：把Tab键用^I显示出来</span><br><span class="line">	-v：列出特殊字符</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看/etc/issue这个文件的内容</span></span><br><span class="line">[root@study ~]# cat /etc/issue</span><br><span class="line">\S</span><br><span class="line">Kernel \r on an \m</span><br><span class="line"><span class="meta">#</span><span class="bash">添加-n选项显示行号</span></span><br><span class="line">[root@study ~]# cat -n /etc/issue</span><br><span class="line">     1	\S</span><br><span class="line">     2	Kernel \r on an \m </span><br><span class="line">     3</span><br><span class="line"><span class="meta">#</span><span class="bash">添加-A选项，显示特殊字符</span></span><br><span class="line">[root@study test]# cat -A time</span><br><span class="line"><span class="meta">testtest$</span></span><br><span class="line">tt^Iee$</span><br><span class="line"><span class="meta">sstt$</span></span><br><span class="line"><span class="meta">sha$</span></span><br></pre></td></tr></table></figure>

<h4 id="4、more命令"><a href="#4、more命令" class="headerlink" title="4、more命令"></a>4、more命令</h4><blockquote>
<p>英文原意：file perusal filter for crt viewing</p>
<p>所在路径：/usr/bin/more</p>
<p>执行权限：所有用户</p>
<p>功能描述：分屏显示文件内容</p>
</blockquote>
<ul>
<li>more命令中常用的交互命令<ul>
<li>空格键(space)：代表向下翻一页</li>
<li>Enter：代表向下翻一行</li>
<li>/字符串：代表在这个显示的内容中，向下查找字符串这个关键词</li>
<li>q：退出</li>
<li>b：向上翻页，此操作只对文件有用，对管道无用</li>
</ul>
</li>
</ul>
<h4 id="5、less命令"><a href="#5、less命令" class="headerlink" title="5、less命令"></a>5、less命令</h4><blockquote>
<p>英文原意：opposite of more</p>
<p>所在路径：/usr/bin/less</p>
<p>执行权限：所有用户</p>
<p>功能描述：分行显示文件内容</p>
</blockquote>
<h4 id="6、head命令"><a href="#6、head命令" class="headerlink" title="6、head命令"></a>6、head命令</h4><blockquote>
<p>英文原意：output the first part of files</p>
<p>所在路径：/usr/bin/head</p>
<p>执行权限：所有用户</p>
<p>功能描述：显示文件开头的内容</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# head [选项] 文件名</span><br><span class="line">选项：</span><br><span class="line">	-n 行数：从文件头开始，显示指定行数</span><br><span class="line">	-v：显示文件名</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study test]# head -n 5 -v head_test </span><br><span class="line">==&gt; head_test &lt;==</span><br><span class="line">head	head	head</span><br><span class="line">head	head	head</span><br><span class="line">head	head	head</span><br><span class="line">head	head	head</span><br><span class="line">head	head	head</span><br></pre></td></tr></table></figure>

<h4 id="7、tail命令"><a href="#7、tail命令" class="headerlink" title="7、tail命令"></a>7、tail命令</h4><blockquote>
<p>英文原意：output the last part of files</p>
<p>所在路径：/usr/bin/tail</p>
<p>执行权限：所有用户</p>
<p>功能描述：显示文件结尾的内容</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# tail [选项] 文件名</span><br><span class="line">选项：</span><br><span class="line">	-n 行数：从文件结尾开始，显示指定的行数</span><br><span class="line">	-f：监听文件的新增内容</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study test]# tail -n 5 tail_test </span><br><span class="line">tail	tail	tail</span><br><span class="line">tail	tail	tail</span><br><span class="line">tail	tail	tail</span><br><span class="line">tail	tail	tail</span><br><span class="line">tail	tail	tail</span><br></pre></td></tr></table></figure>

<h4 id="8、ln命令"><a href="#8、ln命令" class="headerlink" title="8、ln命令"></a>8、ln命令</h4><blockquote>
<p>英文原意：make links between files</p>
<p>所在路径：/usr/bin/ln</p>
<p>执行权限：所有用户</p>
<p>功能描述：在文件之间建立链接</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# ln [选项] 源文件 目标文件</span><br><span class="line">选项：</span><br><span class="line">	-s：建立软链接，即符号链接。若未添加-s选项，则建立硬链接</span><br><span class="line">	-f：强制建立链接。如果目标文件已经存在，则删除目标文件后再建立链接文件</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">首先查看ln_test文件的详细信息，可知链接数为1</span></span><br><span class="line">[root@study test]# ll -i ln_test </span><br><span class="line">27407030 -rw-r--r--. 1 root root 120 Oct 16 17:00 ln_test</span><br><span class="line"><span class="meta">#</span><span class="bash">建立硬链接文件</span></span><br><span class="line">[root@study test]# ln /root/test/ln_test /tmp/ln_htest</span><br><span class="line"><span class="meta">#</span><span class="bash">查看两个文件的详细信息，可知具有相同的inode号码，并且两文件的链接数都为2</span></span><br><span class="line">[root@study test]# ll -i ln_test /tmp/ln_htest </span><br><span class="line">27407030 -rw-r--r--. 2 root root 120 Oct 16 17:00 ln_test</span><br><span class="line">27407030 -rw-r--r--. 2 root root 120 Oct 16 17:00 /tmp/ln_htest</span><br><span class="line"><span class="meta">#</span><span class="bash">建立软链接</span></span><br><span class="line">[root@study test]# ln -s /root/test/ln_test /tmp/ln_stest</span><br><span class="line"><span class="meta">#</span><span class="bash">查看两个文件的详细信息，可知两文件的inode号码不同</span></span><br><span class="line">[root@study test]# ll -i ln_test /tmp/ln_stest </span><br><span class="line">27407030 -rw-r--r--. 2 root root 120 Oct 16 17:00 ln_test</span><br><span class="line">16841412 lrwxrwxrwx. 1 root root  18 Oct 16 17:06 /tmp/ln_stest -&gt; /root/test/ln_test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看ln_test文件的内容，并追加内容</span></span><br><span class="line">[root@study test]# cat ln_test </span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">[root@study test]# echo &quot;modify&quot; &gt;&gt; ln_test </span><br><span class="line"><span class="meta">#</span><span class="bash">查看/tmp目录下的ln_htest和ln_stest两个链接文件的内容，可知都发生了改变</span></span><br><span class="line">[root@study test]# cat /tmp/ln_htest </span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">modify</span><br><span class="line">[root@study test]# cat /tmp/ln_stest </span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">modify</span><br><span class="line"><span class="meta">#</span><span class="bash">此时将ln_test文件删除</span></span><br><span class="line">[root@study test]# rm -f ln_test </span><br><span class="line"><span class="meta">#</span><span class="bash">查看/tmp目录下的两个链接文件的信息，其中软链接文件ln_stest出现错误，硬链接文件ln_htest正常且链接数变为1</span></span><br><span class="line">[root@study test]# ll /tmp/ln_htest /tmp/ln_stest </span><br><span class="line">-rw-r--r--. 1 root root 127 Oct 16 17:11 /tmp/ln_htest</span><br><span class="line">lrwxrwxrwx. 1 root root  18 Oct 16 17:06 /tmp/ln_stest -&gt; /root/test/ln_test</span><br><span class="line">[root@study test]# cat /tmp/ln_stest </span><br><span class="line">cat: /tmp/ln_stest: No such file or directory</span><br><span class="line">[root@study test]# cat /tmp/ln_htest </span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">ln	ln	ln</span><br><span class="line">test	test	test</span><br><span class="line">modify</span><br></pre></td></tr></table></figure>

<ul>
<li>硬链接与软链接的特征</li>
</ul>
<p>硬链接的特征</p>
<p>　　源文件和硬链接文件拥有相同的inode和block</p>
<p>　　修改任意一个文件，另一个都改变</p>
<p>　　删除任意一个文件，另一个都能使用</p>
<p>　　硬链接标记不清，很难确认硬链接文件位置，不建议使用</p>
<p>　　硬链接不能链接目录</p>
<p>　　硬链接不能跨分区</p>
<p>软链接的特征</p>
<p>　　软链接和源文件拥有不同的inode和block</p>
<p>　　两个文件修改任意一个，另一个都改变</p>
<p>　　删除软链接，源文件不受影响；删除源文件，软链接不能使用</p>
<p>　　软链接没有实际数据，只保存源文件的inode，不论源文件多大，软链接大小不变</p>
<p>　　软链接的权限是最大权限lrwxrwxrwx，但是由于没有实际数据，最终访问时需要参考源文件权限</p>
<p>　　软链接可以链接目录</p>
<p>　　软链接可以跨分区</p>
<p>　　软链接特征明显，建议使用软链接</p>
<h3 id="四、目录和文件都能操作的命令"><a href="#四、目录和文件都能操作的命令" class="headerlink" title="四、目录和文件都能操作的命令"></a>四、目录和文件都能操作的命令</h3><h4 id="1、rm命令"><a href="#1、rm命令" class="headerlink" title="1、rm命令"></a>1、rm命令</h4><blockquote>
<p>英文原意：remove files or directories</p>
<p>所在路径：/usr/bin/rm</p>
<p>执行权限：所有用户</p>
<p>功能描述：删除文件或目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# rm [选项] 文件或目录</span><br><span class="line">选项：</span><br><span class="line">	-r：递归删除，可以删除目录</span><br><span class="line">	-f：强制删除</span><br><span class="line">	-i：交互删除，在删除之前会询问用户</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用touch命令创建一个新文件</span></span><br><span class="line">[root@study test]# touch rm_test</span><br><span class="line">[root@study test]# ls</span><br><span class="line">rm_test  test1  test2  test3</span><br><span class="line"><span class="meta">#</span><span class="bash">使用rm命令将其删除</span></span><br><span class="line">[root@study test]# rm -rf rm_test </span><br><span class="line">[root@study test]# ls</span><br><span class="line">test1  test2  test3</span><br></pre></td></tr></table></figure>

<h4 id="2、cp命令"><a href="#2、cp命令" class="headerlink" title="2、cp命令"></a>2、cp命令</h4><blockquote>
<p>英文原意：copy files and directories</p>
<p>所在路径：/usr/bin/cp</p>
<p>执行权限：所有用户</p>
<p>功能描述：复制文件和目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# cp [选项] 源文件 目标文件</span><br><span class="line">选项：</span><br><span class="line">	-a：相当于-dpr选项的集合</span><br><span class="line">	-d：若源文件为软链接，则复制出的目标文件也为软链接文件（对硬链接无效）</span><br><span class="line">	-i：若目标文件已经存在，在复制时会先询问是否覆盖</span><br><span class="line">	-p：复制后的目标文件保留源文件的属性（包括权限，用户，时间等）</span><br><span class="line">	-r：递归复制，用于目录的复制操作</span><br><span class="line">注意：如果源文件有两个以上，则最后一个目标文件一定要为&quot;目录&quot;才行</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看<span class="built_in">test</span>目录下的文件信息，其中cp_sln文件为链接文件，链接到该目录下的test1文件</span></span><br><span class="line">[root@study test]# ll</span><br><span class="line">total 12</span><br><span class="line">lrwxrwxrwx. 1 root root    5 Oct 17 16:33 cp_sln -&gt; test1</span><br><span class="line">-rw-r--r--. 1 root root 9240 Oct 16 13:57 test1</span><br><span class="line"><span class="meta">#</span><span class="bash">使用cp命令复制链接文件cp_sln，添加-d选项，则目标文件cp1也为链接文件，同样连接到该目录下的test1文件</span></span><br><span class="line">[root@study test]# cp -d cp_sln cp1</span><br><span class="line">[root@study test]# ll cp1</span><br><span class="line">lrwxrwxrwx. 1 root root 5 Oct 17 16:35 cp1 -&gt; test1</span><br><span class="line"><span class="meta">#</span><span class="bash">若未添加-d选项，则复制出的目标文件为普通文件</span></span><br><span class="line">[root@study test]# cp cp_sln cp2</span><br><span class="line">[root@study test]# ll cp2</span><br><span class="line">-rw-r--r--. 1 root root 9240 Oct 17 16:37 cp2</span><br><span class="line"><span class="meta">#</span><span class="bash">添加-i选项，则当目标文件已存在时，复制时会先进行询问是否覆盖</span></span><br><span class="line">[root@study test]# cp -i test1 cp2</span><br><span class="line">cp: overwrite ‘cp2’? y</span><br><span class="line">[root@study test]# ll cp2</span><br><span class="line">-rw-r--r--. 1 root root 9240 Oct 17 16:39 cp2</span><br><span class="line"><span class="meta">#</span><span class="bash">由以上示例可以发现复制后的文件与源文件的属性/权限发生了改变，若想保留源文件的属性，则添加-p选项</span></span><br><span class="line">[root@study test]# cp -p test1 cp3</span><br><span class="line">[root@study test]# ll test1 cp3</span><br><span class="line">-rw-r--r--. 1 root root 9240 Oct 16 13:57 cp3</span><br><span class="line">-rw-r--r--. 1 root root 9240 Oct 16 13:57 test1</span><br><span class="line"><span class="meta">#</span><span class="bash">创建一个目录tes用于进行目录复制的测试</span></span><br><span class="line">[root@study test]# mkdir tes</span><br><span class="line"><span class="meta">#</span><span class="bash">未添加选项-r则无法进行目录的复制</span></span><br><span class="line">[root@study test]# cp tes cp_tes</span><br><span class="line">cp: omitting directory ‘tes’</span><br><span class="line"><span class="meta">#</span><span class="bash">使用选项-r复制目录</span></span><br><span class="line">[root@study test]# cp -r tes cp_tes</span><br><span class="line">[root@study test]# ll -d tes cp_tes/</span><br><span class="line">drwxr-xr-x. 2 root root 42 Oct 17 16:50 cp_tes/</span><br><span class="line">drwxr-xr-x. 2 root root 42 Oct 17 16:49 tes</span><br><span class="line"><span class="meta">#</span><span class="bash">添加选项-a，相当于-dpr</span></span><br><span class="line"><span class="meta">#</span><span class="bash">将test1和cp_test文件一起复制到cp_dir目录下，因为添加了-a选项，所以目标文件保留源文件的属性</span></span><br><span class="line">[root@study test]# cp -a test1 cp_test cp_dir/</span><br><span class="line">[root@study test]# ll test1 cp_dir/test1 </span><br><span class="line">-rw-r--r--. 1 root root 9240 Oct 16 13:57 cp_dir/test1</span><br><span class="line">-rw-r--r--. 1 root root 9240 Oct 16 13:57 test1</span><br></pre></td></tr></table></figure>

<h4 id="3、mv命令"><a href="#3、mv命令" class="headerlink" title="3、mv命令"></a>3、mv命令</h4><blockquote>
<p>英文原意：move (rename) files</p>
<p>所在路径：/usr/bin/mv</p>
<p>执行权限：所有用户</p>
<p>功能描述：移动文件与目录，或重命名</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# mv [选项] 源文件 目标文件</span><br><span class="line">选项：</span><br><span class="line">	-f：强制，如果目标文件已存在，则不会询问而直接覆盖</span><br><span class="line">	-i：如果目标文件已存在，则询问是否覆盖</span><br><span class="line">	-v：显示详细信息</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">test</span>目录下存在两个文件</span></span><br><span class="line">[root@study test]# ls</span><br><span class="line">mvtt  test1</span><br><span class="line"><span class="meta">#</span><span class="bash">使用mv命令对mvtt文件进行重命名</span></span><br><span class="line">[root@study test]# mv -v mvtt shsh</span><br><span class="line">‘mvtt’ -&gt; ‘shsh’</span><br><span class="line">[root@study test]# ls</span><br><span class="line">shsh  test1</span><br><span class="line"><span class="meta">#</span><span class="bash">将shsh文件移动到/tmp目录下</span></span><br><span class="line">[root@study test]# mv shsh /tmp/</span><br><span class="line">[root@study test]# ls</span><br><span class="line">test1</span><br><span class="line">[root@study test]# ll /tmp/shsh </span><br><span class="line">-rw-r--r--. 1 root root 9240 Oct 16 13:57 /tmp/shsh</span><br></pre></td></tr></table></figure>

<h3 id="五、权限基本管理"><a href="#五、权限基本管理" class="headerlink" title="五、权限基本管理"></a>五、权限基本管理</h3><h4 id="1、权限"><a href="#1、权限" class="headerlink" title="1、权限"></a>1、权限</h4><p>　　在使用ls命令时，可以通过添加-l选项来查看文件的详细信息，那么输出信息中的第一列(共10位)就表示文件的类型与权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study test]# ll test1 </span><br><span class="line">-rw-r--r--. 1 root root 9240 Oct 16 13:57 test1</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/10/17/0OJv4g.png"></p>
<ul>
<li><p>第1位——文件类型</p>
<ul>
<li>“-“：普通文件</li>
<li>“d”：目录文件</li>
<li>“b”：块设备文件。存储设备即为块设备文件，如分区文件/dev/sda1</li>
<li>“c”：字符设备文件。输入设备一般都为这种文件，如鼠标、键盘等</li>
<li>“l”：链接文件</li>
<li>“p”：管道符文件</li>
<li>“s”：套接字文件。一些服务支持socket访问，就会产生这样的文件</li>
</ul>
<p>接下来的字符中，以三个为一组，且均为[rwx]的三个参数的组合。如果没有权限，则会出现[-]。</p>
</li>
<li><p>第2~4位——文件所属主权限</p>
<ul>
<li>r：代表可读(read)</li>
<li>w：代表可写(write)</li>
<li>x：代表可执行(execute)</li>
</ul>
</li>
<li><p>第5~7位——文件所属组权限</p>
</li>
<li><p>第8~10位——其他人权限(此处其他人指既不属于文件所属主，也不属于文件所属组)</p>
</li>
</ul>
<h4 id="2、修改权限命令——chmod"><a href="#2、修改权限命令——chmod" class="headerlink" title="2、修改权限命令——chmod"></a>2、修改权限命令——chmod</h4><blockquote>
<p>英文原意：change file mode bits</p>
<p>所在路径：/usr/bin/chmod</p>
<p>执行权限：所有用户</p>
<p>功能描述：修改文件的权限模式</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# chmod [选项] 权限模式 文件名</span><br><span class="line">选项：</span><br><span class="line">	-R：递归设置权限，连同子目录下的所有文件都会修改</span><br><span class="line">此处的权限模式可以使用数字权限或用户身份权限来赋予</span><br><span class="line">	若使用用户身份，则：</span><br><span class="line">		-----------</span><br><span class="line">		u：代表所属主</span><br><span class="line">		g：代表所属组</span><br><span class="line">		o：代表其他人</span><br><span class="line">		a：代表所有人</span><br><span class="line">		-----------</span><br><span class="line">		+：加入权限</span><br><span class="line">		-：减去权限</span><br><span class="line">		=：设置权限</span><br><span class="line">		-----------</span><br><span class="line">		r：读</span><br><span class="line">		w：写</span><br><span class="line">		x：执行</span><br><span class="line">	若使用数字权限，则：</span><br><span class="line">		-----------</span><br><span class="line">		4：代表r权限</span><br><span class="line">		2：代表w权限</span><br><span class="line">		1：代表x权限</span><br><span class="line">		-----------</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study test]# ll test1 </span><br><span class="line">-rw-r--r--. 1 root root 9240 Oct 16 13:57 test1</span><br><span class="line"><span class="meta">#</span><span class="bash">修改test1文件的权限为755，代表该文件所属主拥有读、写、执行权限；所属组和其他人拥有读和执行权限</span></span><br><span class="line">[root@study test]# chmod 755 test1 </span><br><span class="line">[root@study test]# ll test1 </span><br><span class="line">-rwxr-xr-x. 1 root root 9240 Oct 16 13:57 test1</span><br></pre></td></tr></table></figure>

<h4 id="3、目录与文件的权限意义"><a href="#3、目录与文件的权限意义" class="headerlink" title="3、目录与文件的权限意义"></a>3、目录与文件的权限意义</h4><ul>
<li><p>权限对文件的作用</p>
<ul>
<li>r：对文件有读权限，代表可以读取文件中的数据。即可以使用cat、more、less、head、tail等命令读取文件。</li>
<li>w：对文件有写权限，代表可以修改文件中的数据。即可以使用echo、vim等命令修改文件中的数据。需要注意的是，虽然拥有文件的写权限，但这并不代表可以将文件删除。若想删除文件，则需要拥有该文件的上级目录的写权限。</li>
<li>x：对文件有执行权限，代表该文件具有可以被系统执行的权限。但是该文件是否能正确被执行，还需取决于文件中的代码是不是正确的。对于文件来说，x权限是最高权限。</li>
</ul>
</li>
<li><p>权限对目录的作用</p>
<ul>
<li>r：对目录有读权限，代表可以查看目录下的内容。即可以使用ls命令查看该目录下的子文件和子目录。</li>
<li>w：对目录有写权限，代表可以修改目录下的数据，也就是说可以在目录中新建、删除、复制、剪切子文件或子目录。即可以使用touch、cp、rm、mv等命令操作目录。对于目录来说，w权限是最高权限。</li>
<li>x：对目录有执行权限，代表可以进入目录。即可以使用cd命令进入目录。</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改目录<span class="built_in">test</span>的权限为000</span></span><br><span class="line">[shain-l@study ~]$ chmod 000 test/</span><br><span class="line">[shain-l@study ~]$ ll -d test/</span><br><span class="line">d---------. 2 shain-l shain-l 18 Oct 17 20:02 test/</span><br><span class="line"><span class="meta">#</span><span class="bash">此时使用ls命令和<span class="built_in">cd</span>命令都被拒绝，因为没有读和执行权限</span></span><br><span class="line">[shain-l@study ~]$ ls test/</span><br><span class="line">ls: cannot open directory test/: Permission denied</span><br><span class="line">[shain-l@study ~]$ cd test/</span><br><span class="line">-bash: cd: test/: Permission denied</span><br><span class="line"><span class="meta">#</span><span class="bash">赋予该目录的所属主读的权限</span></span><br><span class="line">[shain-l@study ~]$ chmod 400 test/</span><br><span class="line">[shain-l@study ~]$ ll -d test/</span><br><span class="line">dr--------. 2 shain-l shain-l 18 Oct 17 20:02 test/</span><br><span class="line"><span class="meta">#</span><span class="bash">虽然具有读的权限，但因为无法进入目录，此时查看<span class="built_in">test</span>目录下的内容还是会出错</span></span><br><span class="line">[shain-l@study ~]$ ll test/</span><br><span class="line">ls: cannot access test/file: Permission denied</span><br><span class="line">total 0</span><br><span class="line">-????????? ? ? ? ?            ? file</span><br><span class="line"><span class="meta">#</span><span class="bash">赋予该目录r和x的权限</span></span><br><span class="line">[shain-l@study ~]$ chmod 500 test/</span><br><span class="line">[shain-l@study ~]$ ll -d test/</span><br><span class="line">dr-x------. 2 shain-l shain-l 18 Oct 17 20:02 test/</span><br><span class="line"><span class="meta">#</span><span class="bash">此时可以查看该目录下的子文件和子目录，也可以进入该目录</span></span><br><span class="line">[shain-l@study ~]$ ll test/</span><br><span class="line">total 4</span><br><span class="line">----------. 1 shain-l shain-l 10 Oct 17 20:02 file</span><br><span class="line">[shain-l@study ~]$ cd test/</span><br><span class="line">[shain-l@study test]$</span><br><span class="line"><span class="meta">#</span><span class="bash">尝试将<span class="built_in">test</span>目录下的文件重命名，操作被拒绝，因为没有<span class="built_in">test</span>目录的写权限</span></span><br><span class="line">[shain-l@study test]$ mv file ttt</span><br><span class="line">mv: cannot move ‘file’ to ‘ttt’: Permission denied</span><br><span class="line"><span class="meta">#</span><span class="bash">赋予<span class="built_in">test</span>目录写的权限</span></span><br><span class="line">[shain-l@study ~]$ chmod 700 test/</span><br><span class="line">[shain-l@study ~]$ ll -d test/</span><br><span class="line">drwx------. 2 shain-l shain-l 18 Oct 17 20:02 test/</span><br><span class="line"><span class="meta">#</span><span class="bash">此时可以对<span class="built_in">test</span>目录下的文件重命名</span></span><br><span class="line">[shain-l@study test]$ mv file ttt</span><br><span class="line">[shain-l@study test]$ ll</span><br><span class="line">total 4</span><br><span class="line">----------. 1 shain-l shain-l 10 Oct 17 20:02 ttt</span><br><span class="line"><span class="meta">#</span><span class="bash">当前ttt文件的权限为000，即无法对该文件读、写、执行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">使用cat命令读取该文件的内容，操作被拒绝</span></span><br><span class="line">[shain-l@study test]$ cat ttt</span><br><span class="line">cat: ttt: Permission denied</span><br><span class="line"><span class="meta">#</span><span class="bash">向该文件中执行追加写操作也被拒绝</span></span><br><span class="line">[shain-l@study test]$ echo &quot;12345&quot; &gt;&gt; ttt</span><br><span class="line">-bash: ttt: Permission denied</span><br><span class="line"><span class="meta">#</span><span class="bash">赋予该文件读的权限，则可以读取该文件中的数据</span></span><br><span class="line">[shain-l@study test]$ chmod 400 ttt</span><br><span class="line">[shain-l@study test]$ ll ttt</span><br><span class="line">-r--------. 1 shain-l shain-l 10 Oct 17 20:02 ttt</span><br><span class="line">[shain-l@study test]$ cat ttt</span><br><span class="line">test;test</span><br><span class="line"><span class="meta">#</span><span class="bash">赋予该文件写的权限，则可以向该文件中写入数据</span></span><br><span class="line">[shain-l@study test]$ chmod 600 ttt</span><br><span class="line">[shain-l@study test]$ ll ttt</span><br><span class="line">-rw-------. 1 shain-l shain-l 10 Oct 17 20:02 ttt</span><br><span class="line">[shain-l@study test]$ echo &quot;12345&quot; &gt;&gt; ttt</span><br><span class="line"><span class="meta">#</span><span class="bash">赋予该文件执行的权限，则当该文件中的代码正确时，即可执行该文件</span></span><br><span class="line">[shain-l@study test]$ chmod 700 ttt</span><br><span class="line">[shain-l@study test]$ ll ttt</span><br><span class="line">-rwx------. 1 shain-l shain-l 16 Oct 17 20:21 ttt</span><br></pre></td></tr></table></figure>

<h4 id="4、所属主和所属组命令"><a href="#4、所属主和所属组命令" class="headerlink" title="4、所属主和所属组命令"></a>4、所属主和所属组命令</h4><p>　　<strong>chown命令</strong></p>
<blockquote>
<p>英文原意：change file owner and group</p>
<p>所在路径：/usr/bin/chown</p>
<p>执行权限：所有用户</p>
<p>功能描述：修改文件和目录的所属主和所属组</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# chown [选项] 所属主:所属组 文件或目录</span><br><span class="line">选项：</span><br><span class="line">	-R：递归设置权限，也就是给子目录中的所有文件设置权限</span><br><span class="line">注意：</span><br><span class="line">	普通用户不能修改文件的所属主，即使自己就是该文件的所属主</span><br><span class="line">	普通用户可以修改所属主为自己的文件的权限</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用root用户在/tmp目录下创建一个文件abc</span></span><br><span class="line">[root@study tmp]# touch abc</span><br><span class="line"><span class="meta">#</span><span class="bash">所创建的文件的所属主和所属组都为root</span></span><br><span class="line">[root@study tmp]# ll abc</span><br><span class="line">-rw-r--r--. 1 root root 0 Oct 17 23:35 abc</span><br><span class="line"><span class="meta">#</span><span class="bash">修改文件的所属主为shain<span class="_">-l</span></span></span><br><span class="line">[root@study tmp]# chown shain-l abc</span><br><span class="line">[root@study tmp]# ll abc</span><br><span class="line">-rw-r--r--. 1 shain-l root 0 Oct 17 23:35 abc</span><br><span class="line"><span class="meta">#</span><span class="bash">将文件的所属组也更改为shain<span class="_">-l</span></span></span><br><span class="line">[root@study tmp]# chown shain-l:shain-l abc</span><br><span class="line"><span class="meta">#</span><span class="bash">此时文件abc的所属主和所属组都为shain<span class="_">-l</span></span></span><br><span class="line">[root@study tmp]# ll abc</span><br><span class="line">-rw-r--r--. 1 shain-l shain-l 0 Oct 17 23:35 abc</span><br><span class="line"><span class="meta">#</span><span class="bash">使用shain<span class="_">-l</span>用户登录，更改/tmp目录下的文件abc的所属主，提示操作被拒绝</span></span><br><span class="line">[shain-l@study tmp]$ chown test abc</span><br><span class="line">chown: changing ownership of ‘abc’: Operation not permitted</span><br></pre></td></tr></table></figure>

<p>　　<strong>chgrp命令</strong></p>
<blockquote>
<p>英文原意：change group ownership</p>
<p>所在路径：/usr/bin/chgrp</p>
<p>执行权限：所有用户</p>
<p>功能描述：修改文件和目录的所属组</p>
</blockquote>
<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study tmp]# ll abc</span><br><span class="line">-rw-rw-r--. 1 test shain-l 0 Oct 17 23:35 abc</span><br><span class="line"><span class="meta">#</span><span class="bash">修改文件abc的所属组为<span class="built_in">test</span></span></span><br><span class="line">[root@study tmp]# chgrp test abc </span><br><span class="line">[root@study tmp]# ll abc</span><br><span class="line">-rw-rw-r--. 1 test test 0 Oct 17 23:35 abc</span><br></pre></td></tr></table></figure>

<h4 id="5、umask默认权限"><a href="#5、umask默认权限" class="headerlink" title="5、umask默认权限"></a>5、umask默认权限</h4><ul>
<li>查看系统的默认umask权限</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">root用户的默认权限为022</span></span><br><span class="line">[root@study ~]# umask</span><br><span class="line">0022</span><br><span class="line">[root@study ~]# umask -S</span><br><span class="line">u=rwx,g=rx,o=rx</span><br><span class="line"><span class="meta">#</span><span class="bash">普通用户的默认权限为002</span></span><br><span class="line">[shain-l@study ~]$ umask</span><br><span class="line">0002</span><br><span class="line">[shain-l@study ~]$ umask -S</span><br><span class="line">u=rwx,g=rwx,o=rx</span><br></pre></td></tr></table></figure>

<ul>
<li>umask权限计算方法</li>
</ul>
<p>　　对于文件来说，新建文件的默认最大权限为666，没有执行权限。因为执行权限对于文件来说比较危险，不能在新建文件的时候默认赋予，必须通过用户手工赋予。</p>
<p>　　对于目录来说，新建目录的默认最大权限为777。因为对于目录而言，执行权限意味着进入目录，并没有什么危险。</p>
<p>　　由于文件的默认最大权限为666，而root用户的umask的默认值为022，所以root用户在新建文件的时候，文件的默认权限为666扣除默认的所属组和其他人的写权限，即”-rw-rw-rw-“扣除”—–w–w-“，等于”-rw-r–r–”；而普通用户的umask的默认值为002，所以普通用户在新建文件的时候，文件的默认权限为666扣除默认的其他人的写权限，即”-rw-rw-rw-“扣除”——–w-“，等于”-rw-rw–r–”</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study tmp]# touch uma</span><br><span class="line">[root@study tmp]# ll uma</span><br><span class="line">-rw-r--r--. 1 root root 0 Oct 18 00:11 uma</span><br><span class="line">[shain-l@study tmp]$ touch umb</span><br><span class="line">[shain-l@study tmp]$ ll umb</span><br><span class="line">-rw-rw-r--. 1 shain-l shain-l 0 Oct 18 00:12 umb</span><br></pre></td></tr></table></figure>

<p>　　同理，root用户创建目录时默认赋予的权限为”drwxr-xr-x”；普通用户创建目录时默认赋予的权限为”drwxrwxr-x”</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study tmp]# mkdir umadir</span><br><span class="line">[root@study tmp]# ll -d umadir/</span><br><span class="line">drwxr-xr-x. 2 root root 6 Oct 18 00:14 umadir/</span><br><span class="line">[shain-l@study tmp]$ mkdir umbdir</span><br><span class="line">[shain-l@study tmp]$ ll -d umbdir/</span><br><span class="line">drwxrwxr-x. 2 shain-l shain-l 6 Oct 18 00:15 umbdir/</span><br></pre></td></tr></table></figure>

<h3 id="六、帮助命令"><a href="#六、帮助命令" class="headerlink" title="六、帮助命令"></a>六、帮助命令</h3><h4 id="1、man命令"><a href="#1、man命令" class="headerlink" title="1、man命令"></a>1、man命令</h4><blockquote>
<p>英文原意：an interface to the on-line reference manuals</p>
<p>所在路径：/usr/bin/man</p>
<p>执行权限：所有用户</p>
<p>功能描述：显示联机帮助手册</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# man [选项] 命令</span><br><span class="line">选项：</span><br><span class="line">	-f：查看命令拥有哪个级别的帮助</span><br><span class="line">	-k：查看和命令相关的所有帮助</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# man ls</span><br><span class="line">LS(1)                                              User Commands                                              LS(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       ls - list directory contents</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       ls [OPTION]... [FILE]...</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       List information about the FILEs (the current directory by default).  Sort entries alphabetically if none of</span><br><span class="line">       -cftuvSUX nor --sort is specified.</span><br><span class="line"></span><br><span class="line">       Mandatory arguments to long options are mandatory for short options too.</span><br><span class="line"></span><br><span class="line">       -a, --all</span><br><span class="line">              do not ignore entries starting with .</span><br><span class="line">……省略部分输出……</span><br></pre></td></tr></table></figure>

<ul>
<li>man命令快捷键</li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>上箭头或k</td>
<td>向上移动一行</td>
</tr>
<tr>
<td>下箭头或j</td>
<td>向下移动一行</td>
</tr>
<tr>
<td>PgUp</td>
<td>向上翻页</td>
</tr>
<tr>
<td>PgDn</td>
<td>向下翻页</td>
</tr>
<tr>
<td>g</td>
<td>移动到第一页</td>
</tr>
<tr>
<td>G</td>
<td>移动到最后一页</td>
</tr>
<tr>
<td>q</td>
<td>退出</td>
</tr>
<tr>
<td>/字符串</td>
<td>从当前页向下搜索字符串</td>
</tr>
<tr>
<td>n</td>
<td>当搜索字符串时，可以使用n键找到下一个字符串</td>
</tr>
</tbody></table>
<ul>
<li>man命令的帮助级别</li>
</ul>
<table>
<thead>
<tr>
<th>级别</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>普通用户可以执行的系统命令和可执行文件的帮助</td>
</tr>
<tr>
<td>2</td>
<td>内核可以调用的函数和工具的帮助</td>
</tr>
<tr>
<td>3</td>
<td>C语言函数的帮助</td>
</tr>
<tr>
<td>4</td>
<td>设备和特殊文件的帮助</td>
</tr>
<tr>
<td>5</td>
<td>配置文件的帮助</td>
</tr>
<tr>
<td>6</td>
<td>游戏的帮助</td>
</tr>
<tr>
<td>7</td>
<td>杂项的帮助</td>
</tr>
<tr>
<td>8</td>
<td>超级用户可以执行的系统命令的帮助</td>
</tr>
<tr>
<td>9</td>
<td>内核的帮助</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用 man -f 命令或 whatsis 命令查看命令拥有哪个级别的帮助</span></span><br><span class="line">[root@study ~]# man -f ls</span><br><span class="line">ls (1)               - list directory contents</span><br><span class="line">ls (1p)              - list directory contents</span><br><span class="line">[root@study ~]# whatis passwd</span><br><span class="line">sslpasswd (1ssl)     - compute password hashes</span><br><span class="line">passwd (1)           - update user&#x27;s authentication tokens</span><br><span class="line">passwd (5)           - password file</span><br><span class="line">[root@study ~]# man -f ifconfig</span><br><span class="line">ifconfig (8)         - configure a network interface</span><br></pre></td></tr></table></figure>

<h4 id="2、info命令"><a href="#2、info命令" class="headerlink" title="2、info命令"></a>2、info命令</h4><p>　　info命令的帮助信息是一套完整的资料，每个单独命令的帮助信息只是这套完整资料中的某一个小章节。</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>上箭头</td>
<td>向上移动一行</td>
</tr>
<tr>
<td>下箭头</td>
<td>向下移动一行</td>
</tr>
<tr>
<td>PgUp</td>
<td>向上翻一页</td>
</tr>
<tr>
<td>PgDn</td>
<td>向下翻一页</td>
</tr>
<tr>
<td>Tab</td>
<td>在有”*”符号的节点间进行切换</td>
</tr>
<tr>
<td>回车</td>
<td>进入有”*”符号的子页面，查看详细帮助信息</td>
</tr>
<tr>
<td>u</td>
<td>进入上一层信息</td>
</tr>
<tr>
<td>n</td>
<td>进入下一小节信息</td>
</tr>
<tr>
<td>p</td>
<td>进入上一小节信息</td>
</tr>
<tr>
<td>？</td>
<td>查看帮助信息</td>
</tr>
<tr>
<td>q</td>
<td>退出info信息</td>
</tr>
</tbody></table>
<h4 id="3、help命令"><a href="#3、help命令" class="headerlink" title="3、help命令"></a>3、help命令</h4><blockquote>
<p>help只能获取Shell内置命令的帮助，可以使用type命令来区分内置命令与外部命令</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/10/18/0XAoH1.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# type cat</span><br><span class="line">cat is /usr/bin/cat</span><br><span class="line">[root@study ~]# type help</span><br><span class="line">help is a shell builtin</span><br><span class="line"><span class="meta">#</span><span class="bash">使用<span class="built_in">help</span>命令查看<span class="built_in">history</span>命令的帮助</span></span><br><span class="line">[root@study ~]# help history</span><br><span class="line">history: history [-c] [-d offset] [n] or history -anrw [filename] or history -ps arg [arg...]</span><br><span class="line">    Display or manipulate the history list.</span><br><span class="line">    </span><br><span class="line">    Display the history list with line numbers, prefixing each modified</span><br><span class="line">    entry with a `*&#x27;.  An argument of N lists only the last N entries.</span><br><span class="line">    </span><br><span class="line">    Options:</span><br><span class="line">      -c	clear the history list by deleting all of the entries</span><br><span class="line">      -d offset	delete the history entry at offset OFFSET.</span><br><span class="line">    </span><br><span class="line">      -a	append history lines from this session to the history file</span><br><span class="line">      -n	read all history lines not already read from the history file</span><br><span class="line">……省略部分输出……</span><br></pre></td></tr></table></figure>

<h4 id="4、–help选项"><a href="#4、–help选项" class="headerlink" title="4、–help选项"></a>4、–help选项</h4><p>　　绝大多数命令都可以使用”–help”选项来查看帮助</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# ls --help</span><br><span class="line">Usage: ls [OPTION]... [FILE]...</span><br><span class="line">List information about the FILEs (the current directory by default).</span><br><span class="line">Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.</span><br><span class="line"></span><br><span class="line">Mandatory arguments to long options are mandatory for short options too.</span><br><span class="line">  -a, --all                  do not ignore entries starting with .</span><br><span class="line">  -A, --almost-all           do not list implied . and ..</span><br><span class="line">      --author               with -l, print the author of each file</span><br><span class="line">  -b, --escape               print C-style escapes for nongraphic characters</span><br><span class="line">      --block-size=SIZE      scale sizes by SIZE before printing them; e.g.,</span><br><span class="line">                               &#x27;--block-size=M&#x27; prints sizes in units of</span><br><span class="line">                               1,048,576 bytes; see SIZE format below</span><br><span class="line">  -B, --ignore-backups       do not list implied entries ending with ~</span><br><span class="line">  ……省略部分输出……</span><br></pre></td></tr></table></figure>

<h3 id="七、搜索命令"><a href="#七、搜索命令" class="headerlink" title="七、搜索命令"></a>七、搜索命令</h3><h4 id="1、whereis命令"><a href="#1、whereis命令" class="headerlink" title="1、whereis命令"></a>1、whereis命令</h4><blockquote>
<p>英文原意：locate the binary, source, and manual page files for a command</p>
<p>所在路径：/usr/bin/whereis</p>
<p>执行权限：所有用户</p>
<p>功能描述：查找二进制命令、源文件和帮助文档的命令</p>
</blockquote>
<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# whereis ls</span><br><span class="line">ls: /usr/bin/ls /usr/share/man/man1/ls.1.gz /usr/share/man/man1p/ls.1p.gz</span><br><span class="line">[root@study ~]# whereis cd</span><br><span class="line">cd: /usr/bin/cd /usr/share/man/man1/cd.1.gz /usr/share/man/man1p/cd.1p.gz</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：whereis命令不能用于搜索普通文件，只能搜索系统命令</p>
</blockquote>
<h4 id="2、which命令"><a href="#2、which命令" class="headerlink" title="2、which命令"></a>2、which命令</h4><blockquote>
<p>英文原意：shows the full path of (shell) commands</p>
<p>所在路径：/usr/bin/which</p>
<p>执行权限：所有用户</p>
<p>功能描述：列出命令的所在路径</p>
</blockquote>
<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查找ifconfig命令的完整文件名</span></span><br><span class="line">[root@study ~]# which ifconfig</span><br><span class="line">/usr/sbin/ifconfig</span><br><span class="line"><span class="meta">#</span><span class="bash">查找ls命令的完整文件名，可知ls还存在别名</span></span><br><span class="line">[root@study ~]# which ls</span><br><span class="line">alias ls=&#x27;ls --color=auto&#x27;</span><br><span class="line">	/usr/bin/ls</span><br><span class="line"><span class="meta">#</span><span class="bash">由于<span class="built_in">history</span>为bash内置的命令，而<span class="built_in">which</span>默认查找PATH内所设置的目录，所以无法查找到<span class="built_in">history</span>命令所在路径</span></span><br><span class="line">[root@study ~]# which history</span><br><span class="line">/usr/bin/which: no history in (/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>which命令是根据PATH变量所规范的路径来查找执行文件的。若添加-a选项，则可以列出所有的可以找到的同名执行文件。</p>
<p>whereis命令可以在找到二进制命令的同时，查找到帮助文档的位置</p>
<p>which命令在查找到二进制命令的同时，如果这个命令有别名，则还可以找到别名命令。</p>
</blockquote>
<h4 id="3、locate命令"><a href="#3、locate命令" class="headerlink" title="3、locate命令"></a>3、locate命令</h4><blockquote>
<p>英文原意：find files by name</p>
<p>所在路径：/usr/bin/locate</p>
<p>执行权限：所有用户</p>
<p>功能描述：按照文件名搜索文件</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# locate [选项] 文件名或部分文件名</span><br><span class="line">选项：</span><br><span class="line">	-c：不输出文件名，仅计算找到的数量</span><br><span class="line">	-i：忽略大小写的差异</span><br><span class="line">	-l：仅输出几行，如输出5行则是-l 5</span><br><span class="line">	-S：输出locate所使用的数据库文件的相关信息，包括该数据库记录的文件/目录数量等</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查找完整文件名中包含passwd的，添加-c选项，则仅计算找到的文件数量</span></span><br><span class="line">[root@study ~]# locate -c passwd</span><br><span class="line">135</span><br><span class="line"><span class="meta">#</span><span class="bash">查找完整文件名中包含passwd的，添加-l选项，指定仅列出5行</span></span><br><span class="line">[root@study ~]# locate -l 5 passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd-</span><br><span class="line">/etc/pam.d/passwd</span><br><span class="line">/etc/security/opasswd</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line"><span class="meta">#</span><span class="bash">列出locate查询所使用的数据库文件的文件名与各数据数量</span></span><br><span class="line">[root@study ~]# locate -S</span><br><span class="line">Database /var/lib/mlocate/mlocate.db:</span><br><span class="line">	13,632 directories    #总记录目录数</span><br><span class="line">	154,711 files         #总记录文件数</span><br><span class="line">	7,749,519 bytes in file names</span><br><span class="line">	3,567,270 bytes used to store database</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用locate命令查找数据特别快，这是因为locate寻找的数据是由已建立的数据库/var/lib/mlocate/里面的数据所查找到的，所以不用直接再去硬盘中读取数据。</p>
<p>默认情况下，CentOS 7.x每天更新一次数据库，所以在数据库更新前新建立的文件会查找不到。若想手动更新locate数据库，只需输入updatedb命令即可。updatedb命令会读取/etc/updatedb.conf这个配置文件的设置，然后再去硬盘中进行查找文件名的操作，最后更新整个数据库文件。</p>
</blockquote>
<ul>
<li>updatedb.conf配置文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# vi /etc/updatedb.conf </span><br><span class="line"><span class="meta"> #</span><span class="bash">开启搜索限制，让这个配置文件生效</span></span><br><span class="line"> PRUNE_BIND_MOUNTS = &quot;yes&quot;</span><br><span class="line"><span class="meta"> #</span><span class="bash">在locate执行搜索时，禁止搜索这些文件系统类型</span></span><br><span class="line"> PRUNEFS = &quot;……&quot;</span><br><span class="line"><span class="meta"> #</span><span class="bash">在locate执行搜索时，禁止搜索带有这些扩展名的文件</span></span><br><span class="line"> PRUNENAMES = &quot;……&quot;</span><br><span class="line"><span class="meta"> #</span><span class="bash">在locate执行搜索时，禁止搜索这些系统目录</span></span><br><span class="line"> PRUNEPATHS = &quot;……&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>updatedb：根据/etc/updatedb.conf的设置去查找系统硬盘内的文件，并更新/var/lib/mlocate内的数据库文件</li>
<li>locate：根据/var/lib/mlocate内的数据库记录，找出用户所输入关键词的文件名</li>
</ul>
<h4 id="4、find命令"><a href="#4、find命令" class="headerlink" title="4、find命令"></a>4、find命令</h4><blockquote>
<p>英文原意：search for files in a directory hierarchy</p>
<p>所在路径：/usr/bin/find</p>
<p>执行权限：所有用户</p>
<p>功能描述：在目录中搜索文件</p>
</blockquote>
<ul>
<li><input disabled="" type="checkbox"> <strong>按照文件名搜索</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# find 搜索路径 [选项] 搜索内容</span><br><span class="line">选项：</span><br><span class="line">	-name：按照文件名搜索</span><br><span class="line">	-iname：按照文件名搜索，不区分大小写</span><br><span class="line">	-inum：按照inode号搜素</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查找<span class="built_in">test</span>目录下的文件名为f1的文件所在路径</span></span><br><span class="line">[root@study test]# find . -name f1</span><br><span class="line">./tst/f1</span><br><span class="line"><span class="meta">#</span><span class="bash">使用-iname选项，则不会区分大小写</span></span><br><span class="line">[root@study test]# find -iname f1</span><br><span class="line">./tst/f1</span><br><span class="line">./tst/F1</span><br><span class="line"><span class="meta">#</span><span class="bash">查看文件f1的inode号码</span></span><br><span class="line">[root@study tst]# ll -i f1</span><br><span class="line">4264 -rw-r--r--. 1 root root 0 Oct 18 14:51 f1</span><br><span class="line"><span class="meta">#</span><span class="bash">使用-inum选项，搜索inode号码为4264的文件</span></span><br><span class="line">[root@study test]# find . -inum 4264</span><br><span class="line">./tst/f1</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled="" type="checkbox"> <strong>按照文件大小搜索</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# find 搜索路径 [选项] 搜索内容</span><br><span class="line">选项：</span><br><span class="line">	-size [+|-] 大小：按照指定大小搜索文件</span><br><span class="line">	&quot;+&quot;表示搜索比指定大小还要大的文件</span><br><span class="line">	&quot;-&quot;表示搜索比指定大小还要小的文件</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">tst目录下各文件的大小如下所示</span></span><br><span class="line">[root@study tst]# ll -h</span><br><span class="line">total 3.7M</span><br><span class="line">-rw-r--r--. 1 root root  19K Oct 18 15:07 f1</span><br><span class="line">-rw-r--r--. 1 root root 218K Oct 18 15:08 F1</span><br><span class="line">-rw-r--r--. 1 root root  221 Oct 18 15:09 f2</span><br><span class="line">-rw-r--r--. 1 root root 871K Oct 18 15:08 g1</span><br><span class="line">-rw-r--r--. 1 root root 2.6M Oct 18 15:09 g2</span><br><span class="line"><span class="meta">#</span><span class="bash">搜索文件大小大于200k的文件(注意k为小写)</span></span><br><span class="line">[root@study tst]# find . -size +200k</span><br><span class="line">./F1</span><br><span class="line">./g1</span><br><span class="line">./g2</span><br><span class="line"><span class="meta">#</span><span class="bash">搜索文件大小大于2M的文件(注意M为大写)</span></span><br><span class="line">[root@study tst]# find . -size +2M</span><br><span class="line">./g2</span><br></pre></td></tr></table></figure>

<p>按文件大小查找时单位如下所示（若指定大小后未跟上单位，则默认为b，即以512字节为单位）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/10/18/0jgbSs.png"></p>
<ul>
<li><input disabled="" type="checkbox"> <strong>按照修改时间搜索</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# find 搜索路径 [选项] 搜索内容</span><br><span class="line">选项：</span><br><span class="line">	-atmie [+|-]时间：按照文件访问时间搜索</span><br><span class="line">	-mtime [+|-]时间：按照文件数据修改时间搜索</span><br><span class="line">	-ctime [+|-]时间：按照文件状态修改时间搜索</span><br></pre></td></tr></table></figure>

<ul>
<li>时间的含义（此处以mtime为例）<ul>
<li>-5：代表5天内修改的文件</li>
<li>5：代表前5~6天那一天修改的文件</li>
<li>+5：代表6天前修改的文件</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/10/18/0jhcrR.png"></p>
<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">列出当前时间，并在当前目录下查找11天前修改过的文件</span></span><br><span class="line">[root@study shell]# date; find . -mtime +10</span><br><span class="line">Mon Oct 19 12:21:50 CST 2020</span><br><span class="line">./hello.sh</span><br><span class="line">./tar/hello.sh</span><br><span class="line">./tar/tar_2/hello.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">查看使用find搜索到的以上文件的信息</span></span><br><span class="line">[root@study shell]# ll hello.sh tar/hello.sh tar/tar_2/hello.sh </span><br><span class="line">-rwxr-xr-x. 1 root root 83 Oct  7 18:37 hello.sh</span><br><span class="line">-rwxr-xr-x. 1 root root 83 Oct  7 18:37 tar/hello.sh</span><br><span class="line">-rwxr-xr-x. 1 root root 83 Oct  7 18:37 tar/tar_2/hello.sh</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled="" type="checkbox"> <strong>按照权限搜索</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# find 搜索路径 [选项] 搜索内容</span><br><span class="line">选项：</span><br><span class="line">	-perm 权限模式：查找文件权限刚好等于&quot;权限模式&quot;的文件</span><br><span class="line">	-perm -权限模式：查找文件权限全部包含&quot;权限模式&quot;的文件</span><br><span class="line">	-perm /权限模式：查找文件权限包含&quot;权限模式&quot;的任意一个权限的文件</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在当前目录下查找权限模式为777的文件</span></span><br><span class="line">[root@study ~]# find . -perm 777</span><br><span class="line">./aab</span><br><span class="line">./aaaaaaa</span><br><span class="line">./te</span><br><span class="line">[root@study ~]# ll aab</span><br><span class="line">-rwxrwxrwx. 1 root root 23960 Oct 16 10:46 aab</span><br><span class="line"><span class="meta">#</span><span class="bash">在当前目录下查找权限模式包含775的文件</span></span><br><span class="line">[root@study ~]# find . -perm -775</span><br><span class="line">./aab</span><br><span class="line">./shell/parameter.sh</span><br><span class="line">./shell/tar/parameter.sh</span><br><span class="line">./shell/tar/tar_2/parameter.sh</span><br><span class="line">./aaaaaaa</span><br><span class="line">./te</span><br><span class="line">[root@study ~]# ll shell/parameter.sh </span><br><span class="line">-rwxrwxr-x. 1 root root 63 Oct  8 16:39 shell/parameter.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">在当前目录下查找权限包含755的任意一个权限的文件，即搜索到的文件的所属主拥有读写执行权限或所属组拥有读和执行权限或其他人拥有读和执行权限都满足条件</span></span><br><span class="line">[root@study ~]# find . -perm /775</span><br><span class="line">.</span><br><span class="line">./.bash_logout</span><br><span class="line">./.bash_profile</span><br><span class="line">./.cshrc</span><br><span class="line">./.tcshrc</span><br><span class="line">./anaconda-ks.cfg</span><br><span class="line">……省略部分输出……</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled="" type="checkbox"> <strong>按照所有者和所属组搜索</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# find 搜索路径 [选项] 搜索内容</span><br><span class="line">选项：</span><br><span class="line">	-uid 用户ID：按照用户ID查找所属主是指定ID的文件</span><br><span class="line">	-gid 组ID：按照用户组ID查找所属组是指定ID的文件</span><br><span class="line">	-user 用户名：按照用户名查找所属主是指定用户的文件</span><br><span class="line">	-group 组名：按照组名查找所属组是指定用户组的文件</span><br><span class="line">	-nouser：查找没有所有者的文件</span><br></pre></td></tr></table></figure>

<blockquote>
<p>按照所有者和所属组查找时，”–nouser”选项比较常用，主要用于查找垃圾文件。</p>
</blockquote>
<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查找根目录下所属主是shain<span class="_">-l</span>用户的文件，输出前三行</span></span><br><span class="line">[root@study ~]# find / -user shain-l | head -n 3</span><br><span class="line">/home/shain-l</span><br><span class="line">/home/shain-l/.mozilla</span><br><span class="line">/home/shain-l/.mozilla/extensions</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled="" type="checkbox"> <strong>按照文件类型搜索</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# find 搜索路径 [选项] 搜索内容</span><br><span class="line">选项：</span><br><span class="line">	-type d：查找目录</span><br><span class="line">	-type f：查找普通文件</span><br><span class="line">	-type l：查找软链接文件</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查找当前目录下的软链接文件</span></span><br><span class="line">[root@study ~]# find . -type l</span><br><span class="line">./aaaaaaa</span><br><span class="line">./te</span><br><span class="line"><span class="meta">#</span><span class="bash">文件aaaaaaa和te都链接到文件abc</span></span><br><span class="line">[root@study ~]# ll aaaaaaa te</span><br><span class="line">lrwxrwxrwx. 1 root root 3 Oct 17 14:36 aaaaaaa -&gt; abc</span><br><span class="line">lrwxrwxrwx. 1 root root 3 Oct 17 14:36 te -&gt; abc</span><br><span class="line"><span class="meta">#</span><span class="bash">查找当前目录下的目录文件</span></span><br><span class="line">[root@study ~]# find . -type d</span><br><span class="line">.</span><br><span class="line">./.cache</span><br><span class="line">./.cache/dconf</span><br><span class="line">./.cache/abrt</span><br><span class="line">./.dbus</span><br><span class="line">./.dbus/session-bus</span><br><span class="line">./.config</span><br><span class="line">./.config/abrt</span><br><span class="line">./test</span><br><span class="line">./test/tst</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled="" type="checkbox"> <strong>逻辑运算符</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# find 搜索路径 [选项] 搜索内容</span><br><span class="line">选项：</span><br><span class="line">	-a：     and 逻辑与</span><br><span class="line">	-o：     or  逻辑或</span><br><span class="line">	-not：   not 逻辑非</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">搜索当前目录下文件大小大于10k并且文件类型为普通文件的文件</span></span><br><span class="line">[root@study ~]# find . -size +10k -a -type f</span><br><span class="line">./.bash_history</span><br><span class="line">./aab</span><br><span class="line">./test/tst/f1</span><br><span class="line">./test/tst/F1</span><br><span class="line">./test/tst/g1</span><br><span class="line">./test/tst/g2</span><br><span class="line">./.swp</span><br><span class="line">./.swo</span><br><span class="line">[root@study ~]# ll -h aab</span><br><span class="line">-rwxrwxrwx. 1 root root 24K Oct 16 10:46 aab</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled="" type="checkbox"> <strong>其他选项</strong></li>
</ul>
<p>　　<strong>-exec选项</strong></p>
<blockquote>
<p>将find命令的结果交给”-exec”调用的命令2处理。”{}”就代表find命令的查找结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# find 搜索路径 [选项] 搜索内容 -exec 命令2 &#123;&#125; \; </span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">find命令搜索当前目录下文件大小大于10k的文件，并将其详细信息输出</span></span><br><span class="line">[root@study ~]# find . -size +10k -exec ls -lh &#123;&#125; \;</span><br><span class="line">-rw-------. 1 root root 59K Oct 18 21:26 ./.bash_history</span><br><span class="line">-rwxrwxrwx. 1 root root 24K Oct 16 10:46 ./aab</span><br><span class="line">-rw-r--r--. 1 root root 19K Oct 18 15:07 ./test/tst/f1</span><br><span class="line">-rw-r--r--. 1 root root 218K Oct 18 15:08 ./test/tst/F1</span><br><span class="line">-rw-r--r--. 1 root root 871K Oct 18 15:08 ./test/tst/g1</span><br><span class="line">-rw-r--r--. 1 root root 2.6M Oct 18 15:09 ./test/tst/g2</span><br><span class="line">-rw-------. 1 root root 12K Oct  4 15:54 ./.swp</span><br><span class="line">-rw-------. 1 root root 12K Oct  4 15:54 ./.swo</span><br></pre></td></tr></table></figure>

<p>　　<strong>-ok选项</strong></p>
<blockquote>
<p>“-ok”选项和”-exec”选项的作用基本一致。区别在于”-exec”的命令2会直接处理，而不询问；”-ok”的命令2在处理前会询问用户是否进行该操作，在得到确认后才会执行</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# find . -size +10k -ok ls -lh &#123;&#125; \;</span><br><span class="line">&lt; ls ... ./.bash_history &gt; ? y</span><br><span class="line">-rw-------. 1 root root 59K Oct 18 21:26 ./.bash_history</span><br><span class="line">&lt; ls ... ./aab &gt; ? y</span><br><span class="line">-rwxrwxrwx. 1 root root 24K Oct 16 10:46 ./aab</span><br><span class="line">&lt; ls ... ./test/tst/f1 &gt; ? y</span><br><span class="line">-rw-r--r--. 1 root root 19K Oct 18 15:07 ./test/tst/f1</span><br><span class="line">&lt; ls ... ./test/tst/F1 &gt; ? y</span><br><span class="line">-rw-r--r--. 1 root root 218K Oct 18 15:08 ./test/tst/F1</span><br><span class="line">&lt; ls ... ./test/tst/g1 &gt; ? y</span><br><span class="line">-rw-r--r--. 1 root root 871K Oct 18 15:08 ./test/tst/g1</span><br><span class="line">&lt; ls ... ./test/tst/g2 &gt; ? y</span><br><span class="line">-rw-r--r--. 1 root root 2.6M Oct 18 15:09 ./test/tst/g2</span><br><span class="line">&lt; ls ... ./.swp &gt; ? y</span><br><span class="line">-rw-------. 1 root root 12K Oct  4 15:54 ./.swp</span><br><span class="line">&lt; ls ... ./.swo &gt; ? y</span><br><span class="line">-rw-------. 1 root root 12K Oct  4 15:54 ./.swo</span><br></pre></td></tr></table></figure>

<h4 id="5、grep命令"><a href="#5、grep命令" class="headerlink" title="5、grep命令"></a>5、grep命令</h4><blockquote>
<p>英文原意：print lines matching a pattern</p>
<p>所在路径：/usr/bin/grep</p>
<p>执行权限：所有用户</p>
<p>功能描述：在文件中提取和匹配符合条件的字符串行</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@study ~]# grep [选项] &quot;搜索内容&quot; 文件名</span><br><span class="line">选项：</span><br><span class="line">	-i：忽略大小写</span><br><span class="line">	-n：输出行号</span><br><span class="line">	-v：反向查找</span><br><span class="line">	--color=auto：搜索出的关键字用颜色显示</span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">搜索光盘中带有httpd的rpm包</span></span><br><span class="line">[root@study ~]# ls /mnt/cdrom/Packages/ | grep httpd</span><br><span class="line">httpd-2.4.6-88.el7.centos.x86_64.rpm</span><br><span class="line">httpd-devel-2.4.6-88.el7.centos.x86_64.rpm</span><br><span class="line">httpd-manual-2.4.6-88.el7.centos.noarch.rpm</span><br><span class="line">httpd-tools-2.4.6-88.el7.centos.x86_64.rpm</span><br><span class="line">libmicrohttpd-0.9.33-2.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<blockquote>
<p>find命令用于在系统中搜索符合条件的文件名。如需模糊查询，则使用通配符进行匹配(通配符是完全匹配)。</p>
<p>grep命令用于在文件中搜索符合条件的字符串。如需模糊查询，则使用正则表达式进行匹配(正则表达式是包含匹配)。</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux常用命令</tag>
      </tags>
  </entry>
</search>
